/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#define HACKY_RUN
// DISCLAIMER: These networks are just for comparative purposes
#include "library_fixed.h"
#include <iostream>
using namespace std;

int party = 0;
int port = 32000;
string address = "127.0.0.1";
int num_threads = 4;
int32_t bitlength = 41;

void MatAddBroadCast2(int64_t s1, int64_t s2, uint64_t *A, uint64_t *B,
                      uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          SecretAdd(Arr2DIdxRowM(A, s1, s2, i1, i2), Arr1DIdxRowM(B, s2, i2));
    }
  }
}

void MatAdd2(int64_t s1, int64_t s2, uint64_t *A, uint64_t *B,
             uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) = SecretAdd(
          Arr2DIdxRowM(A, s1, s2, i1, i2), Arr2DIdxRowM(B, s1, s2, i1, i2));
    }
  }
}

void MatAddBroadCast4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr4DIdxRowM(A, s1, s2, s3, s4, i1, i2, i3, i4),
                        Arr1DIdxRowM(B, s4, i4));
        }
      }
    }
  }
}

void MatAdd4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *A,
             uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr4DIdxRowM(A, s1, s2, s3, s4, i1, i2, i3, i4),
                        Arr4DIdxRowM(B, s1, s2, s3, s4, i1, i2, i3, i4));
        }
      }
    }
  }
}

void MatAddBroadCast5(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      int64_t s5, uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(
                    Arr5DIdxRowM(A, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5),
                    Arr1DIdxRowM(B, s5, i5));
          }
        }
      }
    }
  }
}

void MatAdd5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
             uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(
                    Arr5DIdxRowM(A, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5),
                    Arr5DIdxRowM(B, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5));
          }
        }
      }
    }
  }
}

void CreateTensor1(int64_t s1, int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(arr, s1, i1) = val;
  }
}

void CreateTensor2(int64_t s1, int64_t s2, int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(arr, s1, s2, i1, i2) = val;
    }
  }
}

void CreateTensor3(int64_t s1, int64_t s2, int64_t s3, int64_t val,
                   int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) = val;
      }
    }
  }
}

void CreateTensor4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t val,
                   int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) = val;
        }
      }
    }
  }
}

void CreateTensor5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                   int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(arr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) = val;
          }
        }
      }
    }
  }
}

void CopyTensor1(int64_t s1, uint64_t *targetArr, uint64_t *fromArr,
                 uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(targetArr, s1, i1) = Arr1DIdxRowM(fromArr, s1, i1);
  }
}

void CopyTensor2(int64_t s1, int64_t s2, uint64_t *targetArr, uint64_t *fromArr,
                 uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(targetArr, s1, s2, i1, i2) =
          Arr2DIdxRowM(fromArr, s1, s2, i1, i2);
    }
  }
}

void CopyTensor3(int64_t s1, int64_t s2, int64_t s3, uint64_t *targetArr,
                 uint64_t *fromArr, uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(targetArr, s1, s2, s3, i1, i2, i3) =
            Arr3DIdxRowM(fromArr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
}

void CopyTensor4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                 uint64_t *targetArr, uint64_t *fromArr, uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(targetArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr4DIdxRowM(fromArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void CreateIdentity11(int64_t s1, uint64_t *fromArr, uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(newArr, s1, i1) = Arr1DIdxRowM(fromArr, s1, i1);
  }
}

void CreateIdentity22(int64_t s1, int64_t s2, uint64_t *fromArr,
                      uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(newArr, s1, s2, i1, i2) =
          Arr2DIdxRowM(fromArr, s1, s2, i1, i2);
    }
  }
}

void CreateIdentity33(int64_t s1, int64_t s2, int64_t s3, uint64_t *fromArr,
                      uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(newArr, s1, s2, s3, i1, i2, i3) =
            Arr3DIdxRowM(fromArr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
}

void CreateIdentity44(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      uint64_t *fromArr, uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(newArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr4DIdxRowM(fromArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void CreateCopy2211(int64_t s1, int64_t s2, int64_t inps1, int64_t inps2,
                    uint64_t *inArr, int64_t perDimSize, int64_t *beginIdx,
                    int64_t *sizeIdx, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      Arr2DIdxRowM(outArr, s1, s2, i, j) =
          Arr2DIdxRowM(inArr, inps1, inps2,
                       (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)0) + i),
                       (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)1) + j));
    }
  }
}

void CreateCopy5511(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                    int64_t inps1, int64_t inps2, int64_t inps3, int64_t inps4,
                    int64_t inps5, uint64_t *inArr, int64_t perDimSize,
                    int64_t *beginIdx, int64_t *sizeIdx, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          for (uint64_t m = (int32_t)0; m < s5; m++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                Arr5DIdxRowM(
                    inArr, inps1, inps2, inps3, inps4, inps5,
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)0) + i),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)1) + j),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)2) + k),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)3) + l),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)4) + m));
          }
        }
      }
    }
  }
}

void Concat2T222(int64_t s1, int64_t s2, int64_t inp1s1, int64_t inp1s2,
                 uint64_t *inp1, int64_t inp2s1, int64_t inp2s2, uint64_t *inp2,
                 int64_t axis, uint64_t *outp) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      if ((axis == (int32_t)0)) {
        if ((i1 < inp1s1)) {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp1, inp1s1, inp1s2, i1, i2);
        } else {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp2, inp2s1, inp2s2, (i1 - inp1s1), i2);
        }
      } else {
        if ((i2 < inp1s2)) {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp1, inp1s1, inp1s2, i1, i2);
        } else {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp2, inp2s1, inp2s2, i1, (i2 - inp1s2));
        }
      }
    }
  }
}

void Concat2T444(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t inp1s1,
                 int64_t inp1s2, int64_t inp1s3, int64_t inp1s4, uint64_t *inp1,
                 int64_t inp2s1, int64_t inp2s2, int64_t inp2s3, int64_t inp2s4,
                 uint64_t *inp2, int64_t axis, uint64_t *outp) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          if ((axis == (int32_t)0)) {
            if ((i1 < inp1s1)) {
              Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) = Arr4DIdxRowM(
                  inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2, i3, i4);
            } else {
              Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                  Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4,
                               (i1 - inp1s1), i2, i3, i4);
            }
          } else {
            if ((axis == (int32_t)1)) {
              if ((i2 < inp1s2)) {
                Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                    Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                 i3, i4);
              } else {
                Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                    Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1,
                                 (i2 - inp1s2), i3, i4);
              }
            } else {
              if ((axis == (int32_t)2)) {
                if ((i3 < inp1s3)) {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                   i3, i4);
                } else {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1, i2,
                                   (i3 - inp1s3), i4);
                }
              } else {
                if ((i4 < inp1s4)) {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                   i3, i4);
                } else {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1, i2,
                                   i3, (i4 - inp1s4));
                }
              }
            }
          }
        }
      }
    }
  }
}

void Split44(int64_t O1, int64_t O2, int64_t O3, int64_t O4, int64_t I1,
             int64_t I2, int64_t I3, int64_t I4, uint64_t *inp, int64_t axis,
             int64_t curCount, int64_t total, uint64_t *out) {
  for (uint64_t o1 = (int32_t)0; o1 < O1; o1++) {
    for (uint64_t o2 = (int32_t)0; o2 < O2; o2++) {
      for (uint64_t o3 = (int32_t)0; o3 < O3; o3++) {
        for (uint64_t o4 = (int32_t)0; o4 < O4; o4++) {

          int64_t i1 = o1;

          int64_t i2 = o2;

          int64_t i3 = o3;

          int64_t i4 = o4;
          if ((axis == (int32_t)0)) {
            i1 = (((I1 / total) * curCount) + o1);
          }
          if ((axis == (int32_t)1)) {
            i2 = (((I2 / total) * curCount) + o2);
          }
          if ((axis == (int32_t)2)) {
            i3 = (((I3 / total) * curCount) + o3);
          }
          if ((axis == (int32_t)3)) {
            i4 = (((I4 / total) * curCount) + o4);
          }
          Arr4DIdxRowM(out, O1, O2, O3, O4, o1, o2, o3, o4) =
              Arr4DIdxRowM(inp, I1, I2, I3, I4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void Conv2DReshapeFilter(int64_t FH, int64_t FW, int64_t CI, int64_t CO,
                         uint64_t *inputArr, uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

          int64_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
          Arr2DIdxRowM(outputArr, CO, ((FH * FW) * CI), co, linIdx) =
              Arr4DIdxRowM(inputArr, FH, FW, CI, CO, fh, fw, ci, co);
        }
      }
    }
  }
}

void Conv2DReshapeMatMulOP(int64_t N, int64_t finalH, int64_t finalW,
                           int64_t CO, uint64_t *inputArr,
                           uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w, co) =
              Arr2DIdxRowM(inputArr, CO, ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void Conv2DReshapeInput(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                        int64_t FW, int64_t zPadHLeft, int64_t zPadHRight,
                        int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                        int64_t strideW, int64_t RRows, int64_t RCols,
                        uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

    int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

      int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = ((int32_t)0);
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= H)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                val = ((int32_t)0);
              } else {
                val = Arr4DIdxRowM(inputArr, N, H, W, CI, n, curPosH, curPosW,
                                   ci);
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CI) + (fw * CI)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + strideW);
      }

      leftTopCornerH = (leftTopCornerH + strideH);
    }
  }
}

void Conv2D(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH, int64_t FW,
            int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
            int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
            int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
            uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = ((FH * FW) * CI);

  int64_t reshapedIPRows = ((FH * FW) * CI);

  int64_t newH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t newW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = ((N * newH) * newW);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
  Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft,
                     zPadWRight, strideH, strideW, reshapedIPRows,
                     reshapedIPCols, inputArr, inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                     int64_t FW, int64_t CO, int64_t zPadHLeft,
                     int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                     int64_t strideH, int64_t strideW, int64_t outH,
                     int64_t outW, int64_t G, uint64_t *inputArr,
                     uint64_t *filterArr, uint64_t *outArr) {

  int64_t GIS = (CI / G);

  int64_t GOS = (CO / G);
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t cog = (int32_t)0; cog < GOS; cog++) {
      for (uint64_t cig = (int32_t)0; cig < GIS; cig++) {
        for (uint64_t g = (int32_t)0; g < G; g++) {
          for (uint64_t h = (int32_t)0; h < outH; h++) {
            for (uint64_t w = (int32_t)0; w < outW; w++) {

              uint64_t val = ((int32_t)0);

              int64_t ci = ((GIS * g) + cig);

              int64_t co = ((GOS * g) + cog);

              int64_t curPosH = ((strideH * h) - zPadHLeft);
              for (uint64_t fh = (int32_t)0; fh < FH; fh++) {

                int64_t curPosW = ((strideW * w) - zPadWLeft);
                for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
                  if (((((curPosH >= (int32_t)0) && (curPosW >= (int32_t)0)) &&
                        (curPosH < H)) &&
                       (curPosW < W))) {
                    val = SecretAdd(
                        val,
                        SecretMult(Arr4DIdxRowM(inputArr, N, H, W, CI, n,
                                                curPosH, curPosW, ci),
                                   Arr4DIdxRowM(filterArr, FH, FW, (CI / G), CO,
                                                fh, fw, (ci / G), co)));
                  }
                  curPosW = (curPosW + (int32_t)1);
                }
                curPosH = (curPosH + (int32_t)1);
              }
              Arr4DIdxRowM(outArr, N, outH, outW, CO, n, h, w, co) = SecretAdd(
                  Arr4DIdxRowM(outArr, N, outH, outW, CO, n, h, w, co), val);
            }
          }
        }
      }
    }
  }
}

void Conv2DLoop(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                int64_t FW, int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
                int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                int64_t strideW, int64_t G, uint64_t *inputArr,
                uint64_t *filterArr, uint64_t *outArr) {

  int64_t outH =
      ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) + (int32_t)1);
  Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft,
                  zPadWRight, strideH, strideW, outH, outW, G, inputArr,
                  filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int64_t FH, int64_t FW, int64_t CI, int64_t CO,
                              int64_t g, int64_t G, uint64_t *inputArr,
                              uint64_t *outputArr) {

  int64_t CIG = (CI / G);

  int64_t COG = (CO / G);

  int64_t startCO = (g * COG);
  for (uint64_t co = (int32_t)0; co < COG; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CIG; ci++) {

          int64_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
          Arr2DIdxRowM(outputArr, (CO / G), ((FH * FW) * (CI / G)), co,
                       linIdx) = Arr4DIdxRowM(inputArr, FH, FW, (CI / G), CO,
                                              fh, fw, ci, (co + startCO));
        }
      }
    }
  }
}

void Conv2DReshapeMatMulOPGroup(int64_t N, int64_t finalH, int64_t finalW,
                                int64_t CO, int64_t g, int64_t G,
                                uint64_t *inputArr, uint64_t *outputArr) {

  int64_t COG = (CO / G);

  int64_t startCO = (g * COG);
  for (uint64_t co = (int32_t)0; co < COG; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w,
                       (co + startCO)) =
              Arr2DIdxRowM(inputArr, (CO / G), ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void Conv2DReshapeInputGroup(int64_t N, int64_t H, int64_t W, int64_t CI,
                             int64_t FH, int64_t FW, int64_t zPadHLeft,
                             int64_t zPadHRight, int64_t zPadWLeft,
                             int64_t zPadWRight, int64_t strideH,
                             int64_t strideW, int64_t g, int64_t G,
                             int64_t RRows, int64_t RCols, uint64_t *inputArr,
                             uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;

  int64_t CIG = (CI / G);
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

    int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

      int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = ((int32_t)0);

            int64_t startCI = (g * CIG);
            for (uint64_t ci = (int32_t)0; ci < CIG; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= H)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                val = ((int32_t)0);
              } else {
                val = Arr4DIdxRowM(inputArr, N, H, W, CI, n, curPosH, curPosW,
                                   (ci + startCI));
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CIG) + (fw * CIG)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + strideW);
      }

      leftTopCornerH = (leftTopCornerH + strideH);
    }
  }
}

void Conv2DGroup(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                 int64_t FW, int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
                 int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                 int64_t strideW, int64_t G, uint64_t *inputArr,
                 uint64_t *filterArr, uint64_t *outArr) {

  int64_t CIG = (CI / G);

  int64_t reshapedFilterRows = (CO / G);

  int64_t reshapedFilterCols = ((FH * FW) * CIG);

  int64_t reshapedIPRows = ((FH * FW) * CIG);

  int64_t outH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = ((N * outH) * outW);
  for (uint64_t g = (int32_t)0; g < G; g++) {

    uint64_t *inputReshaped =
        make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

    uint64_t *matmulOP =
        make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);

    uint64_t *filterReshaped =
        make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);
    Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
    Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight,
                            zPadWLeft, zPadWRight, strideH, strideW, g, G,
                            reshapedIPRows, reshapedIPCols, inputArr,
                            inputReshaped);
    MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
             filterReshaped, inputReshaped, matmulOP, 1);
    Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
    ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
    ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
    ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  }
}

void Conv3DReshapeFilter(int64_t FD, int64_t FH, int64_t FW, int64_t CI,
                         int64_t CO, uint64_t *inputArr, uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
      for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
        for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
          for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

            int64_t linIdx =
                ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) +
                 ci);
            Arr2DIdxRowM(outputArr, CO, (((FD * FH) * FW) * CI), co, linIdx) =
                Arr5DIdxRowM(inputArr, FD, FH, FW, CI, CO, fd, fh, fw, ci, co);
          }
        }
      }
    }
  }
}

void Conv3DReshapeMatMulOP(int64_t N, int64_t finalD, int64_t finalH,
                           int64_t finalW, int64_t CO, uint64_t *inputArr,
                           uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t d = (int32_t)0; d < finalD; d++) {
        for (uint64_t h = (int32_t)0; h < finalH; h++) {
          for (uint64_t w = (int32_t)0; w < finalW; w++) {
            Arr5DIdxRowM(outputArr, N, finalD, finalH, finalW, CO, n, d, h, w,
                         co) =
                Arr2DIdxRowM(inputArr, CO, (((N * finalD) * finalH) * finalW),
                             co,
                             ((((((n * finalD) * finalH) * finalW) +
                                ((d * finalH) * finalW)) +
                               (h * finalW)) +
                              w));
          }
        }
      }
    }
  }
}

void Conv3DReshapeInput(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                        int64_t FD, int64_t FH, int64_t FW, int64_t zPadDLeft,
                        int64_t zPadDRight, int64_t zPadHLeft,
                        int64_t zPadHRight, int64_t zPadWLeft,
                        int64_t zPadWRight, int64_t strideD, int64_t strideH,
                        int64_t strideW, int64_t RRows, int64_t RCols,
                        uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerD = ((int32_t)0 - zPadDLeft);

    int64_t extremeRightBottomCornerD = ((D - (int32_t)1) + zPadDRight);
    while (
        (((leftTopCornerD + FD) - (int32_t)1) <= extremeRightBottomCornerD)) {

      int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

      int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
      while (
          (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

        int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

        int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
        while ((((leftTopCornerW + FW) - (int32_t)1) <=
                extremeRightBottomCornerW)) {
          for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
            for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
              for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

                int64_t curPosD = (leftTopCornerD + fd);

                int64_t curPosH = (leftTopCornerH + fh);

                int64_t curPosW = (leftTopCornerW + fw);

                uint64_t val = ((int32_t)0);
                for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
                  if (((((curPosD < (int32_t)0) || (curPosD >= D)) ||
                        ((curPosH < (int32_t)0) || (curPosH >= H))) ||
                       ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                    val = ((int32_t)0);
                  } else {
                    val = Arr5DIdxRowM(inputArr, N, D, H, W, CI, n, curPosD,
                                       curPosH, curPosW, ci);
                  }
                  Arr2DIdxRowM(outputArr, RRows, RCols,
                               ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) +
                                 (fw * CI)) +
                                ci),
                               linIdxFilterMult) = val;
                }
              }
            }
          }
          linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
          leftTopCornerW = (leftTopCornerW + strideW);
        }

        leftTopCornerH = (leftTopCornerH + strideH);
      }

      leftTopCornerD = (leftTopCornerD + strideD);
    }
  }
}

void Conv3D(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI, int64_t FD,
            int64_t FH, int64_t FW, int64_t CO, int64_t zPadDLeft,
            int64_t zPadDRight, int64_t zPadHLeft, int64_t zPadHRight,
            int64_t zPadWLeft, int64_t zPadWRight, int64_t strideD,
            int64_t strideH, int64_t strideW, uint64_t *inputArr,
            uint64_t *filterArr, uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = (((FD * FH) * FW) * CI);

  int64_t reshapedIPRows = (((FD * FH) * FW) * CI);

  int64_t newD =
      ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) + (int32_t)1);

  int64_t newH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t newW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = (((N * newD) * newH) * newW);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
  Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight,
                     zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD,
                     strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr,
                     inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                     int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                     int64_t zPadDLeft, int64_t zPadDRight, int64_t zPadHLeft,
                     int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                     int64_t strideD, int64_t strideH, int64_t strideW,
                     int64_t outD, int64_t outH, int64_t outW,
                     uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t co = (int32_t)0; co < CO; co++) {
      for (uint64_t d = (int32_t)0; d < outD; d++) {
        for (uint64_t h = (int32_t)0; h < outH; h++) {
          for (uint64_t w = (int32_t)0; w < outW; w++) {
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

              uint64_t val = ((int32_t)0);
              for (uint64_t fd = (d * strideD); fd < ((d * strideD) + FD);
                   fd++) {
                for (uint64_t fh = (h * strideH); fh < ((h * strideH) + FH);
                     fh++) {
                  for (uint64_t fw = (w * strideW); fw < ((w * strideW) + FW);
                       fw++) {

                    int64_t curPosD = (fd - zPadDLeft);

                    int64_t curPosH = (fh - zPadHLeft);

                    int64_t curPosW = (fw - zPadWLeft);
                    if (((((((curPosD >= (int32_t)0) &&
                             (curPosH >= (int32_t)0)) &&
                            (curPosW >= (int32_t)0)) &&
                           (curPosD < D)) &&
                          (curPosH < H)) &&
                         (curPosW < W))) {

                      int64_t curFilterPosD = (fd - (d * strideD));

                      int64_t curFilterPosH = (fh - (h * strideH));

                      int64_t curFilterPosW = (fw - (w * strideW));
                      val = SecretAdd(
                          val, SecretMult(
                                   Arr5DIdxRowM(inputArr, N, D, H, W, CI, n,
                                                curPosD, curPosH, curPosW, ci),
                                   Arr5DIdxRowM(filterArr, FD, FH, FW, CI, CO,
                                                curFilterPosD, curFilterPosH,
                                                curFilterPosW, ci, co)));
                    }
                  }
                }
              }
              Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d, h, w, co) =
                  SecretAdd(Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d,
                                         h, w, co),
                            val);
            }
          }
        }
      }
    }
  }
}

void Conv3DLoop(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                int64_t zPadDLeft, int64_t zPadDRight, int64_t zPadHLeft,
                int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                int64_t strideD, int64_t strideH, int64_t strideW,
                uint64_t *inputArr, uint64_t *filterArr, uint64_t *outArr) {

  int64_t outD =
      ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) + (int32_t)1);

  int64_t outH =
      ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) + (int32_t)1);
  Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight,
                  zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD,
                  strideH, strideW, outD, outH, outW, inputArr, filterArr,
                  outArr);
}

void ConvTranspose2DReshapeMatMulOP(int64_t N, int64_t finalH, int64_t finalW,
                                    int64_t CO, uint64_t *inputArr,
                                    uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w, co) =
              Arr2DIdxRowM(inputArr, CO, ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void ConvTranspose2DReshapeFilter(int64_t FH, int64_t FW, int64_t CO,
                                  int64_t CI, uint64_t *inputArr,
                                  uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

          int64_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
          Arr2DIdxRowM(outputArr, CO, ((FH * FW) * CI), co, linIdx) =
              Arr4DIdxRowM(inputArr, FH, FW, CO, CI, ((FH - (int32_t)1) - fh),
                           ((FW - (int32_t)1) - fw), co, ci);
        }
      }
    }
  }
}

void ConvTranspose2DReshapeInput(int64_t N, int64_t HPrime, int64_t WPrime,
                                 int64_t CI, int64_t FH, int64_t FW,
                                 int64_t zPadTrHLeft, int64_t zPadTrHRight,
                                 int64_t zPadTrWLeft, int64_t zPadTrWRight,
                                 int64_t strideH, int64_t strideW,
                                 int64_t RRows, int64_t RCols,
                                 uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadTrHLeft);

    int64_t HPrimeTilde =
        (HPrime + ((HPrime - (int32_t)1) * (strideH - (int32_t)1)));

    int64_t extremeRightBottomCornerH =
        ((HPrimeTilde - (int32_t)1) + zPadTrHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadTrWLeft);

      int64_t WPrimeTilde =
          (WPrime + ((WPrime - (int32_t)1) * (strideW - (int32_t)1)));

      int64_t extremeRightBottomCornerW =
          ((WPrimeTilde - (int32_t)1) + zPadTrWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = ((int32_t)0);
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= HPrimeTilde)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= WPrimeTilde)))) {
                val = ((int32_t)0);
              } else {
                if ((((curPosH % strideH) == (int32_t)0) &&
                     ((curPosW % strideW) == (int32_t)0))) {

                  int64_t idxInputH = (curPosH / strideH);

                  int64_t idxInputW = (curPosW / strideW);
                  val = Arr4DIdxRowM(inputArr, N, HPrime, WPrime, CI, n,
                                     idxInputH, idxInputW, ci);
                } else {
                  val = ((int32_t)0);
                }
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CI) + (fw * CI)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + (int32_t)1);
      }

      leftTopCornerH = (leftTopCornerH + (int32_t)1);
    }
  }
}

void ConvTranspose2D(int64_t N, int64_t HPrime, int64_t WPrime, int64_t CI,
                     int64_t FH, int64_t FW, int64_t CO, int64_t H, int64_t W,
                     int64_t zPadTrHLeft, int64_t zPadTrHRight,
                     int64_t zPadTrWLeft, int64_t zPadTrWRight, int64_t strideH,
                     int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = ((FH * FW) * CI);

  int64_t reshapedIPRows = ((FH * FW) * CI);

  int64_t reshapedIPCols = ((N * H) * W);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
  ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft,
                              zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH,
                              strideW, reshapedIPRows, reshapedIPCols, inputArr,
                              inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int64_t FD, int64_t FH, int64_t FW,
                                  int64_t CO, int64_t CI, uint64_t *inputArr,
                                  uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
      for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
        for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
          for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

            int64_t linIdx =
                ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) +
                 ci);
            Arr2DIdxRowM(outputArr, CO, (((FD * FH) * FW) * CI), co, linIdx) =
                Arr5DIdxRowM(inputArr, FD, FH, FW, CO, CI,
                             ((FD - (int32_t)1) - fd), ((FH - (int32_t)1) - fh),
                             ((FW - (int32_t)1) - fw), co, ci);
          }
        }
      }
    }
  }
}

void ConvTranspose3DReshapeInput(int64_t N, int64_t DPrime, int64_t HPrime,
                                 int64_t WPrime, int64_t CI, int64_t FD,
                                 int64_t FH, int64_t FW, int64_t zPadTrDLeft,
                                 int64_t zPadTrDRight, int64_t zPadTrHLeft,
                                 int64_t zPadTrHRight, int64_t zPadTrWLeft,
                                 int64_t zPadTrWRight, int64_t strideD,
                                 int64_t strideH, int64_t strideW,
                                 int64_t RRows, int64_t RCols,
                                 uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerD = ((int32_t)0 - zPadTrDLeft);

    int64_t DPrimeTilde =
        (DPrime + ((DPrime - (int32_t)1) * (strideD - (int32_t)1)));

    int64_t extremeRightBottomCornerD =
        ((DPrimeTilde - (int32_t)1) + zPadTrDRight);
    while (
        (((leftTopCornerD + FD) - (int32_t)1) <= extremeRightBottomCornerD)) {

      int64_t leftTopCornerH = ((int32_t)0 - zPadTrHLeft);

      int64_t HPrimeTilde =
          (HPrime + ((HPrime - (int32_t)1) * (strideH - (int32_t)1)));

      int64_t extremeRightBottomCornerH =
          ((HPrimeTilde - (int32_t)1) + zPadTrHRight);
      while (
          (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

        int64_t leftTopCornerW = ((int32_t)0 - zPadTrWLeft);

        int64_t WPrimeTilde =
            (WPrime + ((WPrime - (int32_t)1) * (strideW - (int32_t)1)));

        int64_t extremeRightBottomCornerW =
            ((WPrimeTilde - (int32_t)1) + zPadTrWRight);
        while ((((leftTopCornerW + FW) - (int32_t)1) <=
                extremeRightBottomCornerW)) {
          for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
            for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
              for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

                int64_t curPosD = (leftTopCornerD + fd);

                int64_t curPosH = (leftTopCornerH + fh);

                int64_t curPosW = (leftTopCornerW + fw);

                uint64_t val = ((int32_t)0);
                for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
                  if (((((curPosD < (int32_t)0) || (curPosD >= DPrimeTilde)) ||
                        ((curPosH < (int32_t)0) || (curPosH >= HPrimeTilde))) ||
                       ((curPosW < (int32_t)0) || (curPosW >= WPrimeTilde)))) {
                    val = ((int32_t)0);
                  } else {
                    if (((((curPosD % strideD) == (int32_t)0) &&
                          ((curPosH % strideH) == (int32_t)0)) &&
                         ((curPosW % strideW) == (int32_t)0))) {

                      int64_t idxInputD = (curPosD / strideD);

                      int64_t idxInputH = (curPosH / strideH);

                      int64_t idxInputW = (curPosW / strideW);
                      val =
                          Arr5DIdxRowM(inputArr, N, DPrime, HPrime, WPrime, CI,
                                       n, idxInputD, idxInputH, idxInputW, ci);
                    } else {
                      val = ((int32_t)0);
                    }
                  }
                  Arr2DIdxRowM(outputArr, RRows, RCols,
                               ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) +
                                 (fw * CI)) +
                                ci),
                               linIdxFilterMult) = val;
                }
              }
            }
          }
          linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
          leftTopCornerW = (leftTopCornerW + (int32_t)1);
        }

        leftTopCornerH = (leftTopCornerH + (int32_t)1);
      }

      leftTopCornerD = (leftTopCornerD + (int32_t)1);
    }
  }
}

void ConvTranspose3D(int64_t N, int64_t DPrime, int64_t HPrime, int64_t WPrime,
                     int64_t CI, int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                     int64_t D, int64_t H, int64_t W, int64_t zPadTrDLeft,
                     int64_t zPadTrDRight, int64_t zPadTrHLeft,
                     int64_t zPadTrHRight, int64_t zPadTrWLeft,
                     int64_t zPadTrWRight, int64_t strideD, int64_t strideH,
                     int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = (((FD * FH) * FW) * CI);

  int64_t reshapedIPRows = (((FD * FH) * FW) * CI);

  int64_t reshapedIPCols = (((N * D) * H) * W);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
  ConvTranspose3DReshapeInput(
      N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight,
      zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH,
      strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int64_t N, int64_t D, int64_t H, int64_t W,
                              int64_t CI, int64_t FD, int64_t FH, int64_t FW,
                              int64_t CO, int64_t zPadDLeft, int64_t zPadDRight,
                              int64_t zPadHLeft, int64_t zPadHRight,
                              int64_t zPadWLeft, int64_t zPadWRight,
                              int64_t strideD, int64_t strideH, int64_t strideW,
                              int64_t outD, int64_t outH, int64_t outW,
                              uint64_t *inputArr, uint64_t *filterArr,
                              uint64_t *outArr) {
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t co = (int32_t)0; co < CO; co++) {
      for (uint64_t d = (int32_t)0; d < outD; d++) {
        for (uint64_t h = (int32_t)0; h < outH; h++) {
          for (uint64_t w = (int32_t)0; w < outW; w++) {
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

              uint64_t val = ((int32_t)0);
              for (uint64_t fd = d; fd < (d + FD); fd++) {
                for (uint64_t fh = h; fh < (h + FH); fh++) {
                  for (uint64_t fw = w; fw < (w + FW); fw++) {

                    int64_t curPosD = ((fd - zPadDLeft) / strideD);

                    int64_t curPosH = ((fh - zPadHLeft) / strideD);

                    int64_t curPosW = ((fw - zPadWLeft) / strideD);
                    if ((((((((((curPosD >= (int32_t)0) &&
                                (curPosH >= (int32_t)0)) &&
                               (curPosW >= (int32_t)0)) &&
                              (curPosD < D)) &&
                             (curPosH < H)) &&
                            (curPosW < W)) &&
                           (((fd - zPadDLeft) % strideD) == (int32_t)0)) &&
                          (((fh - zPadHLeft) % strideH) == (int32_t)0)) &&
                         (((fw - zPadWLeft) % strideW) == (int32_t)0))) {

                      int64_t curFilterPosD = (((FD + d) - fd) - (int32_t)1);

                      int64_t curFilterPosH = (((FH + h) - fh) - (int32_t)1);

                      int64_t curFilterPosW = (((FW + w) - fw) - (int32_t)1);
                      val = SecretAdd(
                          val, SecretMult(
                                   Arr5DIdxRowM(inputArr, N, D, H, W, CI, n,
                                                curPosD, curPosH, curPosW, ci),
                                   Arr5DIdxRowM(filterArr, FD, FH, FW, CO, CI,
                                                curFilterPosD, curFilterPosH,
                                                curFilterPosW, co, ci)));
                    }
                  }
                }
              }
              Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d, h, w, co) =
                  SecretAdd(Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d,
                                         h, w, co),
                            val);
            }
          }
        }
      }
    }
  }
}

void ConvTranspose3DLoop(int64_t N, int64_t DPrime, int64_t HPrime,
                         int64_t WPrime, int64_t CI, int64_t FD, int64_t FH,
                         int64_t FW, int64_t CO, int64_t D, int64_t H,
                         int64_t W, int64_t zPadTrDLeft, int64_t zPadTrDRight,
                         int64_t zPadTrHLeft, int64_t zPadTrHRight,
                         int64_t zPadTrWLeft, int64_t zPadTrWRight,
                         int64_t strideD, int64_t strideH, int64_t strideW,
                         uint64_t *inputArr, uint64_t *filterArr,
                         uint64_t *outArr) {
  ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO,
                           zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight,
                           zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW,
                           D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      Arr2DIdxRowM(outArr, s1, s2, i, j) = Arr2DIdxRowM(inArr, s2, s1, j, i);
    }
  }
}

void Pad442(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t inps1,
            int64_t inps2, int64_t inps3, int64_t inps4, uint64_t *inpArr,
            int64_t pads1, int64_t pads2, int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)0);

  int64_t rbounds1excl =
      (s1 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)1));

  int64_t lbounds2 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)0);

  int64_t rbounds2excl =
      (s2 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)1));

  int64_t lbounds3 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)0);

  int64_t rbounds3excl =
      (s3 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)1));

  int64_t lbounds4 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)0);

  int64_t rbounds4excl =
      (s4 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)1));
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          if (((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                    (j >= lbounds2)) &&
                   (j < rbounds2excl)) &&
                  (k >= lbounds3)) &&
                 (k < rbounds3excl)) &&
                (l >= lbounds4)) &&
               (l < rbounds4excl))) {
            Arr4DIdxRowM(outArr, s1, s2, s3, s4, i, j, k, l) =
                Arr4DIdxRowM(inpArr, inps1, inps2, inps3, inps4,
                             (i - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)0, (int32_t)0)),
                             (j - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)1, (int32_t)0)),
                             (k - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)2, (int32_t)0)),
                             (l - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)3, (int32_t)0)));
          } else {
            Arr4DIdxRowM(outArr, s1, s2, s3, s4, i, j, k, l) = ((int32_t)0);
          }
        }
      }
    }
  }
}

void Pad552(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
            int64_t inps1, int64_t inps2, int64_t inps3, int64_t inps4,
            int64_t inps5, uint64_t *inpArr, int64_t pads1, int64_t pads2,
            int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)0);

  int64_t rbounds1excl =
      (s1 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)1));

  int64_t lbounds2 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)0);

  int64_t rbounds2excl =
      (s2 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)1));

  int64_t lbounds3 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)0);

  int64_t rbounds3excl =
      (s3 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)1));

  int64_t lbounds4 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)0);

  int64_t rbounds4excl =
      (s4 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)1));

  int64_t lbounds5 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)4, (int32_t)0);

  int64_t rbounds5excl =
      (s5 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)4, (int32_t)1));
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          for (uint64_t m = (int32_t)0; m < s5; m++) {
            if (((((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                        (j >= lbounds2)) &&
                       (j < rbounds2excl)) &&
                      (k >= lbounds3)) &&
                     (k < rbounds3excl)) &&
                    (l >= lbounds4)) &&
                   (l < rbounds4excl)) &&
                  (m >= lbounds5)) &&
                 (m < rbounds5excl))) {
              Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                  Arr5DIdxRowM(inpArr, inps1, inps2, inps3, inps4, inps5,
                               (i - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)0, (int32_t)0)),
                               (j - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)1, (int32_t)0)),
                               (k - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)2, (int32_t)0)),
                               (l - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)3, (int32_t)0)),
                               (m - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)4, (int32_t)0)));
            } else {
              Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                  ((int32_t)0);
            }
          }
        }
      }
    }
  }
}

void PadONNX441(int64_t o1, int64_t o2, int64_t o3, int64_t o4, int64_t i1,
                int64_t i2, int64_t i3, int64_t i4, uint64_t *inpArr,
                int64_t pads, int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 = Arr1DIdxRowM(paddings, pads, (int32_t)0);

  int64_t rbounds1excl = (o1 - Arr1DIdxRowM(paddings, pads, (int32_t)4));

  int64_t lbounds2 = Arr1DIdxRowM(paddings, pads, (int32_t)1);

  int64_t rbounds2excl = (o2 - Arr1DIdxRowM(paddings, pads, (int32_t)5));

  int64_t lbounds3 = Arr1DIdxRowM(paddings, pads, (int32_t)2);

  int64_t rbounds3excl = (o3 - Arr1DIdxRowM(paddings, pads, (int32_t)6));

  int64_t lbounds4 = Arr1DIdxRowM(paddings, pads, (int32_t)3);

  int64_t rbounds4excl = (o4 - Arr1DIdxRowM(paddings, pads, (int32_t)7));
  for (uint64_t i = (int32_t)0; i < o1; i++) {
    for (uint64_t j = (int32_t)0; j < o2; j++) {
      for (uint64_t k = (int32_t)0; k < o3; k++) {
        for (uint64_t l = (int32_t)0; l < o4; l++) {
          if (((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                    (j >= lbounds2)) &&
                   (j < rbounds2excl)) &&
                  (k >= lbounds3)) &&
                 (k < rbounds3excl)) &&
                (l >= lbounds4)) &&
               (l < rbounds4excl))) {
            Arr4DIdxRowM(outArr, o1, o2, o3, o4, i, j, k, l) =
                Arr4DIdxRowM(inpArr, i1, i2, i3, i4,
                             (i - Arr1DIdxRowM(paddings, pads, (int32_t)0)),
                             (j - Arr1DIdxRowM(paddings, pads, (int32_t)1)),
                             (k - Arr1DIdxRowM(paddings, pads, (int32_t)2)),
                             (l - Arr1DIdxRowM(paddings, pads, (int32_t)3)));
          } else {
            Arr4DIdxRowM(outArr, o1, o2, o3, o4, i, j, k, l) = ((int32_t)0);
          }
        }
      }
    }
  }
}

void Squeeze24(int64_t s1, int64_t s2, int64_t dim1, int64_t dim2, int64_t ins1,
               int64_t ins2, int64_t ins3, int64_t ins4, uint64_t *inArr,
               uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < ins1; i++) {
    for (uint64_t j = (int32_t)0; j < ins2; j++) {
      for (uint64_t k = (int32_t)0; k < ins3; k++) {
        for (uint64_t l = (int32_t)0; l < ins4; l++) {

          int64_t linIdx =
              ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) +
                (k * ins4)) +
               l);

          int64_t outIdx1 = (linIdx / s2);

          int64_t outIdx2 = (linIdx % s2);
          Arr2DIdxRowM(outArr, s1, s2, outIdx1, outIdx2) =
              Arr4DIdxRowM(inArr, ins1, ins2, ins3, ins4, i, j, k, l);
        }
      }
    }
  }
}

void FusedBatchNorm4411(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                        uint64_t *inArr, uint64_t *multArr, uint64_t *biasArr,
                        int64_t multExprScaleDownSf, int64_t biasExprScaleUpSf,
                        uint64_t *outputArr) {

  int64_t inpSize = (((s1 * s2) * s3) * s4);

  uint64_t *inArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multExprAns = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(inArrReshaped, inpSize, linIdx) =
              Arr4DIdxRowM(inArr, s1, s2, s3, s4, i1, i2, i3, i4);
          Arr1DIdxRowM(multArrReshaped, inpSize, linIdx) =
              Arr1DIdxRowM(multArr, s4, i4);
        }
      }
    }
  }
  ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped,
                             multExprAns);
  if ((multExprScaleDownSf > (int32_t)0)) {
    ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
  }

  uint64_t *biasArrScaledUp = make_array<uint64_t>(s4);
  for (uint64_t ii = (int32_t)0; ii < s4; ii++) {
    Arr1DIdxRowM(biasArrScaledUp, s4, ii) = Arr1DIdxRowM(biasArr, s4, ii);
  }
  if ((biasExprScaleUpSf > (int32_t)0)) {
    ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
  }
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outputArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr1DIdxRowM(multExprAns, inpSize, linIdx),
                        Arr1DIdxRowM(biasArrScaledUp, s4, i4));
        }
      }
    }
  }
  ClearMemSecret1(inpSize, inArrReshaped);
  ClearMemSecret1(inpSize, multArrReshaped);
  ClearMemSecret1(inpSize, multExprAns);
  ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                        int64_t s5, uint64_t *inArr, uint64_t *multArr,
                        uint64_t *biasArr, int64_t multExprScaleDownSf,
                        int64_t biasExprScaleUpSf, uint64_t *outputArr) {

  int64_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *inArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multExprAns = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(inArrReshaped, inpSize, linIdx) =
                Arr5DIdxRowM(inArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
            Arr1DIdxRowM(multArrReshaped, inpSize, linIdx) =
                Arr1DIdxRowM(multArr, s5, i5);
          }
        }
      }
    }
  }
  ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped,
                             multExprAns);
  if ((multExprScaleDownSf > (int32_t)0)) {
    ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
  }

  uint64_t *biasArrScaledUp = make_array<uint64_t>(s5);
  for (uint64_t ii = (int32_t)0; ii < s5; ii++) {
    Arr1DIdxRowM(biasArrScaledUp, s5, ii) = Arr1DIdxRowM(biasArr, s5, ii);
  }
  if ((biasExprScaleUpSf > (int32_t)0)) {
    ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
  }
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outputArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(Arr1DIdxRowM(multExprAns, inpSize, linIdx),
                          Arr1DIdxRowM(biasArrScaledUp, s5, i5));
          }
        }
      }
    }
  }
  ClearMemSecret1(inpSize, inArrReshaped);
  ClearMemSecret1(inpSize, multArrReshaped);
  ClearMemSecret1(inpSize, multExprAns);
  ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int64_t s1, int64_t s2, uint64_t *arr1, uint64_t *arr2,
                  uint64_t *outArr) {

  int64_t inpSize = (s1 * s2);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
          Arr2DIdxRowM(arr1, s1, s2, i1, i2);
      Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
          Arr2DIdxRowM(arr2, s1, s2, i1, i2);
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                  uint64_t *arr1, uint64_t *arr2, uint64_t *outArr) {

  int64_t inpSize = (((s1 * s2) * s3) * s4);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
              Arr4DIdxRowM(arr1, s1, s2, s3, s4, i1, i2, i3, i4);
          Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
              Arr4DIdxRowM(arr2, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                  uint64_t *arr1, uint64_t *arr2, uint64_t *outArr) {

  int64_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
                Arr5DIdxRowM(arr1, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
            Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
                Arr5DIdxRowM(arr2, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
          }
        }
      }
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
          }
        }
      }
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int64_t outS1, int64_t outS2, int64_t inS1, int64_t inS2,
                  int64_t inS3, int64_t inS4, uint64_t *inputArr, int64_t *axes,
                  uint64_t *outputArr) {

  int64_t divisor = (inS2 * inS3);

  int64_t outputSize = (outS1 * outS2);

  uint64_t *sumArr = make_array<uint64_t>(outputSize);

  uint64_t *outputArrReshaped = make_array<uint64_t>(outputSize);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {

      uint64_t summ = ((int32_t)0);
      for (uint64_t i = (int32_t)0; i < inS2; i++) {
        for (uint64_t j = (int32_t)0; j < inS3; j++) {
          summ = SecretAdd(summ, Arr4DIdxRowM(inputArr, inS1, inS2, inS3, inS4,
                                              i1, i, j, i2));
        }
      }
      Arr1DIdxRowM(sumArr, outputSize, ((i1 * outS2) + i2)) = summ;
    }
  }
  ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {
      Arr2DIdxRowM(outputArr, outS1, outS2, i1, i2) =
          Arr1DIdxRowM(outputArrReshaped, outputSize, ((i1 * outS2) + i2));
    }
  }
  ClearMemSecret1(outputSize, sumArr);
  ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int64_t outS1, int64_t outS2, int64_t inS1, int64_t inS2,
                      int64_t inS3, int64_t inS4, uint64_t *inputArr,
                      int64_t axis1, int64_t axis2, uint64_t *outputArr) {

  int64_t divisor = (inS3 * inS4);

  int64_t outputSize = (outS1 * outS2);

  uint64_t *sumArr = make_array<uint64_t>(outputSize);

  uint64_t *outputArrReshaped = make_array<uint64_t>(outputSize);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {

      uint64_t summ = ((int32_t)0);
      for (uint64_t i = (int32_t)0; i < inS3; i++) {
        for (uint64_t j = (int32_t)0; j < inS4; j++) {
          summ = SecretAdd(summ, Arr4DIdxRowM(inputArr, inS1, inS2, inS3, inS4,
                                              i1, i2, i, j));
        }
      }
      Arr1DIdxRowM(sumArr, outputSize, ((i1 * outS2) + i2)) = summ;
    }
  }
  ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {
      Arr2DIdxRowM(outputArr, outS1, outS2, i1, i2) =
          Arr1DIdxRowM(outputArrReshaped, outputSize, ((i1 * outS2) + i2));
    }
  }
  ClearMemSecret1(outputSize, sumArr);
  ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int64_t outArrS1, int64_t inArrS1, int64_t inArrS2,
             uint64_t *inArr, int64_t dim, uint64_t *outArr) {
  ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int64_t outs1, int64_t outs2, int64_t outs3, int64_t ins1,
             int64_t ins2, int64_t ins3, int64_t ins4, uint64_t *inArr,
             int64_t dim, uint64_t *outArr) {

  int64_t size = ((ins1 * ins2) * ins3);

  uint64_t *reshapedInArr = make_array<uint64_t>(size, ins4);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < ins1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < ins2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < ins3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < ins4; i4++) {

          int64_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
          Arr2DIdxRowM(reshapedInArr, size, ins4, linIdx, i4) =
              Arr4DIdxRowM(inArr, ins1, ins2, ins3, ins4, i1, i2, i3, i4);
        }
      }
    }
  }
  ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
  for (uint64_t i1 = (int32_t)0; i1 < ins1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < ins2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < ins3; i3++) {

        int64_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
        Arr3DIdxRowM(outArr, outs1, outs2, outs3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedOutArr, size, linIdx);
      }
    }
  }
  ClearMemSecret2(size, ins4, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr,
           int64_t sf, uint64_t doTruncation) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedInArr, size, linIdx) =
          Arr2DIdxRowM(inArr, s1, s2, i1, i2);
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedOutArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *inArr,
           uint64_t *outArr, int64_t sf, uint64_t doTruncation) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedInArr, size, linIdx) =
              Arr4DIdxRowM(inArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedOutArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
           uint64_t *inArr, uint64_t *outArr, int64_t sf,
           uint64_t doTruncation) {

  int64_t size = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(reshapedInArr, size, linIdx) =
                Arr5DIdxRowM(inArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
          }
        }
      }
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                Arr1DIdxRowM(reshapedOutArr, size, linIdx);
          }
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr,
            int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedInArr, size, linIdx) =
          Arr2DIdxRowM(inArr, s1, s2, i1, i2);
    }
  }
  Floor(size, reshapedInArr, reshapedOutArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedOutArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int64_t s1, uint64_t *arr, int64_t sf) { ScaleUp(s1, arr, sf); }

void ScaleUp2(int64_t s1, int64_t s2, uint64_t *arr, int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedArr, size, linIdx) =
          Arr2DIdxRowM(arr, s1, s2, i1, i2);
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(arr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int64_t s1, int64_t s2, int64_t s3, uint64_t *arr, int64_t sf) {

  int64_t size = ((s1 * s2) * s3);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr1DIdxRowM(reshapedArr, size, linIdx) =
            Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedArr, size, linIdx);
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *arr,
              int64_t sf) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedArr, size, linIdx) =
              Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int64_t s1, uint64_t *arr, int64_t sf) {
  ScaleDown(s1, arr, sf);
}

void ScaleDown2(int64_t s1, int64_t s2, uint64_t *arr, int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedArr, size, linIdx) =
          Arr2DIdxRowM(arr, s1, s2, i1, i2);
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(arr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int64_t s1, int64_t s2, int64_t s3, uint64_t *arr, int64_t sf) {

  int64_t size = ((s1 * s2) * s3);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr1DIdxRowM(reshapedArr, size, linIdx) =
            Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedArr, size, linIdx);
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *arr,
                int64_t sf) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedArr, size, linIdx) =
              Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

int main(int argc, char **argv) {
  ArgMapping amap;

  amap.arg("r", party, "Role of party: ALICE/SERVER = 1; BOB/CLIENT = 2");
  amap.arg("port", port, "Port Number");
  amap.arg("ip", address, "IP Address of server (ALICE)");
  amap.arg("nt", num_threads, "Number of Threads");
  amap.arg("ell", bitlength, "Uniform Bitwidth");
  amap.parse(argc, argv);

  assert(party == SERVER || party == CLIENT);

  uint64_t *tmp0 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)3);
  /* Variable to read the clear value corresponding to the input variable tmp0
   * at (497,1-497,45) */
  uint32_t __tmp_in_tmp0;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)1; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)32; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)3; i3++) {
          if ((party == CLIENT)) {
            cin >> __tmp_in_tmp0;
          }
          Arr4DIdxRowM(tmp0, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)3,
                       i0, i1, i2, i3) = (party == CLIENT) ? __tmp_in_tmp0 : 0;
        }
      }
    }
  }

  uint64_t *tmp1 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)3, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp1
   * at (500,1-500,44) */
  uint32_t __tmp_in_tmp1;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)3; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp1;
          }
          Arr4DIdxRowM(tmp1, (int32_t)3, (int32_t)3, (int32_t)3, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp1 : 0;
        }
      }
    }
  }

  uint64_t *tmp2 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp2
   * at (503,1-503,35) */
  uint32_t __tmp_in_tmp2;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp2;
    }
    Arr1DIdxRowM(tmp2, (int32_t)16, i0) = (party == SERVER) ? __tmp_in_tmp2 : 0;
  }

  uint64_t *tmp3 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp3
   * at (506,1-506,35) */
  uint32_t __tmp_in_tmp3;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp3;
    }
    Arr1DIdxRowM(tmp3, (int32_t)16, i0) = (party == SERVER) ? __tmp_in_tmp3 : 0;
  }

  uint64_t *tmp4 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp4
   * at (509,1-509,35) */
  uint32_t __tmp_in_tmp4;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp4;
    }
    Arr1DIdxRowM(tmp4, (int32_t)16, i0) = (party == SERVER) ? __tmp_in_tmp4 : 0;
  }

  uint64_t *tmp5 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp5
   * at (512,1-512,35) */
  uint32_t __tmp_in_tmp5;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp5;
    }
    Arr1DIdxRowM(tmp5, (int32_t)16, i0) = (party == SERVER) ? __tmp_in_tmp5 : 0;
  }

  uint64_t *tmp6 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp6
   * at (515,1-515,35) */
  uint32_t __tmp_in_tmp6;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp6;
    }
    Arr1DIdxRowM(tmp6, (int32_t)16, i0) = (party == SERVER) ? __tmp_in_tmp6 : 0;
  }

  uint64_t *tmp7 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp7
   * at (518,1-518,45) */
  uint32_t __tmp_in_tmp7;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp7;
          }
          Arr4DIdxRowM(tmp7, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp7 : 0;
        }
      }
    }
  }

  uint64_t *tmp8 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp8
   * at (521,1-521,35) */
  uint32_t __tmp_in_tmp8;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp8;
    }
    Arr1DIdxRowM(tmp8, (int32_t)16, i0) = (party == SERVER) ? __tmp_in_tmp8 : 0;
  }

  uint64_t *tmp9 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp9
   * at (524,1-524,35) */
  uint32_t __tmp_in_tmp9;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp9;
    }
    Arr1DIdxRowM(tmp9, (int32_t)16, i0) = (party == SERVER) ? __tmp_in_tmp9 : 0;
  }

  uint64_t *tmp10 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp10
   * at (527,1-527,36) */
  uint32_t __tmp_in_tmp10;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp10;
    }
    Arr1DIdxRowM(tmp10, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp10 : 0;
  }

  uint64_t *tmp11 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp11
   * at (530,1-530,36) */
  uint32_t __tmp_in_tmp11;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp11;
    }
    Arr1DIdxRowM(tmp11, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp11 : 0;
  }

  uint64_t *tmp12 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp12
   * at (533,1-533,36) */
  uint32_t __tmp_in_tmp12;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp12;
    }
    Arr1DIdxRowM(tmp12, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp12 : 0;
  }

  uint64_t *tmp13 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp13
   * at (536,1-536,46) */
  uint32_t __tmp_in_tmp13;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp13;
          }
          Arr4DIdxRowM(tmp13, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp13 : 0;
        }
      }
    }
  }

  uint64_t *tmp14 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp14
   * at (539,1-539,36) */
  uint32_t __tmp_in_tmp14;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp14;
    }
    Arr1DIdxRowM(tmp14, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp14 : 0;
  }

  uint64_t *tmp15 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp15
   * at (542,1-542,36) */
  uint32_t __tmp_in_tmp15;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp15;
    }
    Arr1DIdxRowM(tmp15, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp15 : 0;
  }

  uint64_t *tmp16 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp16
   * at (545,1-545,36) */
  uint32_t __tmp_in_tmp16;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp16;
    }
    Arr1DIdxRowM(tmp16, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp16 : 0;
  }

  uint64_t *tmp17 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp17
   * at (548,1-548,36) */
  uint32_t __tmp_in_tmp17;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp17;
    }
    Arr1DIdxRowM(tmp17, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp17 : 0;
  }

  uint64_t *tmp18 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp18
   * at (551,1-551,36) */
  uint32_t __tmp_in_tmp18;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp18;
    }
    Arr1DIdxRowM(tmp18, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp18 : 0;
  }

  uint64_t *tmp19 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp19
   * at (554,1-554,46) */
  uint32_t __tmp_in_tmp19;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)1; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)1; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp19;
          }
          Arr4DIdxRowM(tmp19, (int32_t)1, (int32_t)1, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp19 : 0;
        }
      }
    }
  }

  uint64_t *tmp20 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp20
   * at (557,1-557,36) */
  uint32_t __tmp_in_tmp20;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp20;
    }
    Arr1DIdxRowM(tmp20, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp20 : 0;
  }

  uint64_t *tmp21 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp21
   * at (560,1-560,36) */
  uint32_t __tmp_in_tmp21;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp21;
    }
    Arr1DIdxRowM(tmp21, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp21 : 0;
  }

  uint64_t *tmp22 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp22
   * at (563,1-563,36) */
  uint32_t __tmp_in_tmp22;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp22;
    }
    Arr1DIdxRowM(tmp22, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp22 : 0;
  }

  uint64_t *tmp23 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp23
   * at (566,1-566,36) */
  uint32_t __tmp_in_tmp23;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp23;
    }
    Arr1DIdxRowM(tmp23, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp23 : 0;
  }

  uint64_t *tmp24 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp24
   * at (569,1-569,36) */
  uint32_t __tmp_in_tmp24;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp24;
    }
    Arr1DIdxRowM(tmp24, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp24 : 0;
  }

  uint64_t *tmp25 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp25
   * at (572,1-572,46) */
  uint32_t __tmp_in_tmp25;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp25;
          }
          Arr4DIdxRowM(tmp25, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp25 : 0;
        }
      }
    }
  }

  uint64_t *tmp26 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp26
   * at (575,1-575,36) */
  uint32_t __tmp_in_tmp26;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp26;
    }
    Arr1DIdxRowM(tmp26, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp26 : 0;
  }

  uint64_t *tmp27 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp27
   * at (578,1-578,36) */
  uint32_t __tmp_in_tmp27;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp27;
    }
    Arr1DIdxRowM(tmp27, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp27 : 0;
  }

  uint64_t *tmp28 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp28
   * at (581,1-581,36) */
  uint32_t __tmp_in_tmp28;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp28;
    }
    Arr1DIdxRowM(tmp28, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp28 : 0;
  }

  uint64_t *tmp29 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp29
   * at (584,1-584,36) */
  uint32_t __tmp_in_tmp29;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp29;
    }
    Arr1DIdxRowM(tmp29, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp29 : 0;
  }

  uint64_t *tmp30 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp30
   * at (587,1-587,36) */
  uint32_t __tmp_in_tmp30;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp30;
    }
    Arr1DIdxRowM(tmp30, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp30 : 0;
  }

  uint64_t *tmp31 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp31
   * at (590,1-590,46) */
  uint32_t __tmp_in_tmp31;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp31;
          }
          Arr4DIdxRowM(tmp31, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp31 : 0;
        }
      }
    }
  }

  uint64_t *tmp32 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp32
   * at (593,1-593,36) */
  uint32_t __tmp_in_tmp32;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp32;
    }
    Arr1DIdxRowM(tmp32, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp32 : 0;
  }

  uint64_t *tmp33 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp33
   * at (596,1-596,36) */
  uint32_t __tmp_in_tmp33;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp33;
    }
    Arr1DIdxRowM(tmp33, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp33 : 0;
  }

  uint64_t *tmp34 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp34
   * at (599,1-599,36) */
  uint32_t __tmp_in_tmp34;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp34;
    }
    Arr1DIdxRowM(tmp34, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp34 : 0;
  }

  uint64_t *tmp35 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp35
   * at (602,1-602,36) */
  uint32_t __tmp_in_tmp35;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp35;
    }
    Arr1DIdxRowM(tmp35, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp35 : 0;
  }

  uint64_t *tmp36 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp36
   * at (605,1-605,36) */
  uint32_t __tmp_in_tmp36;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp36;
    }
    Arr1DIdxRowM(tmp36, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp36 : 0;
  }

  uint64_t *tmp37 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp37
   * at (608,1-608,46) */
  uint32_t __tmp_in_tmp37;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp37;
          }
          Arr4DIdxRowM(tmp37, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp37 : 0;
        }
      }
    }
  }

  uint64_t *tmp38 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp38
   * at (611,1-611,36) */
  uint32_t __tmp_in_tmp38;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp38;
    }
    Arr1DIdxRowM(tmp38, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp38 : 0;
  }

  uint64_t *tmp39 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp39
   * at (614,1-614,36) */
  uint32_t __tmp_in_tmp39;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp39;
    }
    Arr1DIdxRowM(tmp39, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp39 : 0;
  }

  uint64_t *tmp40 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp40
   * at (617,1-617,36) */
  uint32_t __tmp_in_tmp40;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp40;
    }
    Arr1DIdxRowM(tmp40, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp40 : 0;
  }

  uint64_t *tmp41 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp41
   * at (620,1-620,36) */
  uint32_t __tmp_in_tmp41;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp41;
    }
    Arr1DIdxRowM(tmp41, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp41 : 0;
  }

  uint64_t *tmp42 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp42
   * at (623,1-623,36) */
  uint32_t __tmp_in_tmp42;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp42;
    }
    Arr1DIdxRowM(tmp42, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp42 : 0;
  }

  uint64_t *tmp43 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp43
   * at (626,1-626,46) */
  uint32_t __tmp_in_tmp43;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp43;
          }
          Arr4DIdxRowM(tmp43, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp43 : 0;
        }
      }
    }
  }

  uint64_t *tmp44 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp44
   * at (629,1-629,36) */
  uint32_t __tmp_in_tmp44;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp44;
    }
    Arr1DIdxRowM(tmp44, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp44 : 0;
  }

  uint64_t *tmp45 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp45
   * at (632,1-632,36) */
  uint32_t __tmp_in_tmp45;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp45;
    }
    Arr1DIdxRowM(tmp45, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp45 : 0;
  }

  uint64_t *tmp46 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp46
   * at (635,1-635,36) */
  uint32_t __tmp_in_tmp46;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp46;
    }
    Arr1DIdxRowM(tmp46, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp46 : 0;
  }

  uint64_t *tmp47 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp47
   * at (638,1-638,36) */
  uint32_t __tmp_in_tmp47;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp47;
    }
    Arr1DIdxRowM(tmp47, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp47 : 0;
  }

  uint64_t *tmp48 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp48
   * at (641,1-641,36) */
  uint32_t __tmp_in_tmp48;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp48;
    }
    Arr1DIdxRowM(tmp48, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp48 : 0;
  }

  uint64_t *tmp49 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp49
   * at (644,1-644,46) */
  uint32_t __tmp_in_tmp49;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp49;
          }
          Arr4DIdxRowM(tmp49, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp49 : 0;
        }
      }
    }
  }

  uint64_t *tmp50 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp50
   * at (647,1-647,36) */
  uint32_t __tmp_in_tmp50;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp50;
    }
    Arr1DIdxRowM(tmp50, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp50 : 0;
  }

  uint64_t *tmp51 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp51
   * at (650,1-650,36) */
  uint32_t __tmp_in_tmp51;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp51;
    }
    Arr1DIdxRowM(tmp51, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp51 : 0;
  }

  uint64_t *tmp52 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp52
   * at (653,1-653,36) */
  uint32_t __tmp_in_tmp52;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp52;
    }
    Arr1DIdxRowM(tmp52, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp52 : 0;
  }

  uint64_t *tmp53 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp53
   * at (656,1-656,36) */
  uint32_t __tmp_in_tmp53;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp53;
    }
    Arr1DIdxRowM(tmp53, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp53 : 0;
  }

  uint64_t *tmp54 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp54
   * at (659,1-659,36) */
  uint32_t __tmp_in_tmp54;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp54;
    }
    Arr1DIdxRowM(tmp54, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp54 : 0;
  }

  uint64_t *tmp55 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp55
   * at (662,1-662,46) */
  uint32_t __tmp_in_tmp55;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp55;
          }
          Arr4DIdxRowM(tmp55, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp55 : 0;
        }
      }
    }
  }

  uint64_t *tmp56 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp56
   * at (665,1-665,36) */
  uint32_t __tmp_in_tmp56;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp56;
    }
    Arr1DIdxRowM(tmp56, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp56 : 0;
  }

  uint64_t *tmp57 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp57
   * at (668,1-668,36) */
  uint32_t __tmp_in_tmp57;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp57;
    }
    Arr1DIdxRowM(tmp57, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp57 : 0;
  }

  uint64_t *tmp58 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp58
   * at (671,1-671,36) */
  uint32_t __tmp_in_tmp58;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp58;
    }
    Arr1DIdxRowM(tmp58, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp58 : 0;
  }

  uint64_t *tmp59 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp59
   * at (674,1-674,36) */
  uint32_t __tmp_in_tmp59;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp59;
    }
    Arr1DIdxRowM(tmp59, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp59 : 0;
  }

  uint64_t *tmp60 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp60
   * at (677,1-677,36) */
  uint32_t __tmp_in_tmp60;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp60;
    }
    Arr1DIdxRowM(tmp60, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp60 : 0;
  }

  uint64_t *tmp61 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp61
   * at (680,1-680,46) */
  uint32_t __tmp_in_tmp61;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp61;
          }
          Arr4DIdxRowM(tmp61, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp61 : 0;
        }
      }
    }
  }

  uint64_t *tmp62 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp62
   * at (683,1-683,36) */
  uint32_t __tmp_in_tmp62;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp62;
    }
    Arr1DIdxRowM(tmp62, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp62 : 0;
  }

  uint64_t *tmp63 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp63
   * at (686,1-686,36) */
  uint32_t __tmp_in_tmp63;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp63;
    }
    Arr1DIdxRowM(tmp63, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp63 : 0;
  }

  uint64_t *tmp64 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp64
   * at (689,1-689,36) */
  uint32_t __tmp_in_tmp64;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp64;
    }
    Arr1DIdxRowM(tmp64, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp64 : 0;
  }

  uint64_t *tmp65 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp65
   * at (692,1-692,36) */
  uint32_t __tmp_in_tmp65;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp65;
    }
    Arr1DIdxRowM(tmp65, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp65 : 0;
  }

  uint64_t *tmp66 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp66
   * at (695,1-695,36) */
  uint32_t __tmp_in_tmp66;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp66;
    }
    Arr1DIdxRowM(tmp66, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp66 : 0;
  }

  uint64_t *tmp67 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp67
   * at (698,1-698,46) */
  uint32_t __tmp_in_tmp67;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp67;
          }
          Arr4DIdxRowM(tmp67, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp67 : 0;
        }
      }
    }
  }

  uint64_t *tmp68 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp68
   * at (701,1-701,36) */
  uint32_t __tmp_in_tmp68;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp68;
    }
    Arr1DIdxRowM(tmp68, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp68 : 0;
  }

  uint64_t *tmp69 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp69
   * at (704,1-704,36) */
  uint32_t __tmp_in_tmp69;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp69;
    }
    Arr1DIdxRowM(tmp69, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp69 : 0;
  }

  uint64_t *tmp70 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp70
   * at (707,1-707,36) */
  uint32_t __tmp_in_tmp70;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp70;
    }
    Arr1DIdxRowM(tmp70, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp70 : 0;
  }

  uint64_t *tmp71 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp71
   * at (710,1-710,36) */
  uint32_t __tmp_in_tmp71;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp71;
    }
    Arr1DIdxRowM(tmp71, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp71 : 0;
  }

  uint64_t *tmp72 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp72
   * at (713,1-713,36) */
  uint32_t __tmp_in_tmp72;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp72;
    }
    Arr1DIdxRowM(tmp72, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp72 : 0;
  }

  uint64_t *tmp73 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp73
   * at (716,1-716,46) */
  uint32_t __tmp_in_tmp73;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp73;
          }
          Arr4DIdxRowM(tmp73, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)32,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp73 : 0;
        }
      }
    }
  }

  uint64_t *tmp74 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp74
   * at (719,1-719,36) */
  uint32_t __tmp_in_tmp74;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp74;
    }
    Arr1DIdxRowM(tmp74, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp74 : 0;
  }

  uint64_t *tmp75 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp75
   * at (722,1-722,36) */
  uint32_t __tmp_in_tmp75;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp75;
    }
    Arr1DIdxRowM(tmp75, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp75 : 0;
  }

  uint64_t *tmp76 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp76
   * at (725,1-725,36) */
  uint32_t __tmp_in_tmp76;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp76;
    }
    Arr1DIdxRowM(tmp76, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp76 : 0;
  }

  uint64_t *tmp77 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp77
   * at (728,1-728,36) */
  uint32_t __tmp_in_tmp77;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp77;
    }
    Arr1DIdxRowM(tmp77, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp77 : 0;
  }

  uint64_t *tmp78 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp78
   * at (731,1-731,36) */
  uint32_t __tmp_in_tmp78;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp78;
    }
    Arr1DIdxRowM(tmp78, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp78 : 0;
  }

  uint64_t *tmp79 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp79
   * at (734,1-734,46) */
  uint32_t __tmp_in_tmp79;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp79;
          }
          Arr4DIdxRowM(tmp79, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp79 : 0;
        }
      }
    }
  }

  uint64_t *tmp80 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp80
   * at (737,1-737,36) */
  uint32_t __tmp_in_tmp80;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp80;
    }
    Arr1DIdxRowM(tmp80, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp80 : 0;
  }

  uint64_t *tmp81 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp81
   * at (740,1-740,36) */
  uint32_t __tmp_in_tmp81;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp81;
    }
    Arr1DIdxRowM(tmp81, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp81 : 0;
  }

  uint64_t *tmp82 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp82
   * at (743,1-743,36) */
  uint32_t __tmp_in_tmp82;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp82;
    }
    Arr1DIdxRowM(tmp82, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp82 : 0;
  }

  uint64_t *tmp83 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp83
   * at (746,1-746,36) */
  uint32_t __tmp_in_tmp83;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp83;
    }
    Arr1DIdxRowM(tmp83, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp83 : 0;
  }

  uint64_t *tmp84 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp84
   * at (749,1-749,36) */
  uint32_t __tmp_in_tmp84;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp84;
    }
    Arr1DIdxRowM(tmp84, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp84 : 0;
  }

  uint64_t *tmp85 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)16, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp85
   * at (752,1-752,46) */
  uint32_t __tmp_in_tmp85;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)1; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)1; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)16; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp85;
          }
          Arr4DIdxRowM(tmp85, (int32_t)1, (int32_t)1, (int32_t)16, (int32_t)32,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp85 : 0;
        }
      }
    }
  }

  uint64_t *tmp86 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp86
   * at (755,1-755,36) */
  uint32_t __tmp_in_tmp86;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp86;
    }
    Arr1DIdxRowM(tmp86, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp86 : 0;
  }

  uint64_t *tmp87 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp87
   * at (758,1-758,36) */
  uint32_t __tmp_in_tmp87;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp87;
    }
    Arr1DIdxRowM(tmp87, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp87 : 0;
  }

  uint64_t *tmp88 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp88
   * at (761,1-761,36) */
  uint32_t __tmp_in_tmp88;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp88;
    }
    Arr1DIdxRowM(tmp88, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp88 : 0;
  }

  uint64_t *tmp89 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp89
   * at (764,1-764,36) */
  uint32_t __tmp_in_tmp89;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp89;
    }
    Arr1DIdxRowM(tmp89, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp89 : 0;
  }

  uint64_t *tmp90 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp90
   * at (767,1-767,36) */
  uint32_t __tmp_in_tmp90;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp90;
    }
    Arr1DIdxRowM(tmp90, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp90 : 0;
  }

  uint64_t *tmp91 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp91
   * at (770,1-770,46) */
  uint32_t __tmp_in_tmp91;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp91;
          }
          Arr4DIdxRowM(tmp91, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp91 : 0;
        }
      }
    }
  }

  uint64_t *tmp92 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp92
   * at (773,1-773,36) */
  uint32_t __tmp_in_tmp92;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp92;
    }
    Arr1DIdxRowM(tmp92, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp92 : 0;
  }

  uint64_t *tmp93 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp93
   * at (776,1-776,36) */
  uint32_t __tmp_in_tmp93;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp93;
    }
    Arr1DIdxRowM(tmp93, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp93 : 0;
  }

  uint64_t *tmp94 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp94
   * at (779,1-779,36) */
  uint32_t __tmp_in_tmp94;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp94;
    }
    Arr1DIdxRowM(tmp94, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp94 : 0;
  }

  uint64_t *tmp95 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp95
   * at (782,1-782,36) */
  uint32_t __tmp_in_tmp95;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp95;
    }
    Arr1DIdxRowM(tmp95, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp95 : 0;
  }

  uint64_t *tmp96 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp96
   * at (785,1-785,36) */
  uint32_t __tmp_in_tmp96;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp96;
    }
    Arr1DIdxRowM(tmp96, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp96 : 0;
  }

  uint64_t *tmp97 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp97
   * at (788,1-788,46) */
  uint32_t __tmp_in_tmp97;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp97;
          }
          Arr4DIdxRowM(tmp97, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp97 : 0;
        }
      }
    }
  }

  uint64_t *tmp98 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp98
   * at (791,1-791,36) */
  uint32_t __tmp_in_tmp98;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp98;
    }
    Arr1DIdxRowM(tmp98, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp98 : 0;
  }

  uint64_t *tmp99 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp99
   * at (794,1-794,36) */
  uint32_t __tmp_in_tmp99;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp99;
    }
    Arr1DIdxRowM(tmp99, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp99 : 0;
  }

  uint64_t *tmp100 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp100
   * at (797,1-797,37) */
  uint32_t __tmp_in_tmp100;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp100;
    }
    Arr1DIdxRowM(tmp100, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp100 : 0;
  }

  uint64_t *tmp101 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp101
   * at (800,1-800,37) */
  uint32_t __tmp_in_tmp101;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp101;
    }
    Arr1DIdxRowM(tmp101, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp101 : 0;
  }

  uint64_t *tmp102 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp102
   * at (803,1-803,37) */
  uint32_t __tmp_in_tmp102;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp102;
    }
    Arr1DIdxRowM(tmp102, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp102 : 0;
  }

  uint64_t *tmp103 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp103
   * at (806,1-806,47) */
  uint32_t __tmp_in_tmp103;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp103;
          }
          Arr4DIdxRowM(tmp103, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp103 : 0;
        }
      }
    }
  }

  uint64_t *tmp104 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp104
   * at (809,1-809,37) */
  uint32_t __tmp_in_tmp104;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp104;
    }
    Arr1DIdxRowM(tmp104, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp104 : 0;
  }

  uint64_t *tmp105 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp105
   * at (812,1-812,37) */
  uint32_t __tmp_in_tmp105;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp105;
    }
    Arr1DIdxRowM(tmp105, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp105 : 0;
  }

  uint64_t *tmp106 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp106
   * at (815,1-815,37) */
  uint32_t __tmp_in_tmp106;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp106;
    }
    Arr1DIdxRowM(tmp106, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp106 : 0;
  }

  uint64_t *tmp107 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp107
   * at (818,1-818,37) */
  uint32_t __tmp_in_tmp107;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp107;
    }
    Arr1DIdxRowM(tmp107, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp107 : 0;
  }

  uint64_t *tmp108 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp108
   * at (821,1-821,37) */
  uint32_t __tmp_in_tmp108;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp108;
    }
    Arr1DIdxRowM(tmp108, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp108 : 0;
  }

  uint64_t *tmp109 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp109
   * at (824,1-824,47) */
  uint32_t __tmp_in_tmp109;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp109;
          }
          Arr4DIdxRowM(tmp109, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp109 : 0;
        }
      }
    }
  }

  uint64_t *tmp110 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp110
   * at (827,1-827,37) */
  uint32_t __tmp_in_tmp110;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp110;
    }
    Arr1DIdxRowM(tmp110, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp110 : 0;
  }

  uint64_t *tmp111 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp111
   * at (830,1-830,37) */
  uint32_t __tmp_in_tmp111;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp111;
    }
    Arr1DIdxRowM(tmp111, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp111 : 0;
  }

  uint64_t *tmp112 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp112
   * at (833,1-833,37) */
  uint32_t __tmp_in_tmp112;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp112;
    }
    Arr1DIdxRowM(tmp112, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp112 : 0;
  }

  uint64_t *tmp113 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp113
   * at (836,1-836,37) */
  uint32_t __tmp_in_tmp113;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp113;
    }
    Arr1DIdxRowM(tmp113, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp113 : 0;
  }

  uint64_t *tmp114 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp114
   * at (839,1-839,37) */
  uint32_t __tmp_in_tmp114;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp114;
    }
    Arr1DIdxRowM(tmp114, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp114 : 0;
  }

  uint64_t *tmp115 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp115
   * at (842,1-842,47) */
  uint32_t __tmp_in_tmp115;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp115;
          }
          Arr4DIdxRowM(tmp115, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp115 : 0;
        }
      }
    }
  }

  uint64_t *tmp116 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp116
   * at (845,1-845,37) */
  uint32_t __tmp_in_tmp116;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp116;
    }
    Arr1DIdxRowM(tmp116, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp116 : 0;
  }

  uint64_t *tmp117 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp117
   * at (848,1-848,37) */
  uint32_t __tmp_in_tmp117;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp117;
    }
    Arr1DIdxRowM(tmp117, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp117 : 0;
  }

  uint64_t *tmp118 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp118
   * at (851,1-851,37) */
  uint32_t __tmp_in_tmp118;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp118;
    }
    Arr1DIdxRowM(tmp118, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp118 : 0;
  }

  uint64_t *tmp119 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp119
   * at (854,1-854,37) */
  uint32_t __tmp_in_tmp119;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp119;
    }
    Arr1DIdxRowM(tmp119, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp119 : 0;
  }

  uint64_t *tmp120 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp120
   * at (857,1-857,37) */
  uint32_t __tmp_in_tmp120;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp120;
    }
    Arr1DIdxRowM(tmp120, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp120 : 0;
  }

  uint64_t *tmp121 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp121
   * at (860,1-860,47) */
  uint32_t __tmp_in_tmp121;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp121;
          }
          Arr4DIdxRowM(tmp121, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp121 : 0;
        }
      }
    }
  }

  uint64_t *tmp122 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp122
   * at (863,1-863,37) */
  uint32_t __tmp_in_tmp122;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp122;
    }
    Arr1DIdxRowM(tmp122, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp122 : 0;
  }

  uint64_t *tmp123 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp123
   * at (866,1-866,37) */
  uint32_t __tmp_in_tmp123;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp123;
    }
    Arr1DIdxRowM(tmp123, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp123 : 0;
  }

  uint64_t *tmp124 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp124
   * at (869,1-869,37) */
  uint32_t __tmp_in_tmp124;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp124;
    }
    Arr1DIdxRowM(tmp124, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp124 : 0;
  }

  uint64_t *tmp125 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp125
   * at (872,1-872,37) */
  uint32_t __tmp_in_tmp125;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp125;
    }
    Arr1DIdxRowM(tmp125, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp125 : 0;
  }

  uint64_t *tmp126 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp126
   * at (875,1-875,37) */
  uint32_t __tmp_in_tmp126;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp126;
    }
    Arr1DIdxRowM(tmp126, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp126 : 0;
  }

  uint64_t *tmp127 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp127
   * at (878,1-878,47) */
  uint32_t __tmp_in_tmp127;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp127;
          }
          Arr4DIdxRowM(tmp127, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp127 : 0;
        }
      }
    }
  }

  uint64_t *tmp128 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp128
   * at (881,1-881,37) */
  uint32_t __tmp_in_tmp128;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp128;
    }
    Arr1DIdxRowM(tmp128, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp128 : 0;
  }

  uint64_t *tmp129 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp129
   * at (884,1-884,37) */
  uint32_t __tmp_in_tmp129;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp129;
    }
    Arr1DIdxRowM(tmp129, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp129 : 0;
  }

  uint64_t *tmp130 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp130
   * at (887,1-887,37) */
  uint32_t __tmp_in_tmp130;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp130;
    }
    Arr1DIdxRowM(tmp130, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp130 : 0;
  }

  uint64_t *tmp131 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp131
   * at (890,1-890,37) */
  uint32_t __tmp_in_tmp131;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp131;
    }
    Arr1DIdxRowM(tmp131, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp131 : 0;
  }

  uint64_t *tmp132 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp132
   * at (893,1-893,37) */
  uint32_t __tmp_in_tmp132;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp132;
    }
    Arr1DIdxRowM(tmp132, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp132 : 0;
  }

  uint64_t *tmp133 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp133
   * at (896,1-896,47) */
  uint32_t __tmp_in_tmp133;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp133;
          }
          Arr4DIdxRowM(tmp133, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)32,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp133 : 0;
        }
      }
    }
  }

  uint64_t *tmp134 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp134
   * at (899,1-899,37) */
  uint32_t __tmp_in_tmp134;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp134;
    }
    Arr1DIdxRowM(tmp134, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp134 : 0;
  }

  uint64_t *tmp135 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp135
   * at (902,1-902,37) */
  uint32_t __tmp_in_tmp135;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp135;
    }
    Arr1DIdxRowM(tmp135, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp135 : 0;
  }

  uint64_t *tmp136 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp136
   * at (905,1-905,37) */
  uint32_t __tmp_in_tmp136;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp136;
    }
    Arr1DIdxRowM(tmp136, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp136 : 0;
  }

  uint64_t *tmp137 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp137
   * at (908,1-908,37) */
  uint32_t __tmp_in_tmp137;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp137;
    }
    Arr1DIdxRowM(tmp137, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp137 : 0;
  }

  uint64_t *tmp138 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp138
   * at (911,1-911,37) */
  uint32_t __tmp_in_tmp138;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp138;
    }
    Arr1DIdxRowM(tmp138, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp138 : 0;
  }

  uint64_t *tmp139 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp139
   * at (914,1-914,47) */
  uint32_t __tmp_in_tmp139;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp139;
          }
          Arr4DIdxRowM(tmp139, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp139 : 0;
        }
      }
    }
  }

  uint64_t *tmp140 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp140
   * at (917,1-917,37) */
  uint32_t __tmp_in_tmp140;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp140;
    }
    Arr1DIdxRowM(tmp140, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp140 : 0;
  }

  uint64_t *tmp141 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp141
   * at (920,1-920,37) */
  uint32_t __tmp_in_tmp141;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp141;
    }
    Arr1DIdxRowM(tmp141, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp141 : 0;
  }

  uint64_t *tmp142 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp142
   * at (923,1-923,37) */
  uint32_t __tmp_in_tmp142;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp142;
    }
    Arr1DIdxRowM(tmp142, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp142 : 0;
  }

  uint64_t *tmp143 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp143
   * at (926,1-926,37) */
  uint32_t __tmp_in_tmp143;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp143;
    }
    Arr1DIdxRowM(tmp143, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp143 : 0;
  }

  uint64_t *tmp144 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp144
   * at (929,1-929,37) */
  uint32_t __tmp_in_tmp144;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp144;
    }
    Arr1DIdxRowM(tmp144, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp144 : 0;
  }

  uint64_t *tmp145 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp145
   * at (932,1-932,47) */
  uint32_t __tmp_in_tmp145;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp145;
          }
          Arr4DIdxRowM(tmp145, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp145 : 0;
        }
      }
    }
  }

  uint64_t *tmp146 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp146
   * at (935,1-935,37) */
  uint32_t __tmp_in_tmp146;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp146;
    }
    Arr1DIdxRowM(tmp146, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp146 : 0;
  }

  uint64_t *tmp147 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp147
   * at (938,1-938,37) */
  uint32_t __tmp_in_tmp147;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp147;
    }
    Arr1DIdxRowM(tmp147, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp147 : 0;
  }

  uint64_t *tmp148 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp148
   * at (941,1-941,37) */
  uint32_t __tmp_in_tmp148;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp148;
    }
    Arr1DIdxRowM(tmp148, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp148 : 0;
  }

  uint64_t *tmp149 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp149
   * at (944,1-944,37) */
  uint32_t __tmp_in_tmp149;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp149;
    }
    Arr1DIdxRowM(tmp149, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp149 : 0;
  }

  uint64_t *tmp150 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp150
   * at (947,1-947,37) */
  uint32_t __tmp_in_tmp150;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp150;
    }
    Arr1DIdxRowM(tmp150, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp150 : 0;
  }

  uint64_t *tmp151 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)32, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp151
   * at (950,1-950,47) */
  uint32_t __tmp_in_tmp151;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)1; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)1; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)32; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp151;
          }
          Arr4DIdxRowM(tmp151, (int32_t)1, (int32_t)1, (int32_t)32, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp151 : 0;
        }
      }
    }
  }

  uint64_t *tmp152 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp152
   * at (953,1-953,37) */
  uint32_t __tmp_in_tmp152;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp152;
    }
    Arr1DIdxRowM(tmp152, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp152 : 0;
  }

  uint64_t *tmp153 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp153
   * at (956,1-956,37) */
  uint32_t __tmp_in_tmp153;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp153;
    }
    Arr1DIdxRowM(tmp153, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp153 : 0;
  }

  uint64_t *tmp154 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp154
   * at (959,1-959,37) */
  uint32_t __tmp_in_tmp154;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp154;
    }
    Arr1DIdxRowM(tmp154, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp154 : 0;
  }

  uint64_t *tmp155 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp155
   * at (962,1-962,37) */
  uint32_t __tmp_in_tmp155;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp155;
    }
    Arr1DIdxRowM(tmp155, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp155 : 0;
  }

  uint64_t *tmp156 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp156
   * at (965,1-965,37) */
  uint32_t __tmp_in_tmp156;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp156;
    }
    Arr1DIdxRowM(tmp156, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp156 : 0;
  }

  uint64_t *tmp157 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp157
   * at (968,1-968,47) */
  uint32_t __tmp_in_tmp157;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp157;
          }
          Arr4DIdxRowM(tmp157, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp157 : 0;
        }
      }
    }
  }

  uint64_t *tmp158 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp158
   * at (971,1-971,37) */
  uint32_t __tmp_in_tmp158;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp158;
    }
    Arr1DIdxRowM(tmp158, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp158 : 0;
  }

  uint64_t *tmp159 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp159
   * at (974,1-974,37) */
  uint32_t __tmp_in_tmp159;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp159;
    }
    Arr1DIdxRowM(tmp159, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp159 : 0;
  }

  uint64_t *tmp160 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp160
   * at (977,1-977,37) */
  uint32_t __tmp_in_tmp160;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp160;
    }
    Arr1DIdxRowM(tmp160, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp160 : 0;
  }

  uint64_t *tmp161 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp161
   * at (980,1-980,37) */
  uint32_t __tmp_in_tmp161;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp161;
    }
    Arr1DIdxRowM(tmp161, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp161 : 0;
  }

  uint64_t *tmp162 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp162
   * at (983,1-983,37) */
  uint32_t __tmp_in_tmp162;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp162;
    }
    Arr1DIdxRowM(tmp162, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp162 : 0;
  }

  uint64_t *tmp163 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp163
   * at (986,1-986,47) */
  uint32_t __tmp_in_tmp163;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp163;
          }
          Arr4DIdxRowM(tmp163, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp163 : 0;
        }
      }
    }
  }

  uint64_t *tmp164 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp164
   * at (989,1-989,37) */
  uint32_t __tmp_in_tmp164;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp164;
    }
    Arr1DIdxRowM(tmp164, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp164 : 0;
  }

  uint64_t *tmp165 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp165
   * at (992,1-992,37) */
  uint32_t __tmp_in_tmp165;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp165;
    }
    Arr1DIdxRowM(tmp165, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp165 : 0;
  }

  uint64_t *tmp166 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp166
   * at (995,1-995,37) */
  uint32_t __tmp_in_tmp166;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp166;
    }
    Arr1DIdxRowM(tmp166, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp166 : 0;
  }

  uint64_t *tmp167 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp167
   * at (998,1-998,37) */
  uint32_t __tmp_in_tmp167;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp167;
    }
    Arr1DIdxRowM(tmp167, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp167 : 0;
  }

  uint64_t *tmp168 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp168
   * at (1001,1-1001,37) */
  uint32_t __tmp_in_tmp168;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp168;
    }
    Arr1DIdxRowM(tmp168, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp168 : 0;
  }

  uint64_t *tmp169 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp169
   * at (1004,1-1004,47) */
  uint32_t __tmp_in_tmp169;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp169;
          }
          Arr4DIdxRowM(tmp169, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp169 : 0;
        }
      }
    }
  }

  uint64_t *tmp170 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp170
   * at (1007,1-1007,37) */
  uint32_t __tmp_in_tmp170;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp170;
    }
    Arr1DIdxRowM(tmp170, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp170 : 0;
  }

  uint64_t *tmp171 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp171
   * at (1010,1-1010,37) */
  uint32_t __tmp_in_tmp171;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp171;
    }
    Arr1DIdxRowM(tmp171, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp171 : 0;
  }

  uint64_t *tmp172 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp172
   * at (1013,1-1013,37) */
  uint32_t __tmp_in_tmp172;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp172;
    }
    Arr1DIdxRowM(tmp172, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp172 : 0;
  }

  uint64_t *tmp173 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp173
   * at (1016,1-1016,37) */
  uint32_t __tmp_in_tmp173;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp173;
    }
    Arr1DIdxRowM(tmp173, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp173 : 0;
  }

  uint64_t *tmp174 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp174
   * at (1019,1-1019,37) */
  uint32_t __tmp_in_tmp174;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp174;
    }
    Arr1DIdxRowM(tmp174, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp174 : 0;
  }

  uint64_t *tmp175 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp175
   * at (1022,1-1022,47) */
  uint32_t __tmp_in_tmp175;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp175;
          }
          Arr4DIdxRowM(tmp175, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp175 : 0;
        }
      }
    }
  }

  uint64_t *tmp176 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp176
   * at (1025,1-1025,37) */
  uint32_t __tmp_in_tmp176;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp176;
    }
    Arr1DIdxRowM(tmp176, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp176 : 0;
  }

  uint64_t *tmp177 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp177
   * at (1028,1-1028,37) */
  uint32_t __tmp_in_tmp177;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp177;
    }
    Arr1DIdxRowM(tmp177, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp177 : 0;
  }

  uint64_t *tmp178 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp178
   * at (1031,1-1031,37) */
  uint32_t __tmp_in_tmp178;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp178;
    }
    Arr1DIdxRowM(tmp178, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp178 : 0;
  }

  uint64_t *tmp179 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp179
   * at (1034,1-1034,37) */
  uint32_t __tmp_in_tmp179;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp179;
    }
    Arr1DIdxRowM(tmp179, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp179 : 0;
  }

  uint64_t *tmp180 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp180
   * at (1037,1-1037,37) */
  uint32_t __tmp_in_tmp180;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp180;
    }
    Arr1DIdxRowM(tmp180, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp180 : 0;
  }

  uint64_t *tmp181 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp181
   * at (1040,1-1040,47) */
  uint32_t __tmp_in_tmp181;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp181;
          }
          Arr4DIdxRowM(tmp181, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp181 : 0;
        }
      }
    }
  }

  uint64_t *tmp182 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp182
   * at (1043,1-1043,37) */
  uint32_t __tmp_in_tmp182;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp182;
    }
    Arr1DIdxRowM(tmp182, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp182 : 0;
  }

  uint64_t *tmp183 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp183
   * at (1046,1-1046,37) */
  uint32_t __tmp_in_tmp183;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp183;
    }
    Arr1DIdxRowM(tmp183, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp183 : 0;
  }

  uint64_t *tmp184 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp184
   * at (1049,1-1049,37) */
  uint32_t __tmp_in_tmp184;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp184;
    }
    Arr1DIdxRowM(tmp184, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp184 : 0;
  }

  uint64_t *tmp185 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp185
   * at (1052,1-1052,37) */
  uint32_t __tmp_in_tmp185;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp185;
    }
    Arr1DIdxRowM(tmp185, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp185 : 0;
  }

  uint64_t *tmp186 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp186
   * at (1055,1-1055,37) */
  uint32_t __tmp_in_tmp186;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp186;
    }
    Arr1DIdxRowM(tmp186, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp186 : 0;
  }

  uint64_t *tmp187 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp187
   * at (1058,1-1058,47) */
  uint32_t __tmp_in_tmp187;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp187;
          }
          Arr4DIdxRowM(tmp187, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp187 : 0;
        }
      }
    }
  }

  uint64_t *tmp188 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp188
   * at (1061,1-1061,37) */
  uint32_t __tmp_in_tmp188;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp188;
    }
    Arr1DIdxRowM(tmp188, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp188 : 0;
  }

  uint64_t *tmp189 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp189
   * at (1064,1-1064,37) */
  uint32_t __tmp_in_tmp189;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp189;
    }
    Arr1DIdxRowM(tmp189, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp189 : 0;
  }

  uint64_t *tmp190 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp190
   * at (1067,1-1067,37) */
  uint32_t __tmp_in_tmp190;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp190;
    }
    Arr1DIdxRowM(tmp190, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp190 : 0;
  }

  uint64_t *tmp191 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp191
   * at (1070,1-1070,37) */
  uint32_t __tmp_in_tmp191;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp191;
    }
    Arr1DIdxRowM(tmp191, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp191 : 0;
  }

  uint64_t *tmp192 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp192
   * at (1073,1-1073,37) */
  uint32_t __tmp_in_tmp192;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp192;
    }
    Arr1DIdxRowM(tmp192, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp192 : 0;
  }

  uint64_t *tmp193 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp193
   * at (1076,1-1076,47) */
  uint32_t __tmp_in_tmp193;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp193;
          }
          Arr4DIdxRowM(tmp193, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp193 : 0;
        }
      }
    }
  }

  uint64_t *tmp194 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp194
   * at (1079,1-1079,37) */
  uint32_t __tmp_in_tmp194;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp194;
    }
    Arr1DIdxRowM(tmp194, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp194 : 0;
  }

  uint64_t *tmp195 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp195
   * at (1082,1-1082,37) */
  uint32_t __tmp_in_tmp195;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp195;
    }
    Arr1DIdxRowM(tmp195, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp195 : 0;
  }

  uint64_t *tmp196 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp196
   * at (1085,1-1085,37) */
  uint32_t __tmp_in_tmp196;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp196;
    }
    Arr1DIdxRowM(tmp196, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp196 : 0;
  }

  uint64_t *tmp197 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp197
   * at (1088,1-1088,37) */
  uint32_t __tmp_in_tmp197;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp197;
    }
    Arr1DIdxRowM(tmp197, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp197 : 0;
  }

  uint64_t *tmp198 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp198
   * at (1091,1-1091,37) */
  uint32_t __tmp_in_tmp198;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp198;
    }
    Arr1DIdxRowM(tmp198, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp198 : 0;
  }

  uint64_t *tmp199 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp199
   * at (1094,1-1094,47) */
  uint32_t __tmp_in_tmp199;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)3; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)3; i1++) {
      for (uint32_t i2 = (uint32_t)0; i2 < (int32_t)64; i2++) {
        for (uint32_t i3 = (uint32_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp199;
          }
          Arr4DIdxRowM(tmp199, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp199 : 0;
        }
      }
    }
  }

  uint64_t *tmp200 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp200
   * at (1097,1-1097,37) */
  uint32_t __tmp_in_tmp200;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp200;
    }
    Arr1DIdxRowM(tmp200, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp200 : 0;
  }

  uint64_t *tmp201 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp201
   * at (1100,1-1100,37) */
  uint32_t __tmp_in_tmp201;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp201;
    }
    Arr1DIdxRowM(tmp201, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp201 : 0;
  }

  uint64_t *tmp202 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp202
   * at (1103,1-1103,37) */
  uint32_t __tmp_in_tmp202;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp202;
    }
    Arr1DIdxRowM(tmp202, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp202 : 0;
  }

  uint64_t *tmp203 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp203
   * at (1106,1-1106,37) */
  uint32_t __tmp_in_tmp203;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp203;
    }
    Arr1DIdxRowM(tmp203, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp203 : 0;
  }

  uint64_t *tmp204 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp204
   * at (1109,1-1109,37) */
  uint32_t __tmp_in_tmp204;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp204;
    }
    Arr1DIdxRowM(tmp204, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp204 : 0;
  }

  uint64_t *tmp205 = make_array<uint64_t>((int32_t)64, (int32_t)100);
  /* Variable to read the clear value corresponding to the input variable tmp205
   * at (1112,1-1112,42) */
  uint32_t __tmp_in_tmp205;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)64; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)100; i1++) {
      if ((party == SERVER)) {
        cin >> __tmp_in_tmp205;
      }
      Arr2DIdxRowM(tmp205, (int32_t)64, (int32_t)100, i0, i1) =
          (party == SERVER) ? __tmp_in_tmp205 : 0;
    }
  }

  uint64_t *tmp206 = make_array<uint64_t>((int32_t)100);
  /* Variable to read the clear value corresponding to the input variable tmp206
   * at (1115,1-1115,38) */
  uint32_t __tmp_in_tmp206;
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)100; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp206;
    }
    Arr1DIdxRowM(tmp206, (int32_t)100, i0) =
        (party == SERVER) ? __tmp_in_tmp206 : 0;
  }
  StartComputation();

  int64_t *tmp207 = make_array<int64_t>((int32_t)4, (int32_t)2);
  Arr2DIdxRowM(tmp207, (int32_t)4, (int32_t)2, (int32_t)0, (int32_t)0) =
      (int32_t)0;
  Arr2DIdxRowM(tmp207, (int32_t)4, (int32_t)2, (int32_t)0, (int32_t)1) =
      (int32_t)0;
  Arr2DIdxRowM(tmp207, (int32_t)4, (int32_t)2, (int32_t)1, (int32_t)0) =
      (int32_t)1;
  Arr2DIdxRowM(tmp207, (int32_t)4, (int32_t)2, (int32_t)1, (int32_t)1) =
      (int32_t)1;
  Arr2DIdxRowM(tmp207, (int32_t)4, (int32_t)2, (int32_t)2, (int32_t)0) =
      (int32_t)1;
  Arr2DIdxRowM(tmp207, (int32_t)4, (int32_t)2, (int32_t)2, (int32_t)1) =
      (int32_t)1;
  Arr2DIdxRowM(tmp207, (int32_t)4, (int32_t)2, (int32_t)3, (int32_t)0) =
      (int32_t)0;
  Arr2DIdxRowM(tmp207, (int32_t)4, (int32_t)2, (int32_t)3, (int32_t)1) =
      (int32_t)0;

  uint64_t *tmp208 =
      make_array<uint64_t>((int32_t)1, (int32_t)34, (int32_t)34, (int32_t)3);
  Pad442((int32_t)1, (int32_t)34, (int32_t)34, (int32_t)3, (int32_t)1,
         (int32_t)32, (int32_t)32, (int32_t)3, tmp0, (int32_t)4, (int32_t)2,
         tmp207, tmp208);

  uint64_t *tmp212 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)34, (int32_t)34, (int32_t)3, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp208, tmp1, tmp212);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp212,
  // (int32_t)11);

  uint64_t *tmp216 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp212,
                   tmp2, tmp216);

  uint64_t *tmp223 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp216,
                     tmp3, tmp4, 0, (int32_t)11, tmp223);

  uint64_t *tmp227 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp223, tmp227,
        (int32_t)11, 1);

  uint64_t *tmp230 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp227, tmp7, tmp230);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp230,
  // (int32_t)11);

  uint64_t *tmp233 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp230,
                   tmp8, tmp233);

  uint64_t *tmp240 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp233,
                     tmp9, tmp10, 0, (int32_t)11, tmp240);

  uint64_t *tmp244 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp240, tmp244,
        (int32_t)11, 1);

  uint64_t *tmp247 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp244, tmp13, tmp247);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp247,
  // (int32_t)11);

  uint64_t *tmp251 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp247,
                   tmp14, tmp251);

  uint64_t *tmp258 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp251,
                     tmp15, tmp16, 0, (int32_t)11, tmp258);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp258,
  // (int32_t)11);

  uint64_t *tmp263 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)1,
                (int32_t)1, (int32_t)16, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp227, tmp19, tmp263);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp263,
  // (int32_t)11);

  uint64_t *tmp267 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp263,
                   tmp20, tmp267);

  uint64_t *tmp274 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp267,
                     tmp21, tmp22, 0, (int32_t)11, tmp274);

  uint64_t *tmp278 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  // ScaleUp4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp258,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp258, tmp274,
          tmp278);

  uint64_t *tmp281 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp278, tmp281,
        (int32_t)11, 1);

  uint64_t *tmp284 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp281, tmp25, tmp284);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp284,
  // (int32_t)11);

  uint64_t *tmp287 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp284,
                   tmp26, tmp287);

  uint64_t *tmp294 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp287,
                     tmp27, tmp28, 0, (int32_t)11, tmp294);

  uint64_t *tmp298 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp294, tmp298,
        (int32_t)11, 1);

  uint64_t *tmp301 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp298, tmp31, tmp301);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp301,
  // (int32_t)11);

  uint64_t *tmp305 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp301,
                   tmp32, tmp305);

  uint64_t *tmp312 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp305,
                     tmp33, tmp34, 0, (int32_t)11, tmp312);

  uint64_t *tmp316 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  // ScaleUp4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp281,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp312, tmp281,
          tmp316);

  uint64_t *tmp319 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp316, tmp319,
        (int32_t)11, 1);

  uint64_t *tmp322 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp319, tmp37, tmp322);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp322,
  // (int32_t)11);

  uint64_t *tmp325 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp322,
                   tmp38, tmp325);

  uint64_t *tmp332 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp325,
                     tmp39, tmp40, 0, (int32_t)11, tmp332);

  uint64_t *tmp336 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp332, tmp336,
        (int32_t)11, 1);

  uint64_t *tmp339 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp336, tmp43, tmp339);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp339,
  // (int32_t)11);

  uint64_t *tmp343 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp339,
                   tmp44, tmp343);

  uint64_t *tmp350 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp343,
                     tmp45, tmp46, 0, (int32_t)11, tmp350);

  uint64_t *tmp354 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  // ScaleUp4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp319,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp350, tmp319,
          tmp354);

  uint64_t *tmp357 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp354, tmp357,
        (int32_t)11, 1);

  uint64_t *tmp360 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp357, tmp49, tmp360);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp360,
  // (int32_t)11);

  uint64_t *tmp363 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp360,
                   tmp50, tmp363);

  uint64_t *tmp370 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp363,
                     tmp51, tmp52, 0, (int32_t)11, tmp370);

  uint64_t *tmp374 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp370, tmp374,
        (int32_t)11, 1);

  uint64_t *tmp377 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp374, tmp55, tmp377);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp377,
  // (int32_t)11);

  uint64_t *tmp381 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp377,
                   tmp56, tmp381);

  uint64_t *tmp388 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp381,
                     tmp57, tmp58, 0, (int32_t)11, tmp388);

  uint64_t *tmp392 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  // ScaleUp4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp357,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp388, tmp357,
          tmp392);

  uint64_t *tmp395 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp392, tmp395,
        (int32_t)11, 1);

  uint64_t *tmp398 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp395, tmp61, tmp398);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp398,
  // (int32_t)11);

  uint64_t *tmp401 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp398,
                   tmp62, tmp401);

  uint64_t *tmp408 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp401,
                     tmp63, tmp64, 0, (int32_t)11, tmp408);

  uint64_t *tmp412 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp408, tmp412,
        (int32_t)11, 1);

  uint64_t *tmp415 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)16, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp412, tmp67, tmp415);
  // ScaleDown4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp415,
  // (int32_t)11);

  uint64_t *tmp419 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  MatAddBroadCast4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp415,
                   tmp68, tmp419);

  uint64_t *tmp426 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  FusedBatchNorm4411((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp419,
                     tmp69, tmp70, 0, (int32_t)11, tmp426);

  uint64_t *tmp430 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  // ScaleUp4( (int32_t)1,  (int32_t)32,  (int32_t)32,  (int32_t)16, tmp395,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp426, tmp395,
          tmp430);

  uint64_t *tmp433 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, tmp430, tmp433,
        (int32_t)11, 1);

  uint64_t *tmp436 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)0, (int32_t)1, (int32_t)0,
                (int32_t)1, (int32_t)2, (int32_t)2, tmp433, tmp73, tmp436);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp436,
  // (int32_t)11);

  uint64_t *tmp439 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp436,
                   tmp74, tmp439);

  uint64_t *tmp446 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp439,
                     tmp75, tmp76, 0, (int32_t)11, tmp446);

  uint64_t *tmp450 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp446, tmp450,
        (int32_t)11, 1);

  uint64_t *tmp453 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp450, tmp79, tmp453);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp453,
  // (int32_t)11);

  uint64_t *tmp457 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp453,
                   tmp80, tmp457);

  uint64_t *tmp464 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp457,
                     tmp81, tmp82, 0, (int32_t)11, tmp464);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp464,
  // (int32_t)11);

  uint64_t *tmp469 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)16, (int32_t)1,
                (int32_t)1, (int32_t)32, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)2, (int32_t)2, tmp433, tmp85, tmp469);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp469,
  // (int32_t)11);

  uint64_t *tmp473 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp469,
                   tmp86, tmp473);

  uint64_t *tmp480 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp473,
                     tmp87, tmp88, 0, (int32_t)11, tmp480);

  uint64_t *tmp484 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  // ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp464,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp464, tmp480,
          tmp484);

  uint64_t *tmp487 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp484, tmp487,
        (int32_t)11, 1);

  uint64_t *tmp490 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp487, tmp91, tmp490);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp490,
  // (int32_t)11);

  uint64_t *tmp493 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp490,
                   tmp92, tmp493);

  uint64_t *tmp500 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp493,
                     tmp93, tmp94, 0, (int32_t)11, tmp500);

  uint64_t *tmp504 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp500, tmp504,
        (int32_t)11, 1);

  uint64_t *tmp507 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp504, tmp97, tmp507);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp507,
  // (int32_t)11);

  uint64_t *tmp511 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp507,
                   tmp98, tmp511);

  uint64_t *tmp518 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp511,
                     tmp99, tmp100, 0, (int32_t)11, tmp518);

  uint64_t *tmp522 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  // ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp487,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp518, tmp487,
          tmp522);

  uint64_t *tmp525 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp522, tmp525,
        (int32_t)11, 1);

  uint64_t *tmp528 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp525, tmp103, tmp528);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp528,
  // (int32_t)11);

  uint64_t *tmp531 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp528,
                   tmp104, tmp531);

  uint64_t *tmp538 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp531,
                     tmp105, tmp106, 0, (int32_t)11, tmp538);

  uint64_t *tmp542 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp538, tmp542,
        (int32_t)11, 1);

  uint64_t *tmp545 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp542, tmp109, tmp545);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp545,
  // (int32_t)11);

  uint64_t *tmp549 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp545,
                   tmp110, tmp549);

  uint64_t *tmp556 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp549,
                     tmp111, tmp112, 0, (int32_t)11, tmp556);

  uint64_t *tmp560 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  // ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp525,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp556, tmp525,
          tmp560);

  uint64_t *tmp563 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp560, tmp563,
        (int32_t)11, 1);

  uint64_t *tmp566 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp563, tmp115, tmp566);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp566,
  // (int32_t)11);

  uint64_t *tmp569 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp566,
                   tmp116, tmp569);

  uint64_t *tmp576 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp569,
                     tmp117, tmp118, 0, (int32_t)11, tmp576);

  uint64_t *tmp580 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp576, tmp580,
        (int32_t)11, 1);

  uint64_t *tmp583 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp580, tmp121, tmp583);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp583,
  // (int32_t)11);

  uint64_t *tmp587 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp583,
                   tmp122, tmp587);

  uint64_t *tmp594 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp587,
                     tmp123, tmp124, 0, (int32_t)11, tmp594);

  uint64_t *tmp598 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  // ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp563,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp594, tmp563,
          tmp598);

  uint64_t *tmp601 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp598, tmp601,
        (int32_t)11, 1);

  uint64_t *tmp604 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp601, tmp127, tmp604);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp604,
  // (int32_t)11);

  uint64_t *tmp607 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp604,
                   tmp128, tmp607);

  uint64_t *tmp614 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp607,
                     tmp129, tmp130, 0, (int32_t)11, tmp614);

  uint64_t *tmp618 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp614, tmp618,
        (int32_t)11, 1);

  uint64_t *tmp621 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)32, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp618, tmp133, tmp621);
  // ScaleDown4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp621,
  // (int32_t)11);

  uint64_t *tmp625 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  MatAddBroadCast4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp621,
                   tmp134, tmp625);

  uint64_t *tmp632 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  FusedBatchNorm4411((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp625,
                     tmp135, tmp136, 0, (int32_t)11, tmp632);

  uint64_t *tmp636 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  // ScaleUp4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)32, tmp601,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp632, tmp601,
          tmp636);

  uint64_t *tmp639 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, tmp636, tmp639,
        (int32_t)11, 1);

  uint64_t *tmp642 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)0, (int32_t)1, (int32_t)0,
                (int32_t)1, (int32_t)2, (int32_t)2, tmp639, tmp139, tmp642);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp642,
  // (int32_t)11);

  uint64_t *tmp645 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp642,
                   tmp140, tmp645);

  uint64_t *tmp652 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp645,
                     tmp141, tmp142, 0, (int32_t)11, tmp652);

  uint64_t *tmp656 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp652, tmp656,
        (int32_t)11, 1);

  uint64_t *tmp659 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp656, tmp145, tmp659);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp659,
  // (int32_t)11);

  uint64_t *tmp663 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp659,
                   tmp146, tmp663);

  uint64_t *tmp670 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp663,
                     tmp147, tmp148, 0, (int32_t)11, tmp670);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp670,
  // (int32_t)11);

  uint64_t *tmp675 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)32, (int32_t)1,
                (int32_t)1, (int32_t)64, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)2, (int32_t)2, tmp639, tmp151, tmp675);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp675,
  // (int32_t)11);

  uint64_t *tmp679 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp675,
                   tmp152, tmp679);

  uint64_t *tmp686 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp679,
                     tmp153, tmp154, 0, (int32_t)11, tmp686);

  uint64_t *tmp690 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  // ScaleUp4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp670,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp670, tmp686,
          tmp690);

  uint64_t *tmp693 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp690, tmp693,
        (int32_t)11, 1);

  uint64_t *tmp696 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp693, tmp157, tmp696);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp696,
  // (int32_t)11);

  uint64_t *tmp699 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp696,
                   tmp158, tmp699);

  uint64_t *tmp706 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp699,
                     tmp159, tmp160, 0, (int32_t)11, tmp706);

  uint64_t *tmp710 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp706, tmp710,
        (int32_t)11, 1);

  uint64_t *tmp713 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp710, tmp163, tmp713);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp713,
  // (int32_t)11);

  uint64_t *tmp717 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp713,
                   tmp164, tmp717);

  uint64_t *tmp724 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp717,
                     tmp165, tmp166, 0, (int32_t)11, tmp724);

  uint64_t *tmp728 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  // ScaleUp4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp693,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp724, tmp693,
          tmp728);

  uint64_t *tmp731 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp728, tmp731,
        (int32_t)11, 1);

  uint64_t *tmp734 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp731, tmp169, tmp734);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp734,
  // (int32_t)11);

  uint64_t *tmp737 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp734,
                   tmp170, tmp737);

  uint64_t *tmp744 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp737,
                     tmp171, tmp172, 0, (int32_t)11, tmp744);

  uint64_t *tmp748 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp744, tmp748,
        (int32_t)11, 1);

  uint64_t *tmp751 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp748, tmp175, tmp751);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp751,
  // (int32_t)11);

  uint64_t *tmp755 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp751,
                   tmp176, tmp755);

  uint64_t *tmp762 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp755,
                     tmp177, tmp178, 0, (int32_t)11, tmp762);

  uint64_t *tmp766 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  // ScaleUp4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp731,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp762, tmp731,
          tmp766);

  uint64_t *tmp769 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp766, tmp769,
        (int32_t)11, 1);

  uint64_t *tmp772 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp769, tmp181, tmp772);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp772,
  // (int32_t)11);

  uint64_t *tmp775 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp772,
                   tmp182, tmp775);

  uint64_t *tmp782 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp775,
                     tmp183, tmp184, 0, (int32_t)11, tmp782);

  uint64_t *tmp786 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp782, tmp786,
        (int32_t)11, 1);

  uint64_t *tmp789 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp786, tmp187, tmp789);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp789,
  // (int32_t)11);

  uint64_t *tmp793 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp789,
                   tmp188, tmp793);

  uint64_t *tmp800 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp793,
                     tmp189, tmp190, 0, (int32_t)11, tmp800);

  uint64_t *tmp804 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  // ScaleUp4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp769,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp800, tmp769,
          tmp804);

  uint64_t *tmp807 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp804, tmp807,
        (int32_t)11, 1);

  uint64_t *tmp810 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp807, tmp193, tmp810);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp810,
  // (int32_t)11);

  uint64_t *tmp813 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp810,
                   tmp194, tmp813);

  uint64_t *tmp820 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp813,
                     tmp195, tmp196, 0, (int32_t)11, tmp820);

  uint64_t *tmp824 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp820, tmp824,
        (int32_t)11, 1);

  uint64_t *tmp827 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp824, tmp199, tmp827);
  // ScaleDown4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp827,
  // (int32_t)11);

  uint64_t *tmp831 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  MatAddBroadCast4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp827,
                   tmp200, tmp831);

  uint64_t *tmp838 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  FusedBatchNorm4411((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp831,
                     tmp201, tmp202, 0, (int32_t)11, tmp838);

  uint64_t *tmp842 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  // ScaleUp4( (int32_t)1,  (int32_t)8,  (int32_t)8,  (int32_t)64, tmp807,
  // (int32_t)11);
  MatAdd4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp838, tmp807,
          tmp842);

  uint64_t *tmp845 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp842, tmp845,
        (int32_t)11, 1);

  uint64_t *tmp847 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64);
  AvgPool((int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)8,
          (int32_t)8, (int32_t)0, (int32_t)0, (int32_t)0, (int32_t)0,
          (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)8, (int32_t)8,
          (int32_t)64, tmp845, tmp847);

  uint64_t *tmp849 = make_array<uint64_t>((int32_t)4);

  int64_t *tmp850 = make_array<int64_t>((int32_t)1);
  CreateTensor1((int32_t)1, (int32_t)0, tmp850);

  int64_t *tmp851 = make_array<int64_t>((int32_t)1);
  CreateTensor1((int32_t)1, (int32_t)1, tmp851);

  int64_t *tmp852 = make_array<int64_t>((int32_t)1);
  CreateTensor1((int32_t)1, (int32_t)1, tmp852);

  uint64_t *tmp855 = make_array<uint64_t>((int32_t)1, (int32_t)64);

  int32_t i5;

  int32_t i4;

  int32_t i3;

  int32_t i2;

  int32_t i1;

  int32_t i0;
  i0 = (int32_t)0;
  i1 = (int32_t)0;
  i2 = (int32_t)0;
  i3 = (int32_t)0;
  for (uint32_t i4 = (int32_t)0; i4 < (int32_t)1; i4++) {
    for (uint32_t i5 = (int32_t)0; i5 < (int32_t)64; i5++) {
      Arr2DIdxRowM(tmp855, (int32_t)1, (int32_t)64, i4, i5) =
          Arr4DIdxRowM(tmp847, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)64,
                       i0, i1, i2, i3);
      i3 = (i3 + (int32_t)1);
      if ((i3 == (int32_t)64)) {
        i3 = (int32_t)0;
        i2 = (i2 + (int32_t)1);
        if ((i2 == (int32_t)1)) {
          i2 = (int32_t)0;
          i1 = (i1 + (int32_t)1);
          if ((i1 == (int32_t)1)) {
            i1 = (int32_t)0;
            i0 = (i0 + (int32_t)1);
          }
        }
      }
    }
  }

  uint64_t *tmp858 = make_array<uint64_t>((int32_t)1, (int32_t)100);
  MatMul2D((int32_t)1, (int32_t)64, (int32_t)100, tmp855, tmp205, tmp858,
           false);

  uint64_t *tmp862 = make_array<uint64_t>((int32_t)1, (int32_t)100);
  MatAddBroadCast2((int32_t)1, (int32_t)100, tmp858, tmp206, tmp862);
  EndComputation();
  for (uint32_t i0 = (uint32_t)0; i0 < (int32_t)1; i0++) {
    for (uint32_t i1 = (uint32_t)0; i1 < (int32_t)100; i1++) {
      cout << (funcReconstruct2PCCons(
                  Arr2DIdxRowM(tmp862, (int32_t)1, (int32_t)100, i0, i1), 2))
           << endl;
    }
  }
}
