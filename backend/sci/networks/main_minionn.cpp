/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#define HACKY_RUN
// DISCLAIMER: These networks are just for comparative purposes
#include "library_fixed.h"
#include <iostream>
using namespace std;

int party = 0;
int port = 32000;
string address = "127.0.0.1";
int num_threads = 4;
int32_t bitlength = 41;

void MatAddBroadCast2(int64_t s1, int64_t s2, uint64_t *A, uint64_t *B,
                      uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          SecretAdd(Arr2DIdxRowM(A, s1, s2, i1, i2), Arr1DIdxRowM(B, s2, i2));
    }
  }
}

void MatAdd2(int64_t s1, int64_t s2, uint64_t *A, uint64_t *B,
             uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) = SecretAdd(
          Arr2DIdxRowM(A, s1, s2, i1, i2), Arr2DIdxRowM(B, s1, s2, i1, i2));
    }
  }
}

void MatAddBroadCast4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr4DIdxRowM(A, s1, s2, s3, s4, i1, i2, i3, i4),
                        Arr1DIdxRowM(B, s4, i4));
        }
      }
    }
  }
}

void MatAdd4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *A,
             uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr4DIdxRowM(A, s1, s2, s3, s4, i1, i2, i3, i4),
                        Arr4DIdxRowM(B, s1, s2, s3, s4, i1, i2, i3, i4));
        }
      }
    }
  }
}

void MatAddBroadCast5(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      int64_t s5, uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(
                    Arr5DIdxRowM(A, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5),
                    Arr1DIdxRowM(B, s5, i5));
          }
        }
      }
    }
  }
}

void MatAdd5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
             uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(
                    Arr5DIdxRowM(A, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5),
                    Arr5DIdxRowM(B, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5));
          }
        }
      }
    }
  }
}

void CreateTensor1(int64_t s1, int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(arr, s1, i1) = val;
  }
}

void CreateTensor2(int64_t s1, int64_t s2, int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(arr, s1, s2, i1, i2) = val;
    }
  }
}

void CreateTensor3(int64_t s1, int64_t s2, int64_t s3, int64_t val,
                   int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) = val;
      }
    }
  }
}

void CreateTensor4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t val,
                   int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) = val;
        }
      }
    }
  }
}

void CreateTensor5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                   int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(arr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) = val;
          }
        }
      }
    }
  }
}

void CopyTensor1(int64_t s1, uint64_t *targetArr, uint64_t *fromArr,
                 uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(targetArr, s1, i1) = Arr1DIdxRowM(fromArr, s1, i1);
  }
}

void CopyTensor2(int64_t s1, int64_t s2, uint64_t *targetArr, uint64_t *fromArr,
                 uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(targetArr, s1, s2, i1, i2) =
          Arr2DIdxRowM(fromArr, s1, s2, i1, i2);
    }
  }
}

void CopyTensor3(int64_t s1, int64_t s2, int64_t s3, uint64_t *targetArr,
                 uint64_t *fromArr, uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(targetArr, s1, s2, s3, i1, i2, i3) =
            Arr3DIdxRowM(fromArr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
}

void CopyTensor4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                 uint64_t *targetArr, uint64_t *fromArr, uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(targetArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr4DIdxRowM(fromArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void CreateIdentity11(int64_t s1, uint64_t *fromArr, uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(newArr, s1, i1) = Arr1DIdxRowM(fromArr, s1, i1);
  }
}

void CreateIdentity22(int64_t s1, int64_t s2, uint64_t *fromArr,
                      uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(newArr, s1, s2, i1, i2) =
          Arr2DIdxRowM(fromArr, s1, s2, i1, i2);
    }
  }
}

void CreateIdentity33(int64_t s1, int64_t s2, int64_t s3, uint64_t *fromArr,
                      uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(newArr, s1, s2, s3, i1, i2, i3) =
            Arr3DIdxRowM(fromArr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
}

void CreateIdentity44(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      uint64_t *fromArr, uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(newArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr4DIdxRowM(fromArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void CreateCopy2211(int64_t s1, int64_t s2, int64_t inps1, int64_t inps2,
                    uint64_t *inArr, int64_t perDimSize, int64_t *beginIdx,
                    int64_t *sizeIdx, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      Arr2DIdxRowM(outArr, s1, s2, i, j) =
          Arr2DIdxRowM(inArr, inps1, inps2,
                       (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)0) + i),
                       (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)1) + j));
    }
  }
}

void CreateCopy5511(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                    int64_t inps1, int64_t inps2, int64_t inps3, int64_t inps4,
                    int64_t inps5, uint64_t *inArr, int64_t perDimSize,
                    int64_t *beginIdx, int64_t *sizeIdx, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          for (uint64_t m = (int32_t)0; m < s5; m++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                Arr5DIdxRowM(
                    inArr, inps1, inps2, inps3, inps4, inps5,
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)0) + i),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)1) + j),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)2) + k),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)3) + l),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)4) + m));
          }
        }
      }
    }
  }
}

void Concat2T222(int64_t s1, int64_t s2, int64_t inp1s1, int64_t inp1s2,
                 uint64_t *inp1, int64_t inp2s1, int64_t inp2s2, uint64_t *inp2,
                 int64_t axis, uint64_t *outp) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      if ((axis == (int32_t)0)) {
        if ((i1 < inp1s1)) {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp1, inp1s1, inp1s2, i1, i2);
        } else {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp2, inp2s1, inp2s2, (i1 - inp1s1), i2);
        }
      } else {
        if ((i2 < inp1s2)) {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp1, inp1s1, inp1s2, i1, i2);
        } else {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp2, inp2s1, inp2s2, i1, (i2 - inp1s2));
        }
      }
    }
  }
}

void Concat2T444(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t inp1s1,
                 int64_t inp1s2, int64_t inp1s3, int64_t inp1s4, uint64_t *inp1,
                 int64_t inp2s1, int64_t inp2s2, int64_t inp2s3, int64_t inp2s4,
                 uint64_t *inp2, int64_t axis, uint64_t *outp) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          if ((axis == (int32_t)0)) {
            if ((i1 < inp1s1)) {
              Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) = Arr4DIdxRowM(
                  inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2, i3, i4);
            } else {
              Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                  Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4,
                               (i1 - inp1s1), i2, i3, i4);
            }
          } else {
            if ((axis == (int32_t)1)) {
              if ((i2 < inp1s2)) {
                Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                    Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                 i3, i4);
              } else {
                Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                    Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1,
                                 (i2 - inp1s2), i3, i4);
              }
            } else {
              if ((axis == (int32_t)2)) {
                if ((i3 < inp1s3)) {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                   i3, i4);
                } else {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1, i2,
                                   (i3 - inp1s3), i4);
                }
              } else {
                if ((i4 < inp1s4)) {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                   i3, i4);
                } else {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1, i2,
                                   i3, (i4 - inp1s4));
                }
              }
            }
          }
        }
      }
    }
  }
}

void Split44(int64_t O1, int64_t O2, int64_t O3, int64_t O4, int64_t I1,
             int64_t I2, int64_t I3, int64_t I4, uint64_t *inp, int64_t axis,
             int64_t curCount, int64_t total, uint64_t *out) {
  for (uint64_t o1 = (int32_t)0; o1 < O1; o1++) {
    for (uint64_t o2 = (int32_t)0; o2 < O2; o2++) {
      for (uint64_t o3 = (int32_t)0; o3 < O3; o3++) {
        for (uint64_t o4 = (int32_t)0; o4 < O4; o4++) {

          int64_t i1 = o1;

          int64_t i2 = o2;

          int64_t i3 = o3;

          int64_t i4 = o4;
          if ((axis == (int32_t)0)) {
            i1 = (((I1 / total) * curCount) + o1);
          }
          if ((axis == (int32_t)1)) {
            i2 = (((I2 / total) * curCount) + o2);
          }
          if ((axis == (int32_t)2)) {
            i3 = (((I3 / total) * curCount) + o3);
          }
          if ((axis == (int32_t)3)) {
            i4 = (((I4 / total) * curCount) + o4);
          }
          Arr4DIdxRowM(out, O1, O2, O3, O4, o1, o2, o3, o4) =
              Arr4DIdxRowM(inp, I1, I2, I3, I4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void Conv2DReshapeFilter(int64_t FH, int64_t FW, int64_t CI, int64_t CO,
                         uint64_t *inputArr, uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

          int64_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
          Arr2DIdxRowM(outputArr, CO, ((FH * FW) * CI), co, linIdx) =
              Arr4DIdxRowM(inputArr, FH, FW, CI, CO, fh, fw, ci, co);
        }
      }
    }
  }
}

void Conv2DReshapeMatMulOP(int64_t N, int64_t finalH, int64_t finalW,
                           int64_t CO, uint64_t *inputArr,
                           uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w, co) =
              Arr2DIdxRowM(inputArr, CO, ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void Conv2DReshapeInput(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                        int64_t FW, int64_t zPadHLeft, int64_t zPadHRight,
                        int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                        int64_t strideW, int64_t RRows, int64_t RCols,
                        uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

    int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

      int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = ((int32_t)0);
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= H)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                val = ((int32_t)0);
              } else {
                val = Arr4DIdxRowM(inputArr, N, H, W, CI, n, curPosH, curPosW,
                                   ci);
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CI) + (fw * CI)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + strideW);
      }

      leftTopCornerH = (leftTopCornerH + strideH);
    }
  }
}

void Conv2D(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH, int64_t FW,
            int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
            int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
            int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
            uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = ((FH * FW) * CI);

  int64_t reshapedIPRows = ((FH * FW) * CI);

  int64_t newH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t newW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = ((N * newH) * newW);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
  Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft,
                     zPadWRight, strideH, strideW, reshapedIPRows,
                     reshapedIPCols, inputArr, inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                     int64_t FW, int64_t CO, int64_t zPadHLeft,
                     int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                     int64_t strideH, int64_t strideW, int64_t outH,
                     int64_t outW, int64_t G, uint64_t *inputArr,
                     uint64_t *filterArr, uint64_t *outArr) {

  int64_t GIS = (CI / G);

  int64_t GOS = (CO / G);
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t cog = (int32_t)0; cog < GOS; cog++) {
      for (uint64_t cig = (int32_t)0; cig < GIS; cig++) {
        for (uint64_t g = (int32_t)0; g < G; g++) {
          for (uint64_t h = (int32_t)0; h < outH; h++) {
            for (uint64_t w = (int32_t)0; w < outW; w++) {

              uint64_t val = ((int32_t)0);

              int64_t ci = ((GIS * g) + cig);

              int64_t co = ((GOS * g) + cog);

              int64_t curPosH = ((strideH * h) - zPadHLeft);
              for (uint64_t fh = (int32_t)0; fh < FH; fh++) {

                int64_t curPosW = ((strideW * w) - zPadWLeft);
                for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
                  if (((((curPosH >= (int32_t)0) && (curPosW >= (int32_t)0)) &&
                        (curPosH < H)) &&
                       (curPosW < W))) {
                    val = SecretAdd(
                        val,
                        SecretMult(Arr4DIdxRowM(inputArr, N, H, W, CI, n,
                                                curPosH, curPosW, ci),
                                   Arr4DIdxRowM(filterArr, FH, FW, (CI / G), CO,
                                                fh, fw, (ci / G), co)));
                  }
                  curPosW = (curPosW + (int32_t)1);
                }
                curPosH = (curPosH + (int32_t)1);
              }
              Arr4DIdxRowM(outArr, N, outH, outW, CO, n, h, w, co) = SecretAdd(
                  Arr4DIdxRowM(outArr, N, outH, outW, CO, n, h, w, co), val);
            }
          }
        }
      }
    }
  }
}

void Conv2DLoop(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                int64_t FW, int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
                int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                int64_t strideW, int64_t G, uint64_t *inputArr,
                uint64_t *filterArr, uint64_t *outArr) {

  int64_t outH =
      ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) + (int32_t)1);
  Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft,
                  zPadWRight, strideH, strideW, outH, outW, G, inputArr,
                  filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int64_t FH, int64_t FW, int64_t CI, int64_t CO,
                              int64_t g, int64_t G, uint64_t *inputArr,
                              uint64_t *outputArr) {

  int64_t CIG = (CI / G);

  int64_t COG = (CO / G);

  int64_t startCO = (g * COG);
  for (uint64_t co = (int32_t)0; co < COG; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CIG; ci++) {

          int64_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
          Arr2DIdxRowM(outputArr, (CO / G), ((FH * FW) * (CI / G)), co,
                       linIdx) = Arr4DIdxRowM(inputArr, FH, FW, (CI / G), CO,
                                              fh, fw, ci, (co + startCO));
        }
      }
    }
  }
}

void Conv2DReshapeMatMulOPGroup(int64_t N, int64_t finalH, int64_t finalW,
                                int64_t CO, int64_t g, int64_t G,
                                uint64_t *inputArr, uint64_t *outputArr) {

  int64_t COG = (CO / G);

  int64_t startCO = (g * COG);
  for (uint64_t co = (int32_t)0; co < COG; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w,
                       (co + startCO)) =
              Arr2DIdxRowM(inputArr, (CO / G), ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void Conv2DReshapeInputGroup(int64_t N, int64_t H, int64_t W, int64_t CI,
                             int64_t FH, int64_t FW, int64_t zPadHLeft,
                             int64_t zPadHRight, int64_t zPadWLeft,
                             int64_t zPadWRight, int64_t strideH,
                             int64_t strideW, int64_t g, int64_t G,
                             int64_t RRows, int64_t RCols, uint64_t *inputArr,
                             uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;

  int64_t CIG = (CI / G);
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

    int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

      int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = ((int32_t)0);

            int64_t startCI = (g * CIG);
            for (uint64_t ci = (int32_t)0; ci < CIG; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= H)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                val = ((int32_t)0);
              } else {
                val = Arr4DIdxRowM(inputArr, N, H, W, CI, n, curPosH, curPosW,
                                   (ci + startCI));
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CIG) + (fw * CIG)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + strideW);
      }

      leftTopCornerH = (leftTopCornerH + strideH);
    }
  }
}

void Conv2DGroup(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                 int64_t FW, int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
                 int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                 int64_t strideW, int64_t G, uint64_t *inputArr,
                 uint64_t *filterArr, uint64_t *outArr) {

  int64_t CIG = (CI / G);

  int64_t reshapedFilterRows = (CO / G);

  int64_t reshapedFilterCols = ((FH * FW) * CIG);

  int64_t reshapedIPRows = ((FH * FW) * CIG);

  int64_t outH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = ((N * outH) * outW);
  for (uint64_t g = (int32_t)0; g < G; g++) {

    uint64_t *inputReshaped =
        make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

    uint64_t *matmulOP =
        make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);

    uint64_t *filterReshaped =
        make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);
    Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
    Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight,
                            zPadWLeft, zPadWRight, strideH, strideW, g, G,
                            reshapedIPRows, reshapedIPCols, inputArr,
                            inputReshaped);
    MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
             filterReshaped, inputReshaped, matmulOP, 1);
    Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
    ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
    ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
    ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  }
}

void Conv3DReshapeFilter(int64_t FD, int64_t FH, int64_t FW, int64_t CI,
                         int64_t CO, uint64_t *inputArr, uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
      for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
        for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
          for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

            int64_t linIdx =
                ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) +
                 ci);
            Arr2DIdxRowM(outputArr, CO, (((FD * FH) * FW) * CI), co, linIdx) =
                Arr5DIdxRowM(inputArr, FD, FH, FW, CI, CO, fd, fh, fw, ci, co);
          }
        }
      }
    }
  }
}

void Conv3DReshapeMatMulOP(int64_t N, int64_t finalD, int64_t finalH,
                           int64_t finalW, int64_t CO, uint64_t *inputArr,
                           uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t d = (int32_t)0; d < finalD; d++) {
        for (uint64_t h = (int32_t)0; h < finalH; h++) {
          for (uint64_t w = (int32_t)0; w < finalW; w++) {
            Arr5DIdxRowM(outputArr, N, finalD, finalH, finalW, CO, n, d, h, w,
                         co) =
                Arr2DIdxRowM(inputArr, CO, (((N * finalD) * finalH) * finalW),
                             co,
                             ((((((n * finalD) * finalH) * finalW) +
                                ((d * finalH) * finalW)) +
                               (h * finalW)) +
                              w));
          }
        }
      }
    }
  }
}

void Conv3DReshapeInput(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                        int64_t FD, int64_t FH, int64_t FW, int64_t zPadDLeft,
                        int64_t zPadDRight, int64_t zPadHLeft,
                        int64_t zPadHRight, int64_t zPadWLeft,
                        int64_t zPadWRight, int64_t strideD, int64_t strideH,
                        int64_t strideW, int64_t RRows, int64_t RCols,
                        uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerD = ((int32_t)0 - zPadDLeft);

    int64_t extremeRightBottomCornerD = ((D - (int32_t)1) + zPadDRight);
    while (
        (((leftTopCornerD + FD) - (int32_t)1) <= extremeRightBottomCornerD)) {

      int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

      int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
      while (
          (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

        int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

        int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
        while ((((leftTopCornerW + FW) - (int32_t)1) <=
                extremeRightBottomCornerW)) {
          for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
            for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
              for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

                int64_t curPosD = (leftTopCornerD + fd);

                int64_t curPosH = (leftTopCornerH + fh);

                int64_t curPosW = (leftTopCornerW + fw);

                uint64_t val = ((int32_t)0);
                for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
                  if (((((curPosD < (int32_t)0) || (curPosD >= D)) ||
                        ((curPosH < (int32_t)0) || (curPosH >= H))) ||
                       ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                    val = ((int32_t)0);
                  } else {
                    val = Arr5DIdxRowM(inputArr, N, D, H, W, CI, n, curPosD,
                                       curPosH, curPosW, ci);
                  }
                  Arr2DIdxRowM(outputArr, RRows, RCols,
                               ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) +
                                 (fw * CI)) +
                                ci),
                               linIdxFilterMult) = val;
                }
              }
            }
          }
          linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
          leftTopCornerW = (leftTopCornerW + strideW);
        }

        leftTopCornerH = (leftTopCornerH + strideH);
      }

      leftTopCornerD = (leftTopCornerD + strideD);
    }
  }
}

void Conv3D(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI, int64_t FD,
            int64_t FH, int64_t FW, int64_t CO, int64_t zPadDLeft,
            int64_t zPadDRight, int64_t zPadHLeft, int64_t zPadHRight,
            int64_t zPadWLeft, int64_t zPadWRight, int64_t strideD,
            int64_t strideH, int64_t strideW, uint64_t *inputArr,
            uint64_t *filterArr, uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = (((FD * FH) * FW) * CI);

  int64_t reshapedIPRows = (((FD * FH) * FW) * CI);

  int64_t newD =
      ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) + (int32_t)1);

  int64_t newH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t newW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = (((N * newD) * newH) * newW);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
  Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight,
                     zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD,
                     strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr,
                     inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                     int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                     int64_t zPadDLeft, int64_t zPadDRight, int64_t zPadHLeft,
                     int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                     int64_t strideD, int64_t strideH, int64_t strideW,
                     int64_t outD, int64_t outH, int64_t outW,
                     uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t co = (int32_t)0; co < CO; co++) {
      for (uint64_t d = (int32_t)0; d < outD; d++) {
        for (uint64_t h = (int32_t)0; h < outH; h++) {
          for (uint64_t w = (int32_t)0; w < outW; w++) {
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

              uint64_t val = ((int32_t)0);
              for (uint64_t fd = (d * strideD); fd < ((d * strideD) + FD);
                   fd++) {
                for (uint64_t fh = (h * strideH); fh < ((h * strideH) + FH);
                     fh++) {
                  for (uint64_t fw = (w * strideW); fw < ((w * strideW) + FW);
                       fw++) {

                    int64_t curPosD = (fd - zPadDLeft);

                    int64_t curPosH = (fh - zPadHLeft);

                    int64_t curPosW = (fw - zPadWLeft);
                    if (((((((curPosD >= (int32_t)0) &&
                             (curPosH >= (int32_t)0)) &&
                            (curPosW >= (int32_t)0)) &&
                           (curPosD < D)) &&
                          (curPosH < H)) &&
                         (curPosW < W))) {

                      int64_t curFilterPosD = (fd - (d * strideD));

                      int64_t curFilterPosH = (fh - (h * strideH));

                      int64_t curFilterPosW = (fw - (w * strideW));
                      val = SecretAdd(
                          val, SecretMult(
                                   Arr5DIdxRowM(inputArr, N, D, H, W, CI, n,
                                                curPosD, curPosH, curPosW, ci),
                                   Arr5DIdxRowM(filterArr, FD, FH, FW, CI, CO,
                                                curFilterPosD, curFilterPosH,
                                                curFilterPosW, ci, co)));
                    }
                  }
                }
              }
              Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d, h, w, co) =
                  SecretAdd(Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d,
                                         h, w, co),
                            val);
            }
          }
        }
      }
    }
  }
}

void Conv3DLoop(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                int64_t zPadDLeft, int64_t zPadDRight, int64_t zPadHLeft,
                int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                int64_t strideD, int64_t strideH, int64_t strideW,
                uint64_t *inputArr, uint64_t *filterArr, uint64_t *outArr) {

  int64_t outD =
      ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) + (int32_t)1);

  int64_t outH =
      ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) + (int32_t)1);
  Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight,
                  zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD,
                  strideH, strideW, outD, outH, outW, inputArr, filterArr,
                  outArr);
}

void ConvTranspose2DReshapeMatMulOP(int64_t N, int64_t finalH, int64_t finalW,
                                    int64_t CO, uint64_t *inputArr,
                                    uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w, co) =
              Arr2DIdxRowM(inputArr, CO, ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void ConvTranspose2DReshapeFilter(int64_t FH, int64_t FW, int64_t CO,
                                  int64_t CI, uint64_t *inputArr,
                                  uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

          int64_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
          Arr2DIdxRowM(outputArr, CO, ((FH * FW) * CI), co, linIdx) =
              Arr4DIdxRowM(inputArr, FH, FW, CO, CI, ((FH - (int32_t)1) - fh),
                           ((FW - (int32_t)1) - fw), co, ci);
        }
      }
    }
  }
}

void ConvTranspose2DReshapeInput(int64_t N, int64_t HPrime, int64_t WPrime,
                                 int64_t CI, int64_t FH, int64_t FW,
                                 int64_t zPadTrHLeft, int64_t zPadTrHRight,
                                 int64_t zPadTrWLeft, int64_t zPadTrWRight,
                                 int64_t strideH, int64_t strideW,
                                 int64_t RRows, int64_t RCols,
                                 uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadTrHLeft);

    int64_t HPrimeTilde =
        (HPrime + ((HPrime - (int32_t)1) * (strideH - (int32_t)1)));

    int64_t extremeRightBottomCornerH =
        ((HPrimeTilde - (int32_t)1) + zPadTrHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadTrWLeft);

      int64_t WPrimeTilde =
          (WPrime + ((WPrime - (int32_t)1) * (strideW - (int32_t)1)));

      int64_t extremeRightBottomCornerW =
          ((WPrimeTilde - (int32_t)1) + zPadTrWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = ((int32_t)0);
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= HPrimeTilde)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= WPrimeTilde)))) {
                val = ((int32_t)0);
              } else {
                if ((((curPosH % strideH) == (int32_t)0) &&
                     ((curPosW % strideW) == (int32_t)0))) {

                  int64_t idxInputH = (curPosH / strideH);

                  int64_t idxInputW = (curPosW / strideW);
                  val = Arr4DIdxRowM(inputArr, N, HPrime, WPrime, CI, n,
                                     idxInputH, idxInputW, ci);
                } else {
                  val = ((int32_t)0);
                }
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CI) + (fw * CI)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + (int32_t)1);
      }

      leftTopCornerH = (leftTopCornerH + (int32_t)1);
    }
  }
}

void ConvTranspose2D(int64_t N, int64_t HPrime, int64_t WPrime, int64_t CI,
                     int64_t FH, int64_t FW, int64_t CO, int64_t H, int64_t W,
                     int64_t zPadTrHLeft, int64_t zPadTrHRight,
                     int64_t zPadTrWLeft, int64_t zPadTrWRight, int64_t strideH,
                     int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = ((FH * FW) * CI);

  int64_t reshapedIPRows = ((FH * FW) * CI);

  int64_t reshapedIPCols = ((N * H) * W);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
  ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft,
                              zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH,
                              strideW, reshapedIPRows, reshapedIPCols, inputArr,
                              inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int64_t FD, int64_t FH, int64_t FW,
                                  int64_t CO, int64_t CI, uint64_t *inputArr,
                                  uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
      for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
        for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
          for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

            int64_t linIdx =
                ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) +
                 ci);
            Arr2DIdxRowM(outputArr, CO, (((FD * FH) * FW) * CI), co, linIdx) =
                Arr5DIdxRowM(inputArr, FD, FH, FW, CO, CI,
                             ((FD - (int32_t)1) - fd), ((FH - (int32_t)1) - fh),
                             ((FW - (int32_t)1) - fw), co, ci);
          }
        }
      }
    }
  }
}

void ConvTranspose3DReshapeInput(int64_t N, int64_t DPrime, int64_t HPrime,
                                 int64_t WPrime, int64_t CI, int64_t FD,
                                 int64_t FH, int64_t FW, int64_t zPadTrDLeft,
                                 int64_t zPadTrDRight, int64_t zPadTrHLeft,
                                 int64_t zPadTrHRight, int64_t zPadTrWLeft,
                                 int64_t zPadTrWRight, int64_t strideD,
                                 int64_t strideH, int64_t strideW,
                                 int64_t RRows, int64_t RCols,
                                 uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerD = ((int32_t)0 - zPadTrDLeft);

    int64_t DPrimeTilde =
        (DPrime + ((DPrime - (int32_t)1) * (strideD - (int32_t)1)));

    int64_t extremeRightBottomCornerD =
        ((DPrimeTilde - (int32_t)1) + zPadTrDRight);
    while (
        (((leftTopCornerD + FD) - (int32_t)1) <= extremeRightBottomCornerD)) {

      int64_t leftTopCornerH = ((int32_t)0 - zPadTrHLeft);

      int64_t HPrimeTilde =
          (HPrime + ((HPrime - (int32_t)1) * (strideH - (int32_t)1)));

      int64_t extremeRightBottomCornerH =
          ((HPrimeTilde - (int32_t)1) + zPadTrHRight);
      while (
          (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

        int64_t leftTopCornerW = ((int32_t)0 - zPadTrWLeft);

        int64_t WPrimeTilde =
            (WPrime + ((WPrime - (int32_t)1) * (strideW - (int32_t)1)));

        int64_t extremeRightBottomCornerW =
            ((WPrimeTilde - (int32_t)1) + zPadTrWRight);
        while ((((leftTopCornerW + FW) - (int32_t)1) <=
                extremeRightBottomCornerW)) {
          for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
            for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
              for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

                int64_t curPosD = (leftTopCornerD + fd);

                int64_t curPosH = (leftTopCornerH + fh);

                int64_t curPosW = (leftTopCornerW + fw);

                uint64_t val = ((int32_t)0);
                for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
                  if (((((curPosD < (int32_t)0) || (curPosD >= DPrimeTilde)) ||
                        ((curPosH < (int32_t)0) || (curPosH >= HPrimeTilde))) ||
                       ((curPosW < (int32_t)0) || (curPosW >= WPrimeTilde)))) {
                    val = ((int32_t)0);
                  } else {
                    if (((((curPosD % strideD) == (int32_t)0) &&
                          ((curPosH % strideH) == (int32_t)0)) &&
                         ((curPosW % strideW) == (int32_t)0))) {

                      int64_t idxInputD = (curPosD / strideD);

                      int64_t idxInputH = (curPosH / strideH);

                      int64_t idxInputW = (curPosW / strideW);
                      val =
                          Arr5DIdxRowM(inputArr, N, DPrime, HPrime, WPrime, CI,
                                       n, idxInputD, idxInputH, idxInputW, ci);
                    } else {
                      val = ((int32_t)0);
                    }
                  }
                  Arr2DIdxRowM(outputArr, RRows, RCols,
                               ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) +
                                 (fw * CI)) +
                                ci),
                               linIdxFilterMult) = val;
                }
              }
            }
          }
          linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
          leftTopCornerW = (leftTopCornerW + (int32_t)1);
        }

        leftTopCornerH = (leftTopCornerH + (int32_t)1);
      }

      leftTopCornerD = (leftTopCornerD + (int32_t)1);
    }
  }
}

void ConvTranspose3D(int64_t N, int64_t DPrime, int64_t HPrime, int64_t WPrime,
                     int64_t CI, int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                     int64_t D, int64_t H, int64_t W, int64_t zPadTrDLeft,
                     int64_t zPadTrDRight, int64_t zPadTrHLeft,
                     int64_t zPadTrHRight, int64_t zPadTrWLeft,
                     int64_t zPadTrWRight, int64_t strideD, int64_t strideH,
                     int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = (((FD * FH) * FW) * CI);

  int64_t reshapedIPRows = (((FD * FH) * FW) * CI);

  int64_t reshapedIPCols = (((N * D) * H) * W);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
  ConvTranspose3DReshapeInput(
      N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight,
      zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH,
      strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int64_t N, int64_t D, int64_t H, int64_t W,
                              int64_t CI, int64_t FD, int64_t FH, int64_t FW,
                              int64_t CO, int64_t zPadDLeft, int64_t zPadDRight,
                              int64_t zPadHLeft, int64_t zPadHRight,
                              int64_t zPadWLeft, int64_t zPadWRight,
                              int64_t strideD, int64_t strideH, int64_t strideW,
                              int64_t outD, int64_t outH, int64_t outW,
                              uint64_t *inputArr, uint64_t *filterArr,
                              uint64_t *outArr) {
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t co = (int32_t)0; co < CO; co++) {
      for (uint64_t d = (int32_t)0; d < outD; d++) {
        for (uint64_t h = (int32_t)0; h < outH; h++) {
          for (uint64_t w = (int32_t)0; w < outW; w++) {
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

              uint64_t val = ((int32_t)0);
              for (uint64_t fd = d; fd < (d + FD); fd++) {
                for (uint64_t fh = h; fh < (h + FH); fh++) {
                  for (uint64_t fw = w; fw < (w + FW); fw++) {

                    int64_t curPosD = ((fd - zPadDLeft) / strideD);

                    int64_t curPosH = ((fh - zPadHLeft) / strideD);

                    int64_t curPosW = ((fw - zPadWLeft) / strideD);
                    if ((((((((((curPosD >= (int32_t)0) &&
                                (curPosH >= (int32_t)0)) &&
                               (curPosW >= (int32_t)0)) &&
                              (curPosD < D)) &&
                             (curPosH < H)) &&
                            (curPosW < W)) &&
                           (((fd - zPadDLeft) % strideD) == (int32_t)0)) &&
                          (((fh - zPadHLeft) % strideH) == (int32_t)0)) &&
                         (((fw - zPadWLeft) % strideW) == (int32_t)0))) {

                      int64_t curFilterPosD = (((FD + d) - fd) - (int32_t)1);

                      int64_t curFilterPosH = (((FH + h) - fh) - (int32_t)1);

                      int64_t curFilterPosW = (((FW + w) - fw) - (int32_t)1);
                      val = SecretAdd(
                          val, SecretMult(
                                   Arr5DIdxRowM(inputArr, N, D, H, W, CI, n,
                                                curPosD, curPosH, curPosW, ci),
                                   Arr5DIdxRowM(filterArr, FD, FH, FW, CO, CI,
                                                curFilterPosD, curFilterPosH,
                                                curFilterPosW, co, ci)));
                    }
                  }
                }
              }
              Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d, h, w, co) =
                  SecretAdd(Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d,
                                         h, w, co),
                            val);
            }
          }
        }
      }
    }
  }
}

void ConvTranspose3DLoop(int64_t N, int64_t DPrime, int64_t HPrime,
                         int64_t WPrime, int64_t CI, int64_t FD, int64_t FH,
                         int64_t FW, int64_t CO, int64_t D, int64_t H,
                         int64_t W, int64_t zPadTrDLeft, int64_t zPadTrDRight,
                         int64_t zPadTrHLeft, int64_t zPadTrHRight,
                         int64_t zPadTrWLeft, int64_t zPadTrWRight,
                         int64_t strideD, int64_t strideH, int64_t strideW,
                         uint64_t *inputArr, uint64_t *filterArr,
                         uint64_t *outArr) {
  ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO,
                           zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight,
                           zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW,
                           D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      Arr2DIdxRowM(outArr, s1, s2, i, j) = Arr2DIdxRowM(inArr, s2, s1, j, i);
    }
  }
}

void Pad442(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t inps1,
            int64_t inps2, int64_t inps3, int64_t inps4, uint64_t *inpArr,
            int64_t pads1, int64_t pads2, int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)0);

  int64_t rbounds1excl =
      (s1 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)1));

  int64_t lbounds2 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)0);

  int64_t rbounds2excl =
      (s2 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)1));

  int64_t lbounds3 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)0);

  int64_t rbounds3excl =
      (s3 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)1));

  int64_t lbounds4 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)0);

  int64_t rbounds4excl =
      (s4 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)1));
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          if (((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                    (j >= lbounds2)) &&
                   (j < rbounds2excl)) &&
                  (k >= lbounds3)) &&
                 (k < rbounds3excl)) &&
                (l >= lbounds4)) &&
               (l < rbounds4excl))) {
            Arr4DIdxRowM(outArr, s1, s2, s3, s4, i, j, k, l) =
                Arr4DIdxRowM(inpArr, inps1, inps2, inps3, inps4,
                             (i - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)0, (int32_t)0)),
                             (j - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)1, (int32_t)0)),
                             (k - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)2, (int32_t)0)),
                             (l - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)3, (int32_t)0)));
          } else {
            Arr4DIdxRowM(outArr, s1, s2, s3, s4, i, j, k, l) = ((int32_t)0);
          }
        }
      }
    }
  }
}

void Pad552(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
            int64_t inps1, int64_t inps2, int64_t inps3, int64_t inps4,
            int64_t inps5, uint64_t *inpArr, int64_t pads1, int64_t pads2,
            int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)0);

  int64_t rbounds1excl =
      (s1 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)1));

  int64_t lbounds2 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)0);

  int64_t rbounds2excl =
      (s2 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)1));

  int64_t lbounds3 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)0);

  int64_t rbounds3excl =
      (s3 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)1));

  int64_t lbounds4 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)0);

  int64_t rbounds4excl =
      (s4 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)1));

  int64_t lbounds5 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)4, (int32_t)0);

  int64_t rbounds5excl =
      (s5 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)4, (int32_t)1));
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          for (uint64_t m = (int32_t)0; m < s5; m++) {
            if (((((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                        (j >= lbounds2)) &&
                       (j < rbounds2excl)) &&
                      (k >= lbounds3)) &&
                     (k < rbounds3excl)) &&
                    (l >= lbounds4)) &&
                   (l < rbounds4excl)) &&
                  (m >= lbounds5)) &&
                 (m < rbounds5excl))) {
              Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                  Arr5DIdxRowM(inpArr, inps1, inps2, inps3, inps4, inps5,
                               (i - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)0, (int32_t)0)),
                               (j - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)1, (int32_t)0)),
                               (k - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)2, (int32_t)0)),
                               (l - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)3, (int32_t)0)),
                               (m - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)4, (int32_t)0)));
            } else {
              Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                  ((int32_t)0);
            }
          }
        }
      }
    }
  }
}

void PadONNX441(int64_t o1, int64_t o2, int64_t o3, int64_t o4, int64_t i1,
                int64_t i2, int64_t i3, int64_t i4, uint64_t *inpArr,
                int64_t pads, int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 = Arr1DIdxRowM(paddings, pads, (int32_t)0);

  int64_t rbounds1excl = (o1 - Arr1DIdxRowM(paddings, pads, (int32_t)4));

  int64_t lbounds2 = Arr1DIdxRowM(paddings, pads, (int32_t)1);

  int64_t rbounds2excl = (o2 - Arr1DIdxRowM(paddings, pads, (int32_t)5));

  int64_t lbounds3 = Arr1DIdxRowM(paddings, pads, (int32_t)2);

  int64_t rbounds3excl = (o3 - Arr1DIdxRowM(paddings, pads, (int32_t)6));

  int64_t lbounds4 = Arr1DIdxRowM(paddings, pads, (int32_t)3);

  int64_t rbounds4excl = (o4 - Arr1DIdxRowM(paddings, pads, (int32_t)7));
  for (uint64_t i = (int32_t)0; i < o1; i++) {
    for (uint64_t j = (int32_t)0; j < o2; j++) {
      for (uint64_t k = (int32_t)0; k < o3; k++) {
        for (uint64_t l = (int32_t)0; l < o4; l++) {
          if (((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                    (j >= lbounds2)) &&
                   (j < rbounds2excl)) &&
                  (k >= lbounds3)) &&
                 (k < rbounds3excl)) &&
                (l >= lbounds4)) &&
               (l < rbounds4excl))) {
            Arr4DIdxRowM(outArr, o1, o2, o3, o4, i, j, k, l) =
                Arr4DIdxRowM(inpArr, i1, i2, i3, i4,
                             (i - Arr1DIdxRowM(paddings, pads, (int32_t)0)),
                             (j - Arr1DIdxRowM(paddings, pads, (int32_t)1)),
                             (k - Arr1DIdxRowM(paddings, pads, (int32_t)2)),
                             (l - Arr1DIdxRowM(paddings, pads, (int32_t)3)));
          } else {
            Arr4DIdxRowM(outArr, o1, o2, o3, o4, i, j, k, l) = ((int32_t)0);
          }
        }
      }
    }
  }
}

void Squeeze24(int64_t s1, int64_t s2, int64_t dim1, int64_t dim2, int64_t ins1,
               int64_t ins2, int64_t ins3, int64_t ins4, uint64_t *inArr,
               uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < ins1; i++) {
    for (uint64_t j = (int32_t)0; j < ins2; j++) {
      for (uint64_t k = (int32_t)0; k < ins3; k++) {
        for (uint64_t l = (int32_t)0; l < ins4; l++) {

          int64_t linIdx =
              ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) +
                (k * ins4)) +
               l);

          int64_t outIdx1 = (linIdx / s2);

          int64_t outIdx2 = (linIdx % s2);
          Arr2DIdxRowM(outArr, s1, s2, outIdx1, outIdx2) =
              Arr4DIdxRowM(inArr, ins1, ins2, ins3, ins4, i, j, k, l);
        }
      }
    }
  }
}

void FusedBatchNorm4411(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                        uint64_t *inArr, uint64_t *multArr, uint64_t *biasArr,
                        int64_t multExprScaleDownSf, int64_t biasExprScaleUpSf,
                        uint64_t *outputArr) {

  int64_t inpSize = (((s1 * s2) * s3) * s4);

  uint64_t *inArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multExprAns = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(inArrReshaped, inpSize, linIdx) =
              Arr4DIdxRowM(inArr, s1, s2, s3, s4, i1, i2, i3, i4);
          Arr1DIdxRowM(multArrReshaped, inpSize, linIdx) =
              Arr1DIdxRowM(multArr, s4, i4);
        }
      }
    }
  }
  ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped,
                             multExprAns);
  if ((multExprScaleDownSf > (int32_t)0)) {
    ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
  }

  uint64_t *biasArrScaledUp = make_array<uint64_t>(s4);
  for (uint64_t ii = (int32_t)0; ii < s4; ii++) {
    Arr1DIdxRowM(biasArrScaledUp, s4, ii) = Arr1DIdxRowM(biasArr, s4, ii);
  }
  if ((biasExprScaleUpSf > (int32_t)0)) {
    ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
  }
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outputArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr1DIdxRowM(multExprAns, inpSize, linIdx),
                        Arr1DIdxRowM(biasArrScaledUp, s4, i4));
        }
      }
    }
  }
  ClearMemSecret1(inpSize, inArrReshaped);
  ClearMemSecret1(inpSize, multArrReshaped);
  ClearMemSecret1(inpSize, multExprAns);
  ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                        int64_t s5, uint64_t *inArr, uint64_t *multArr,
                        uint64_t *biasArr, int64_t multExprScaleDownSf,
                        int64_t biasExprScaleUpSf, uint64_t *outputArr) {

  int64_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *inArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multExprAns = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(inArrReshaped, inpSize, linIdx) =
                Arr5DIdxRowM(inArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
            Arr1DIdxRowM(multArrReshaped, inpSize, linIdx) =
                Arr1DIdxRowM(multArr, s5, i5);
          }
        }
      }
    }
  }
  ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped,
                             multExprAns);
  if ((multExprScaleDownSf > (int32_t)0)) {
    ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
  }

  uint64_t *biasArrScaledUp = make_array<uint64_t>(s5);
  for (uint64_t ii = (int32_t)0; ii < s5; ii++) {
    Arr1DIdxRowM(biasArrScaledUp, s5, ii) = Arr1DIdxRowM(biasArr, s5, ii);
  }
  if ((biasExprScaleUpSf > (int32_t)0)) {
    ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
  }
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outputArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(Arr1DIdxRowM(multExprAns, inpSize, linIdx),
                          Arr1DIdxRowM(biasArrScaledUp, s5, i5));
          }
        }
      }
    }
  }
  ClearMemSecret1(inpSize, inArrReshaped);
  ClearMemSecret1(inpSize, multArrReshaped);
  ClearMemSecret1(inpSize, multExprAns);
  ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int64_t s1, int64_t s2, uint64_t *arr1, uint64_t *arr2,
                  uint64_t *outArr) {

  int64_t inpSize = (s1 * s2);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
          Arr2DIdxRowM(arr1, s1, s2, i1, i2);
      Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
          Arr2DIdxRowM(arr2, s1, s2, i1, i2);
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                  uint64_t *arr1, uint64_t *arr2, uint64_t *outArr) {

  int64_t inpSize = (((s1 * s2) * s3) * s4);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
              Arr4DIdxRowM(arr1, s1, s2, s3, s4, i1, i2, i3, i4);
          Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
              Arr4DIdxRowM(arr2, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                  uint64_t *arr1, uint64_t *arr2, uint64_t *outArr) {

  int64_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
                Arr5DIdxRowM(arr1, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
            Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
                Arr5DIdxRowM(arr2, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
          }
        }
      }
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
          }
        }
      }
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int64_t outS1, int64_t outS2, int64_t inS1, int64_t inS2,
                  int64_t inS3, int64_t inS4, uint64_t *inputArr, int64_t *axes,
                  uint64_t *outputArr) {

  int64_t divisor = (inS2 * inS3);

  int64_t outputSize = (outS1 * outS2);

  uint64_t *sumArr = make_array<uint64_t>(outputSize);

  uint64_t *outputArrReshaped = make_array<uint64_t>(outputSize);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {

      uint64_t summ = ((int32_t)0);
      for (uint64_t i = (int32_t)0; i < inS2; i++) {
        for (uint64_t j = (int32_t)0; j < inS3; j++) {
          summ = SecretAdd(summ, Arr4DIdxRowM(inputArr, inS1, inS2, inS3, inS4,
                                              i1, i, j, i2));
        }
      }
      Arr1DIdxRowM(sumArr, outputSize, ((i1 * outS2) + i2)) = summ;
    }
  }
  ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {
      Arr2DIdxRowM(outputArr, outS1, outS2, i1, i2) =
          Arr1DIdxRowM(outputArrReshaped, outputSize, ((i1 * outS2) + i2));
    }
  }
  ClearMemSecret1(outputSize, sumArr);
  ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int64_t outS1, int64_t outS2, int64_t inS1, int64_t inS2,
                      int64_t inS3, int64_t inS4, uint64_t *inputArr,
                      int64_t axis1, int64_t axis2, uint64_t *outputArr) {

  int64_t divisor = (inS3 * inS4);

  int64_t outputSize = (outS1 * outS2);

  uint64_t *sumArr = make_array<uint64_t>(outputSize);

  uint64_t *outputArrReshaped = make_array<uint64_t>(outputSize);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {

      uint64_t summ = ((int32_t)0);
      for (uint64_t i = (int32_t)0; i < inS3; i++) {
        for (uint64_t j = (int32_t)0; j < inS4; j++) {
          summ = SecretAdd(summ, Arr4DIdxRowM(inputArr, inS1, inS2, inS3, inS4,
                                              i1, i2, i, j));
        }
      }
      Arr1DIdxRowM(sumArr, outputSize, ((i1 * outS2) + i2)) = summ;
    }
  }
  ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {
      Arr2DIdxRowM(outputArr, outS1, outS2, i1, i2) =
          Arr1DIdxRowM(outputArrReshaped, outputSize, ((i1 * outS2) + i2));
    }
  }
  ClearMemSecret1(outputSize, sumArr);
  ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int64_t outArrS1, int64_t inArrS1, int64_t inArrS2,
             uint64_t *inArr, int64_t dim, uint64_t *outArr) {
  ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int64_t outs1, int64_t outs2, int64_t outs3, int64_t ins1,
             int64_t ins2, int64_t ins3, int64_t ins4, uint64_t *inArr,
             int64_t dim, uint64_t *outArr) {

  int64_t size = ((ins1 * ins2) * ins3);

  uint64_t *reshapedInArr = make_array<uint64_t>(size, ins4);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < ins1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < ins2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < ins3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < ins4; i4++) {

          int64_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
          Arr2DIdxRowM(reshapedInArr, size, ins4, linIdx, i4) =
              Arr4DIdxRowM(inArr, ins1, ins2, ins3, ins4, i1, i2, i3, i4);
        }
      }
    }
  }
  ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
  for (uint64_t i1 = (int32_t)0; i1 < ins1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < ins2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < ins3; i3++) {

        int64_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
        Arr3DIdxRowM(outArr, outs1, outs2, outs3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedOutArr, size, linIdx);
      }
    }
  }
  ClearMemSecret2(size, ins4, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr,
           int64_t sf, uint64_t doTruncation) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedInArr, size, linIdx) =
          Arr2DIdxRowM(inArr, s1, s2, i1, i2);
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedOutArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *inArr,
           uint64_t *outArr, int64_t sf, uint64_t doTruncation) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedInArr, size, linIdx) =
              Arr4DIdxRowM(inArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedOutArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
           uint64_t *inArr, uint64_t *outArr, int64_t sf,
           uint64_t doTruncation) {

  int64_t size = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(reshapedInArr, size, linIdx) =
                Arr5DIdxRowM(inArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
          }
        }
      }
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                Arr1DIdxRowM(reshapedOutArr, size, linIdx);
          }
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr,
            int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedInArr, size, linIdx) =
          Arr2DIdxRowM(inArr, s1, s2, i1, i2);
    }
  }
  Floor(size, reshapedInArr, reshapedOutArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedOutArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int64_t s1, uint64_t *arr, int64_t sf) { ScaleUp(s1, arr, sf); }

void ScaleUp2(int64_t s1, int64_t s2, uint64_t *arr, int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedArr, size, linIdx) =
          Arr2DIdxRowM(arr, s1, s2, i1, i2);
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(arr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int64_t s1, int64_t s2, int64_t s3, uint64_t *arr, int64_t sf) {

  int64_t size = ((s1 * s2) * s3);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr1DIdxRowM(reshapedArr, size, linIdx) =
            Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedArr, size, linIdx);
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *arr,
              int64_t sf) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedArr, size, linIdx) =
              Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int64_t s1, uint64_t *arr, int64_t sf) {
  ScaleDown(s1, arr, sf);
}

void ScaleDown2(int64_t s1, int64_t s2, uint64_t *arr, int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedArr, size, linIdx) =
          Arr2DIdxRowM(arr, s1, s2, i1, i2);
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(arr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int64_t s1, int64_t s2, int64_t s3, uint64_t *arr, int64_t sf) {

  int64_t size = ((s1 * s2) * s3);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr1DIdxRowM(reshapedArr, size, linIdx) =
            Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedArr, size, linIdx);
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *arr,
                int64_t sf) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedArr, size, linIdx) =
              Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

int main(int argc, char **argv) {
  ArgMapping amap;

  amap.arg("r", party, "Role of party: ALICE/SERVER = 1; BOB/CLIENT = 2");
  amap.arg("port", port, "Port Number");
  amap.arg("ip", address, "IP Address of server (ALICE)");
  amap.arg("nt", num_threads, "Number of Threads");
  amap.arg("ell", bitlength, "Uniform Bitwidth");
  amap.parse(argc, argv);

  assert(party == SERVER || party == CLIENT);

  uint64_t *tmp0 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)3);
  /* Variable to read the clear value corresponding to the input variable tmp0
   * at (1583,1-1583,44) */
  uint64_t __tmp_in_tmp0;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)32; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)32; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)3; i3++) {
          if ((party == CLIENT)) {
            cin >> __tmp_in_tmp0;
          }
          Arr4DIdxRowM(tmp0, (int32_t)1, (int32_t)32, (int32_t)32, (int32_t)3,
                       i0, i1, i2, i3) = (party == CLIENT) ? __tmp_in_tmp0 : 0;
        }
      }
    }
  }

  uint64_t *tmp1 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)3, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp1
   * at (1586,1-1586,43) */
  uint64_t __tmp_in_tmp1;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)3; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp1;
          }
          Arr4DIdxRowM(tmp1, (int32_t)3, (int32_t)3, (int32_t)3, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp1 : 0;
        }
      }
    }
  }

  uint64_t *tmp2 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp2
   * at (1589,1-1589,44) */
  uint64_t __tmp_in_tmp2;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp2;
          }
          Arr4DIdxRowM(tmp2, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp2 : 0;
        }
      }
    }
  }

  uint64_t *tmp3 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp3
   * at (1592,1-1592,44) */
  uint64_t __tmp_in_tmp3;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp3;
          }
          Arr4DIdxRowM(tmp3, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp3 : 0;
        }
      }
    }
  }

  uint64_t *tmp4 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp4
   * at (1595,1-1595,44) */
  uint64_t __tmp_in_tmp4;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp4;
          }
          Arr4DIdxRowM(tmp4, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp4 : 0;
        }
      }
    }
  }

  uint64_t *tmp5 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp5
   * at (1598,1-1598,44) */
  uint64_t __tmp_in_tmp5;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp5;
          }
          Arr4DIdxRowM(tmp5, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp5 : 0;
        }
      }
    }
  }

  uint64_t *tmp6 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp6
   * at (1601,1-1601,44) */
  uint64_t __tmp_in_tmp6;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp6;
          }
          Arr4DIdxRowM(tmp6, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp6 : 0;
        }
      }
    }
  }

  uint64_t *tmp7 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp7
   * at (1604,1-1604,44) */
  uint64_t __tmp_in_tmp7;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp7;
          }
          Arr4DIdxRowM(tmp7, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp7 : 0;
        }
      }
    }
  }

  uint64_t *tmp8 = make_array<uint64_t>((int32_t)1024, (int32_t)10);
  /* Variable to read the clear value corresponding to the input variable tmp8
   * at (1607,1-1607,40) */
  uint64_t __tmp_in_tmp8;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1024; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)10; i1++) {
      if ((party == SERVER)) {
        cin >> __tmp_in_tmp8;
      }
      Arr2DIdxRowM(tmp8, (int32_t)1024, (int32_t)10, i0, i1) =
          (party == SERVER) ? __tmp_in_tmp8 : 0;
    }
  }

  uint64_t *tmp9 = make_array<uint64_t>((int32_t)10);
  /* Variable to read the clear value corresponding to the input variable tmp9
   * at (1610,1-1610,34) */
  uint64_t __tmp_in_tmp9;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)10; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp9;
    }
    Arr1DIdxRowM(tmp9, (int32_t)10, i0) = (party == SERVER) ? __tmp_in_tmp9 : 0;
  }
  StartComputation();

  uint64_t *tmp10 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)3, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp0, tmp1, tmp10);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)3, (int32_t)64, tmp1);
  ClearMemSecret4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)3, tmp0);

  uint64_t *tmp13 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64, tmp10, tmp13,
        (int32_t)11, 1);
  ClearMemSecret4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64, tmp10);

  uint64_t *tmp15 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp13, tmp2, tmp15);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64, tmp2);
  ClearMemSecret4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64, tmp13);

  uint64_t *tmp18 =
      make_array<uint64_t>((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64);
  Relu4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64, tmp15, tmp18,
        (int32_t)11, 1);
  ClearMemSecret4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64, tmp15);

  uint64_t *tmp20 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64);
  AvgPool((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, (int32_t)2,
          (int32_t)2, (int32_t)0, (int32_t)0, (int32_t)0, (int32_t)0,
          (int32_t)2, (int32_t)2, (int32_t)1, (int32_t)32, (int32_t)32,
          (int32_t)64, tmp18, tmp20);
  ClearMemSecret4((int32_t)1, (int32_t)32, (int32_t)32, (int32_t)64, tmp18);

  uint64_t *tmp22 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp20, tmp3, tmp22);
  ClearMemSecret4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, tmp20);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64, tmp3);

  uint64_t *tmp25 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, tmp22, tmp25,
        (int32_t)11, 1);
  ClearMemSecret4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, tmp22);

  uint64_t *tmp27 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp25, tmp4, tmp27);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64, tmp4);
  ClearMemSecret4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, tmp25);

  uint64_t *tmp30 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64);
  Relu4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, tmp27, tmp30,
        (int32_t)11, 1);
  ClearMemSecret4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, tmp27);

  uint64_t *tmp32 =
      make_array<uint64_t>((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64);
  AvgPool((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, (int32_t)2,
          (int32_t)2, (int32_t)0, (int32_t)1, (int32_t)0, (int32_t)1,
          (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)16, (int32_t)16,
          (int32_t)64, tmp30, tmp32);
  ClearMemSecret4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, tmp30);

  uint64_t *tmp34 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)0, (int32_t)1, (int32_t)0,
                (int32_t)1, (int32_t)2, (int32_t)2, tmp32, tmp5, tmp34);
  ClearMemSecret4((int32_t)1, (int32_t)16, (int32_t)16, (int32_t)64, tmp32);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)64, tmp5);

  uint64_t *tmp37 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp34, tmp37,
        (int32_t)11, 1);
  ClearMemSecret4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp34);

  uint64_t *tmp39 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)1,
                (int32_t)1, (int32_t)64, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp37, tmp6, tmp39);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)64, tmp6);
  ClearMemSecret4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp37);

  uint64_t *tmp42 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp39, tmp42,
        (int32_t)11, 1);
  ClearMemSecret4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp39);

  uint64_t *tmp44 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, (int32_t)1,
                (int32_t)1, (int32_t)16, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp42, tmp7, tmp44);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)16, tmp7);
  ClearMemSecret4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)64, tmp42);

  uint64_t *tmp47 =
      make_array<uint64_t>((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)16);
  Relu4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)16, tmp44, tmp47,
        (int32_t)11, 1);
  ClearMemSecret4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)16, tmp44);

  int64_t *tmp49 = make_array<int64_t>((int32_t)2);
  Arr1DIdxRowM(tmp49, (int32_t)2, (int64_t)0) = (int32_t)-1;
  Arr1DIdxRowM(tmp49, (int32_t)2, (int64_t)1) = (int32_t)1024;

  uint64_t *tmp50 = make_array<uint64_t>((int32_t)1, (int32_t)1024);

  int64_t i5;

  int64_t i4;

  int64_t i3;

  int64_t i2;

  int64_t i1;

  int64_t i0;
  i0 = (int64_t)0;
  i1 = (int64_t)0;
  i2 = (int64_t)0;
  i3 = (int64_t)0;
  for (uint64_t i4 = (int32_t)0; i4 < (int32_t)1; i4++) {
    for (uint64_t i5 = (int32_t)0; i5 < (int32_t)1024; i5++) {
      Arr2DIdxRowM(tmp50, (int32_t)1, (int32_t)1024, i4, i5) =
          Arr4DIdxRowM(tmp47, (int32_t)1, (int32_t)8, (int32_t)8, (int32_t)16,
                       i0, i1, i2, i3);
      i3 = (i3 + (int64_t)1);
      if ((i3 == (int64_t)16)) {
        i3 = (int64_t)0;
        i2 = (i2 + (int64_t)1);
        if ((i2 == (int64_t)8)) {
          i2 = (int64_t)0;
          i1 = (i1 + (int64_t)1);
          if ((i1 == (int64_t)8)) {
            i1 = (int64_t)0;
            i0 = (i0 + (int64_t)1);
          }
        }
      }
    }
  }
  ClearMemSecret4((int32_t)1, (int32_t)8, (int32_t)8, (int32_t)16, tmp47);

  uint64_t *tmp52 = make_array<uint64_t>((int32_t)1, (int32_t)10);
  MatMul2D((int32_t)1, (int32_t)1024, (int32_t)10, tmp50, tmp8, tmp52, 0);
  ClearMemSecret2((int32_t)1024, (int32_t)10, tmp8);
  ClearMemSecret2((int32_t)1, (int32_t)1024, tmp50);

  uint64_t *tmp55 = make_array<uint64_t>((int32_t)1, (int32_t)10);
  ScaleUp1((int32_t)10, tmp9, (int32_t)11);
  MatAddBroadCast2((int32_t)1, (int32_t)10, tmp52, tmp9, tmp55);
  ClearMemSecret1((int32_t)10, tmp9);
  ClearMemSecret2((int32_t)1, (int32_t)10, tmp52);

  int64_t tmp58 = (int32_t)1;

  uint64_t *tmp59 = make_array<uint64_t>((int32_t)1);
  ArgMax1((int32_t)1, (int32_t)1, (int32_t)10, tmp55, tmp58, tmp59);
  ClearMemSecret2((int32_t)1, (int32_t)10, tmp55);
  ClearMemPublic(tmp58);
  EndComputation();
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    cout << (funcReconstruct2PCCons(Arr1DIdxRowM(tmp59, (int32_t)1, i0), 2))
         << endl;
  }
}
