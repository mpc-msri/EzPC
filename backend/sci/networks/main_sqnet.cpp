/*
This is an autogenerated file, generated using the EzPC compiler.
*/

#include "library_fixed.h"
#include <iostream>
using namespace std;

int party = 0;
int port = 32000;
string address = "127.0.0.1";
int num_threads = 4;
int32_t bitlength = 32;

void MatAddBroadCast2(int64_t s1, int64_t s2, uint64_t *A, uint64_t *B,
                      uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          SecretAdd(Arr2DIdxRowM(A, s1, s2, i1, i2), Arr1DIdxRowM(B, s2, i2));
    }
  }
}

void MatAdd2(int64_t s1, int64_t s2, uint64_t *A, uint64_t *B,
             uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) = SecretAdd(
          Arr2DIdxRowM(A, s1, s2, i1, i2), Arr2DIdxRowM(B, s1, s2, i1, i2));
    }
  }
}

void MatAddBroadCast4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr4DIdxRowM(A, s1, s2, s3, s4, i1, i2, i3, i4),
                        Arr1DIdxRowM(B, s4, i4));
        }
      }
    }
  }
}

void MatAdd4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *A,
             uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr4DIdxRowM(A, s1, s2, s3, s4, i1, i2, i3, i4),
                        Arr4DIdxRowM(B, s1, s2, s3, s4, i1, i2, i3, i4));
        }
      }
    }
  }
}

void MatAddBroadCast5(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      int64_t s5, uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(
                    Arr5DIdxRowM(A, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5),
                    Arr1DIdxRowM(B, s5, i5));
          }
        }
      }
    }
  }
}

void MatAdd5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
             uint64_t *A, uint64_t *B, uint64_t *outArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(
                    Arr5DIdxRowM(A, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5),
                    Arr5DIdxRowM(B, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5));
          }
        }
      }
    }
  }
}

void CreateTensor1(int64_t s1, int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(arr, s1, i1) = val;
  }
}

void CreateTensor2(int64_t s1, int64_t s2, int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(arr, s1, s2, i1, i2) = val;
    }
  }
}

void CreateTensor3(int64_t s1, int64_t s2, int64_t s3, int64_t val,
                   int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) = val;
      }
    }
  }
}

void CreateTensor4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t val,
                   int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) = val;
        }
      }
    }
  }
}

void CreateTensor5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                   int64_t val, int64_t *arr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {
            Arr5DIdxRowM(arr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) = val;
          }
        }
      }
    }
  }
}

void CopyTensor1(int64_t s1, uint64_t *targetArr, uint64_t *fromArr,
                 uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(targetArr, s1, i1) = Arr1DIdxRowM(fromArr, s1, i1);
  }
}

void CopyTensor2(int64_t s1, int64_t s2, uint64_t *targetArr, uint64_t *fromArr,
                 uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(targetArr, s1, s2, i1, i2) =
          Arr2DIdxRowM(fromArr, s1, s2, i1, i2);
    }
  }
}

void CopyTensor3(int64_t s1, int64_t s2, int64_t s3, uint64_t *targetArr,
                 uint64_t *fromArr, uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(targetArr, s1, s2, s3, i1, i2, i3) =
            Arr3DIdxRowM(fromArr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
}

void CopyTensor4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                 uint64_t *targetArr, uint64_t *fromArr, uint64_t *ignore) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(targetArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr4DIdxRowM(fromArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void CreateIdentity11(int64_t s1, uint64_t *fromArr, uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    Arr1DIdxRowM(newArr, s1, i1) = Arr1DIdxRowM(fromArr, s1, i1);
  }
}

void CreateIdentity22(int64_t s1, int64_t s2, uint64_t *fromArr,
                      uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      Arr2DIdxRowM(newArr, s1, s2, i1, i2) =
          Arr2DIdxRowM(fromArr, s1, s2, i1, i2);
    }
  }
}

void CreateIdentity33(int64_t s1, int64_t s2, int64_t s3, uint64_t *fromArr,
                      uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        Arr3DIdxRowM(newArr, s1, s2, s3, i1, i2, i3) =
            Arr3DIdxRowM(fromArr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
}

void CreateIdentity44(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                      uint64_t *fromArr, uint64_t *newArr) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          Arr4DIdxRowM(newArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr4DIdxRowM(fromArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void CreateCopy2211(int64_t s1, int64_t s2, int64_t inps1, int64_t inps2,
                    uint64_t *inArr, int64_t perDimSize, int64_t *beginIdx,
                    int64_t *sizeIdx, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      Arr2DIdxRowM(outArr, s1, s2, i, j) =
          Arr2DIdxRowM(inArr, inps1, inps2,
                       (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)0) + i),
                       (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)1) + j));
    }
  }
}

void CreateCopy5511(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                    int64_t inps1, int64_t inps2, int64_t inps3, int64_t inps4,
                    int64_t inps5, uint64_t *inArr, int64_t perDimSize,
                    int64_t *beginIdx, int64_t *sizeIdx, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          for (uint64_t m = (int32_t)0; m < s5; m++) {
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                Arr5DIdxRowM(
                    inArr, inps1, inps2, inps3, inps4, inps5,
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)0) + i),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)1) + j),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)2) + k),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)3) + l),
                    (Arr1DIdxRowM(beginIdx, perDimSize, (int32_t)4) + m));
          }
        }
      }
    }
  }
}

void Concat2T222(int64_t s1, int64_t s2, int64_t inp1s1, int64_t inp1s2,
                 uint64_t *inp1, int64_t inp2s1, int64_t inp2s2, uint64_t *inp2,
                 int64_t axis, uint64_t *outp) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      if ((axis == (int32_t)0)) {
        if ((i1 < inp1s1)) {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp1, inp1s1, inp1s2, i1, i2);
        } else {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp2, inp2s1, inp2s2, (i1 - inp1s1), i2);
        }
      } else {
        if ((i2 < inp1s2)) {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp1, inp1s1, inp1s2, i1, i2);
        } else {
          Arr2DIdxRowM(outp, s1, s2, i1, i2) =
              Arr2DIdxRowM(inp2, inp2s1, inp2s2, i1, (i2 - inp1s2));
        }
      }
    }
  }
}

void Concat2T444(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t inp1s1,
                 int64_t inp1s2, int64_t inp1s3, int64_t inp1s4, uint64_t *inp1,
                 int64_t inp2s1, int64_t inp2s2, int64_t inp2s3, int64_t inp2s4,
                 uint64_t *inp2, int64_t axis, uint64_t *outp) {
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          if ((axis == (int32_t)0)) {
            if ((i1 < inp1s1)) {
              Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) = Arr4DIdxRowM(
                  inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2, i3, i4);
            } else {
              Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                  Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4,
                               (i1 - inp1s1), i2, i3, i4);
            }
          } else {
            if ((axis == (int32_t)1)) {
              if ((i2 < inp1s2)) {
                Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                    Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                 i3, i4);
              } else {
                Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                    Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1,
                                 (i2 - inp1s2), i3, i4);
              }
            } else {
              if ((axis == (int32_t)2)) {
                if ((i3 < inp1s3)) {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                   i3, i4);
                } else {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1, i2,
                                   (i3 - inp1s3), i4);
                }
              } else {
                if ((i4 < inp1s4)) {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp1, inp1s1, inp1s2, inp1s3, inp1s4, i1, i2,
                                   i3, i4);
                } else {
                  Arr4DIdxRowM(outp, s1, s2, s3, s4, i1, i2, i3, i4) =
                      Arr4DIdxRowM(inp2, inp2s1, inp2s2, inp2s3, inp2s4, i1, i2,
                                   i3, (i4 - inp1s4));
                }
              }
            }
          }
        }
      }
    }
  }
}

void Split44(int64_t O1, int64_t O2, int64_t O3, int64_t O4, int64_t I1,
             int64_t I2, int64_t I3, int64_t I4, uint64_t *inp, int64_t axis,
             int64_t curCount, int64_t total, uint64_t *out) {
  for (uint64_t o1 = (int32_t)0; o1 < O1; o1++) {
    for (uint64_t o2 = (int32_t)0; o2 < O2; o2++) {
      for (uint64_t o3 = (int32_t)0; o3 < O3; o3++) {
        for (uint64_t o4 = (int32_t)0; o4 < O4; o4++) {

          int64_t i1 = o1;

          int64_t i2 = o2;

          int64_t i3 = o3;

          int64_t i4 = o4;
          if ((axis == (int32_t)0)) {
            i1 = (((I1 / total) * curCount) + o1);
          }
          if ((axis == (int32_t)1)) {
            i2 = (((I2 / total) * curCount) + o2);
          }
          if ((axis == (int32_t)2)) {
            i3 = (((I3 / total) * curCount) + o3);
          }
          if ((axis == (int32_t)3)) {
            i4 = (((I4 / total) * curCount) + o4);
          }
          Arr4DIdxRowM(out, O1, O2, O3, O4, o1, o2, o3, o4) =
              Arr4DIdxRowM(inp, I1, I2, I3, I4, i1, i2, i3, i4);
        }
      }
    }
  }
}

void Conv2DReshapeFilter(int64_t FH, int64_t FW, int64_t CI, int64_t CO,
                         uint64_t *inputArr, uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

          int64_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
          Arr2DIdxRowM(outputArr, CO, ((FH * FW) * CI), co, linIdx) =
              Arr4DIdxRowM(inputArr, FH, FW, CI, CO, fh, fw, ci, co);
        }
      }
    }
  }
}

void Conv2DReshapeMatMulOP(int64_t N, int64_t finalH, int64_t finalW,
                           int64_t CO, uint64_t *inputArr,
                           uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w, co) =
              Arr2DIdxRowM(inputArr, CO, ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void Conv2DReshapeInput(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                        int64_t FW, int64_t zPadHLeft, int64_t zPadHRight,
                        int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                        int64_t strideW, int64_t RRows, int64_t RCols,
                        uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

    int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

      int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = funcSSCons((int32_t)0);
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= H)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                val = funcSSCons((int32_t)0);
              } else {
                val = Arr4DIdxRowM(inputArr, N, H, W, CI, n, curPosH, curPosW,
                                   ci);
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CI) + (fw * CI)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + strideW);
      }

      leftTopCornerH = (leftTopCornerH + strideH);
    }
  }
}

void Conv2D(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH, int64_t FW,
            int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
            int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
            int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
            uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = ((FH * FW) * CI);

  int64_t reshapedIPRows = ((FH * FW) * CI);

  int64_t newH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t newW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = ((N * newH) * newW);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
  Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft,
                     zPadWRight, strideH, strideW, reshapedIPRows,
                     reshapedIPCols, inputArr, inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                     int64_t FW, int64_t CO, int64_t zPadHLeft,
                     int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                     int64_t strideH, int64_t strideW, int64_t outH,
                     int64_t outW, int64_t G, uint64_t *inputArr,
                     uint64_t *filterArr, uint64_t *outArr) {

  int64_t GIS = (CI / G);

  int64_t GOS = (CO / G);
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t cog = (int32_t)0; cog < GOS; cog++) {
      for (uint64_t cig = (int32_t)0; cig < GIS; cig++) {
        for (uint64_t g = (int32_t)0; g < G; g++) {
          for (uint64_t h = (int32_t)0; h < outH; h++) {
            for (uint64_t w = (int32_t)0; w < outW; w++) {

              uint64_t val = funcSSCons((int32_t)0);

              int64_t ci = ((GIS * g) + cig);

              int64_t co = ((GOS * g) + cog);

              int64_t curPosH = ((strideH * h) - zPadHLeft);
              for (uint64_t fh = (int32_t)0; fh < FH; fh++) {

                int64_t curPosW = ((strideW * w) - zPadWLeft);
                for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
                  if (((((curPosH >= (int32_t)0) && (curPosW >= (int32_t)0)) &&
                        (curPosH < H)) &&
                       (curPosW < W))) {
                    val = SecretAdd(
                        val,
                        SecretMult(Arr4DIdxRowM(inputArr, N, H, W, CI, n,
                                                curPosH, curPosW, ci),
                                   Arr4DIdxRowM(filterArr, FH, FW, (CI / G), CO,
                                                fh, fw, (ci / G), co)));
                  }
                  curPosW = (curPosW + (int32_t)1);
                }
                curPosH = (curPosH + (int32_t)1);
              }
              Arr4DIdxRowM(outArr, N, outH, outW, CO, n, h, w, co) = SecretAdd(
                  Arr4DIdxRowM(outArr, N, outH, outW, CO, n, h, w, co), val);
            }
          }
        }
      }
    }
  }
}

void Conv2DLoop(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                int64_t FW, int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
                int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                int64_t strideW, int64_t G, uint64_t *inputArr,
                uint64_t *filterArr, uint64_t *outArr) {

  int64_t outH =
      ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) + (int32_t)1);
  Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft,
                  zPadWRight, strideH, strideW, outH, outW, G, inputArr,
                  filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int64_t FH, int64_t FW, int64_t CI, int64_t CO,
                              int64_t g, int64_t G, uint64_t *inputArr,
                              uint64_t *outputArr) {

  int64_t CIG = (CI / G);

  int64_t COG = (CO / G);

  int64_t startCO = (g * COG);
  for (uint64_t co = (int32_t)0; co < COG; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CIG; ci++) {

          int64_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
          Arr2DIdxRowM(outputArr, (CO / G), ((FH * FW) * (CI / G)), co,
                       linIdx) = Arr4DIdxRowM(inputArr, FH, FW, (CI / G), CO,
                                              fh, fw, ci, (co + startCO));
        }
      }
    }
  }
}

void Conv2DReshapeMatMulOPGroup(int64_t N, int64_t finalH, int64_t finalW,
                                int64_t CO, int64_t g, int64_t G,
                                uint64_t *inputArr, uint64_t *outputArr) {

  int64_t COG = (CO / G);

  int64_t startCO = (g * COG);
  for (uint64_t co = (int32_t)0; co < COG; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w,
                       (co + startCO)) =
              Arr2DIdxRowM(inputArr, (CO / G), ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void Conv2DReshapeInputGroup(int64_t N, int64_t H, int64_t W, int64_t CI,
                             int64_t FH, int64_t FW, int64_t zPadHLeft,
                             int64_t zPadHRight, int64_t zPadWLeft,
                             int64_t zPadWRight, int64_t strideH,
                             int64_t strideW, int64_t g, int64_t G,
                             int64_t RRows, int64_t RCols, uint64_t *inputArr,
                             uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;

  int64_t CIG = (CI / G);
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

    int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

      int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = funcSSCons((int32_t)0);

            int64_t startCI = (g * CIG);
            for (uint64_t ci = (int32_t)0; ci < CIG; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= H)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                val = funcSSCons((int32_t)0);
              } else {
                val = Arr4DIdxRowM(inputArr, N, H, W, CI, n, curPosH, curPosW,
                                   (ci + startCI));
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CIG) + (fw * CIG)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + strideW);
      }

      leftTopCornerH = (leftTopCornerH + strideH);
    }
  }
}

void Conv2DGroup(int64_t N, int64_t H, int64_t W, int64_t CI, int64_t FH,
                 int64_t FW, int64_t CO, int64_t zPadHLeft, int64_t zPadHRight,
                 int64_t zPadWLeft, int64_t zPadWRight, int64_t strideH,
                 int64_t strideW, int64_t G, uint64_t *inputArr,
                 uint64_t *filterArr, uint64_t *outArr) {

  int64_t CIG = (CI / G);

  int64_t reshapedFilterRows = (CO / G);

  int64_t reshapedFilterCols = ((FH * FW) * CIG);

  int64_t reshapedIPRows = ((FH * FW) * CIG);

  int64_t outH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = ((N * outH) * outW);
  for (uint64_t g = (int32_t)0; g < G; g++) {

    uint64_t *inputReshaped =
        make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

    uint64_t *matmulOP =
        make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);

    uint64_t *filterReshaped =
        make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);
    Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
    Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight,
                            zPadWLeft, zPadWRight, strideH, strideW, g, G,
                            reshapedIPRows, reshapedIPCols, inputArr,
                            inputReshaped);
    MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
             filterReshaped, inputReshaped, matmulOP, 1);
    Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
    ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
    ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
    ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  }
}

void Conv3DReshapeFilter(int64_t FD, int64_t FH, int64_t FW, int64_t CI,
                         int64_t CO, uint64_t *inputArr, uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
      for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
        for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
          for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

            int64_t linIdx =
                ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) +
                 ci);
            Arr2DIdxRowM(outputArr, CO, (((FD * FH) * FW) * CI), co, linIdx) =
                Arr5DIdxRowM(inputArr, FD, FH, FW, CI, CO, fd, fh, fw, ci, co);
          }
        }
      }
    }
  }
}

void Conv3DReshapeMatMulOP(int64_t N, int64_t finalD, int64_t finalH,
                           int64_t finalW, int64_t CO, uint64_t *inputArr,
                           uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t d = (int32_t)0; d < finalD; d++) {
        for (uint64_t h = (int32_t)0; h < finalH; h++) {
          for (uint64_t w = (int32_t)0; w < finalW; w++) {
            Arr5DIdxRowM(outputArr, N, finalD, finalH, finalW, CO, n, d, h, w,
                         co) =
                Arr2DIdxRowM(inputArr, CO, (((N * finalD) * finalH) * finalW),
                             co,
                             ((((((n * finalD) * finalH) * finalW) +
                                ((d * finalH) * finalW)) +
                               (h * finalW)) +
                              w));
          }
        }
      }
    }
  }
}

void Conv3DReshapeInput(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                        int64_t FD, int64_t FH, int64_t FW, int64_t zPadDLeft,
                        int64_t zPadDRight, int64_t zPadHLeft,
                        int64_t zPadHRight, int64_t zPadWLeft,
                        int64_t zPadWRight, int64_t strideD, int64_t strideH,
                        int64_t strideW, int64_t RRows, int64_t RCols,
                        uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerD = ((int32_t)0 - zPadDLeft);

    int64_t extremeRightBottomCornerD = ((D - (int32_t)1) + zPadDRight);
    while (
        (((leftTopCornerD + FD) - (int32_t)1) <= extremeRightBottomCornerD)) {

      int64_t leftTopCornerH = ((int32_t)0 - zPadHLeft);

      int64_t extremeRightBottomCornerH = ((H - (int32_t)1) + zPadHRight);
      while (
          (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

        int64_t leftTopCornerW = ((int32_t)0 - zPadWLeft);

        int64_t extremeRightBottomCornerW = ((W - (int32_t)1) + zPadWRight);
        while ((((leftTopCornerW + FW) - (int32_t)1) <=
                extremeRightBottomCornerW)) {
          for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
            for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
              for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

                int64_t curPosD = (leftTopCornerD + fd);

                int64_t curPosH = (leftTopCornerH + fh);

                int64_t curPosW = (leftTopCornerW + fw);

                uint64_t val = funcSSCons((int32_t)0);
                for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
                  if (((((curPosD < (int32_t)0) || (curPosD >= D)) ||
                        ((curPosH < (int32_t)0) || (curPosH >= H))) ||
                       ((curPosW < (int32_t)0) || (curPosW >= W)))) {
                    val = funcSSCons((int32_t)0);
                  } else {
                    val = Arr5DIdxRowM(inputArr, N, D, H, W, CI, n, curPosD,
                                       curPosH, curPosW, ci);
                  }
                  Arr2DIdxRowM(outputArr, RRows, RCols,
                               ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) +
                                 (fw * CI)) +
                                ci),
                               linIdxFilterMult) = val;
                }
              }
            }
          }
          linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
          leftTopCornerW = (leftTopCornerW + strideW);
        }

        leftTopCornerH = (leftTopCornerH + strideH);
      }

      leftTopCornerD = (leftTopCornerD + strideD);
    }
  }
}

void Conv3D(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI, int64_t FD,
            int64_t FH, int64_t FW, int64_t CO, int64_t zPadDLeft,
            int64_t zPadDRight, int64_t zPadHLeft, int64_t zPadHRight,
            int64_t zPadWLeft, int64_t zPadWRight, int64_t strideD,
            int64_t strideH, int64_t strideW, uint64_t *inputArr,
            uint64_t *filterArr, uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = (((FD * FH) * FW) * CI);

  int64_t reshapedIPRows = (((FD * FH) * FW) * CI);

  int64_t newD =
      ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) + (int32_t)1);

  int64_t newH =
      ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) + (int32_t)1);

  int64_t newW =
      ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) + (int32_t)1);

  int64_t reshapedIPCols = (((N * newD) * newH) * newW);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
  Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight,
                     zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD,
                     strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr,
                     inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                     int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                     int64_t zPadDLeft, int64_t zPadDRight, int64_t zPadHLeft,
                     int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                     int64_t strideD, int64_t strideH, int64_t strideW,
                     int64_t outD, int64_t outH, int64_t outW,
                     uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t co = (int32_t)0; co < CO; co++) {
      for (uint64_t d = (int32_t)0; d < outD; d++) {
        for (uint64_t h = (int32_t)0; h < outH; h++) {
          for (uint64_t w = (int32_t)0; w < outW; w++) {
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

              uint64_t val = funcSSCons((int32_t)0);
              for (uint64_t fd = (d * strideD); fd < ((d * strideD) + FD);
                   fd++) {
                for (uint64_t fh = (h * strideH); fh < ((h * strideH) + FH);
                     fh++) {
                  for (uint64_t fw = (w * strideW); fw < ((w * strideW) + FW);
                       fw++) {

                    int64_t curPosD = (fd - zPadDLeft);

                    int64_t curPosH = (fh - zPadHLeft);

                    int64_t curPosW = (fw - zPadWLeft);
                    if (((((((curPosD >= (int32_t)0) &&
                             (curPosH >= (int32_t)0)) &&
                            (curPosW >= (int32_t)0)) &&
                           (curPosD < D)) &&
                          (curPosH < H)) &&
                         (curPosW < W))) {

                      int64_t curFilterPosD = (fd - (d * strideD));

                      int64_t curFilterPosH = (fh - (h * strideH));

                      int64_t curFilterPosW = (fw - (w * strideW));
                      val = SecretAdd(
                          val, SecretMult(
                                   Arr5DIdxRowM(inputArr, N, D, H, W, CI, n,
                                                curPosD, curPosH, curPosW, ci),
                                   Arr5DIdxRowM(filterArr, FD, FH, FW, CI, CO,
                                                curFilterPosD, curFilterPosH,
                                                curFilterPosW, ci, co)));
                    }
                  }
                }
              }
              Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d, h, w, co) =
                  SecretAdd(Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d,
                                         h, w, co),
                            val);
            }
          }
        }
      }
    }
  }
}

void Conv3DLoop(int64_t N, int64_t D, int64_t H, int64_t W, int64_t CI,
                int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                int64_t zPadDLeft, int64_t zPadDRight, int64_t zPadHLeft,
                int64_t zPadHRight, int64_t zPadWLeft, int64_t zPadWRight,
                int64_t strideD, int64_t strideH, int64_t strideW,
                uint64_t *inputArr, uint64_t *filterArr, uint64_t *outArr) {

  int64_t outD =
      ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) + (int32_t)1);

  int64_t outH =
      ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) + (int32_t)1);

  int64_t outW =
      ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) + (int32_t)1);
  Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight,
                  zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD,
                  strideH, strideW, outD, outH, outW, inputArr, filterArr,
                  outArr);
}

void ConvTranspose2DReshapeMatMulOP(int64_t N, int64_t finalH, int64_t finalW,
                                    int64_t CO, uint64_t *inputArr,
                                    uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t n = (int32_t)0; n < N; n++) {
      for (uint64_t h = (int32_t)0; h < finalH; h++) {
        for (uint64_t w = (int32_t)0; w < finalW; w++) {
          Arr4DIdxRowM(outputArr, N, finalH, finalW, CO, n, h, w, co) =
              Arr2DIdxRowM(inputArr, CO, ((N * finalH) * finalW), co,
                           ((((n * finalH) * finalW) + (h * finalW)) + w));
        }
      }
    }
  }
}

void ConvTranspose2DReshapeFilter(int64_t FH, int64_t FW, int64_t CO,
                                  int64_t CI, uint64_t *inputArr,
                                  uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
      for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
        for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

          int64_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
          Arr2DIdxRowM(outputArr, CO, ((FH * FW) * CI), co, linIdx) =
              Arr4DIdxRowM(inputArr, FH, FW, CO, CI, ((FH - (int32_t)1) - fh),
                           ((FW - (int32_t)1) - fw), co, ci);
        }
      }
    }
  }
}

void ConvTranspose2DReshapeInput(int64_t N, int64_t HPrime, int64_t WPrime,
                                 int64_t CI, int64_t FH, int64_t FW,
                                 int64_t zPadTrHLeft, int64_t zPadTrHRight,
                                 int64_t zPadTrWLeft, int64_t zPadTrWRight,
                                 int64_t strideH, int64_t strideW,
                                 int64_t RRows, int64_t RCols,
                                 uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerH = ((int32_t)0 - zPadTrHLeft);

    int64_t HPrimeTilde =
        (HPrime + ((HPrime - (int32_t)1) * (strideH - (int32_t)1)));

    int64_t extremeRightBottomCornerH =
        ((HPrimeTilde - (int32_t)1) + zPadTrHRight);
    while (
        (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

      int64_t leftTopCornerW = ((int32_t)0 - zPadTrWLeft);

      int64_t WPrimeTilde =
          (WPrime + ((WPrime - (int32_t)1) * (strideW - (int32_t)1)));

      int64_t extremeRightBottomCornerW =
          ((WPrimeTilde - (int32_t)1) + zPadTrWRight);
      while (
          (((leftTopCornerW + FW) - (int32_t)1) <= extremeRightBottomCornerW)) {
        for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
          for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

            int64_t curPosH = (leftTopCornerH + fh);

            int64_t curPosW = (leftTopCornerW + fw);

            uint64_t val = funcSSCons((int32_t)0);
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
              if ((((curPosH < (int32_t)0) || (curPosH >= HPrimeTilde)) ||
                   ((curPosW < (int32_t)0) || (curPosW >= WPrimeTilde)))) {
                val = funcSSCons((int32_t)0);
              } else {
                if ((((curPosH % strideH) == (int32_t)0) &&
                     ((curPosW % strideW) == (int32_t)0))) {

                  int64_t idxInputH = (curPosH / strideH);

                  int64_t idxInputW = (curPosW / strideW);
                  val = Arr4DIdxRowM(inputArr, N, HPrime, WPrime, CI, n,
                                     idxInputH, idxInputW, ci);
                } else {
                  val = funcSSCons((int32_t)0);
                }
              }
              Arr2DIdxRowM(outputArr, RRows, RCols,
                           ((((fh * FW) * CI) + (fw * CI)) + ci),
                           linIdxFilterMult) = val;
            }
          }
        }
        linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
        leftTopCornerW = (leftTopCornerW + (int32_t)1);
      }

      leftTopCornerH = (leftTopCornerH + (int32_t)1);
    }
  }
}

void ConvTranspose2D(int64_t N, int64_t HPrime, int64_t WPrime, int64_t CI,
                     int64_t FH, int64_t FW, int64_t CO, int64_t H, int64_t W,
                     int64_t zPadTrHLeft, int64_t zPadTrHRight,
                     int64_t zPadTrWLeft, int64_t zPadTrWRight, int64_t strideH,
                     int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = ((FH * FW) * CI);

  int64_t reshapedIPRows = ((FH * FW) * CI);

  int64_t reshapedIPCols = ((N * H) * W);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
  ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft,
                              zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH,
                              strideW, reshapedIPRows, reshapedIPCols, inputArr,
                              inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int64_t FD, int64_t FH, int64_t FW,
                                  int64_t CO, int64_t CI, uint64_t *inputArr,
                                  uint64_t *outputArr) {
  for (uint64_t co = (int32_t)0; co < CO; co++) {
    for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
      for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
        for (uint64_t fw = (int32_t)0; fw < FW; fw++) {
          for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

            int64_t linIdx =
                ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) +
                 ci);
            Arr2DIdxRowM(outputArr, CO, (((FD * FH) * FW) * CI), co, linIdx) =
                Arr5DIdxRowM(inputArr, FD, FH, FW, CO, CI,
                             ((FD - (int32_t)1) - fd), ((FH - (int32_t)1) - fh),
                             ((FW - (int32_t)1) - fw), co, ci);
          }
        }
      }
    }
  }
}

void ConvTranspose3DReshapeInput(int64_t N, int64_t DPrime, int64_t HPrime,
                                 int64_t WPrime, int64_t CI, int64_t FD,
                                 int64_t FH, int64_t FW, int64_t zPadTrDLeft,
                                 int64_t zPadTrDRight, int64_t zPadTrHLeft,
                                 int64_t zPadTrHRight, int64_t zPadTrWLeft,
                                 int64_t zPadTrWRight, int64_t strideD,
                                 int64_t strideH, int64_t strideW,
                                 int64_t RRows, int64_t RCols,
                                 uint64_t *inputArr, uint64_t *outputArr) {

  int64_t linIdxFilterMult = (int32_t)0;
  for (uint64_t n = (int32_t)0; n < N; n++) {

    int64_t leftTopCornerD = ((int32_t)0 - zPadTrDLeft);

    int64_t DPrimeTilde =
        (DPrime + ((DPrime - (int32_t)1) * (strideD - (int32_t)1)));

    int64_t extremeRightBottomCornerD =
        ((DPrimeTilde - (int32_t)1) + zPadTrDRight);
    while (
        (((leftTopCornerD + FD) - (int32_t)1) <= extremeRightBottomCornerD)) {

      int64_t leftTopCornerH = ((int32_t)0 - zPadTrHLeft);

      int64_t HPrimeTilde =
          (HPrime + ((HPrime - (int32_t)1) * (strideH - (int32_t)1)));

      int64_t extremeRightBottomCornerH =
          ((HPrimeTilde - (int32_t)1) + zPadTrHRight);
      while (
          (((leftTopCornerH + FH) - (int32_t)1) <= extremeRightBottomCornerH)) {

        int64_t leftTopCornerW = ((int32_t)0 - zPadTrWLeft);

        int64_t WPrimeTilde =
            (WPrime + ((WPrime - (int32_t)1) * (strideW - (int32_t)1)));

        int64_t extremeRightBottomCornerW =
            ((WPrimeTilde - (int32_t)1) + zPadTrWRight);
        while ((((leftTopCornerW + FW) - (int32_t)1) <=
                extremeRightBottomCornerW)) {
          for (uint64_t fd = (int32_t)0; fd < FD; fd++) {
            for (uint64_t fh = (int32_t)0; fh < FH; fh++) {
              for (uint64_t fw = (int32_t)0; fw < FW; fw++) {

                int64_t curPosD = (leftTopCornerD + fd);

                int64_t curPosH = (leftTopCornerH + fh);

                int64_t curPosW = (leftTopCornerW + fw);

                uint64_t val = funcSSCons((int32_t)0);
                for (uint64_t ci = (int32_t)0; ci < CI; ci++) {
                  if (((((curPosD < (int32_t)0) || (curPosD >= DPrimeTilde)) ||
                        ((curPosH < (int32_t)0) || (curPosH >= HPrimeTilde))) ||
                       ((curPosW < (int32_t)0) || (curPosW >= WPrimeTilde)))) {
                    val = funcSSCons((int32_t)0);
                  } else {
                    if (((((curPosD % strideD) == (int32_t)0) &&
                          ((curPosH % strideH) == (int32_t)0)) &&
                         ((curPosW % strideW) == (int32_t)0))) {

                      int64_t idxInputD = (curPosD / strideD);

                      int64_t idxInputH = (curPosH / strideH);

                      int64_t idxInputW = (curPosW / strideW);
                      val =
                          Arr5DIdxRowM(inputArr, N, DPrime, HPrime, WPrime, CI,
                                       n, idxInputD, idxInputH, idxInputW, ci);
                    } else {
                      val = funcSSCons((int32_t)0);
                    }
                  }
                  Arr2DIdxRowM(outputArr, RRows, RCols,
                               ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) +
                                 (fw * CI)) +
                                ci),
                               linIdxFilterMult) = val;
                }
              }
            }
          }
          linIdxFilterMult = (linIdxFilterMult + (int32_t)1);
          leftTopCornerW = (leftTopCornerW + (int32_t)1);
        }

        leftTopCornerH = (leftTopCornerH + (int32_t)1);
      }

      leftTopCornerD = (leftTopCornerD + (int32_t)1);
    }
  }
}

void ConvTranspose3D(int64_t N, int64_t DPrime, int64_t HPrime, int64_t WPrime,
                     int64_t CI, int64_t FD, int64_t FH, int64_t FW, int64_t CO,
                     int64_t D, int64_t H, int64_t W, int64_t zPadTrDLeft,
                     int64_t zPadTrDRight, int64_t zPadTrHLeft,
                     int64_t zPadTrHRight, int64_t zPadTrWLeft,
                     int64_t zPadTrWRight, int64_t strideD, int64_t strideH,
                     int64_t strideW, uint64_t *inputArr, uint64_t *filterArr,
                     uint64_t *outArr) {

  int64_t reshapedFilterRows = CO;

  int64_t reshapedFilterCols = (((FD * FH) * FW) * CI);

  int64_t reshapedIPRows = (((FD * FH) * FW) * CI);

  int64_t reshapedIPCols = (((N * D) * H) * W);

  uint64_t *filterReshaped =
      make_array<uint64_t>(reshapedFilterRows, reshapedFilterCols);

  uint64_t *inputReshaped =
      make_array<uint64_t>(reshapedIPRows, reshapedIPCols);

  uint64_t *matmulOP = make_array<uint64_t>(reshapedFilterRows, reshapedIPCols);
  ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
  ConvTranspose3DReshapeInput(
      N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight,
      zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH,
      strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
  MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols,
           filterReshaped, inputReshaped, matmulOP, 1);
  Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
  ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
  ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
  ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int64_t N, int64_t D, int64_t H, int64_t W,
                              int64_t CI, int64_t FD, int64_t FH, int64_t FW,
                              int64_t CO, int64_t zPadDLeft, int64_t zPadDRight,
                              int64_t zPadHLeft, int64_t zPadHRight,
                              int64_t zPadWLeft, int64_t zPadWRight,
                              int64_t strideD, int64_t strideH, int64_t strideW,
                              int64_t outD, int64_t outH, int64_t outW,
                              uint64_t *inputArr, uint64_t *filterArr,
                              uint64_t *outArr) {
  for (uint64_t n = (int32_t)0; n < N; n++) {
    for (uint64_t co = (int32_t)0; co < CO; co++) {
      for (uint64_t d = (int32_t)0; d < outD; d++) {
        for (uint64_t h = (int32_t)0; h < outH; h++) {
          for (uint64_t w = (int32_t)0; w < outW; w++) {
            for (uint64_t ci = (int32_t)0; ci < CI; ci++) {

              uint64_t val = funcSSCons((int32_t)0);
              for (uint64_t fd = d; fd < (d + FD); fd++) {
                for (uint64_t fh = h; fh < (h + FH); fh++) {
                  for (uint64_t fw = w; fw < (w + FW); fw++) {

                    int64_t curPosD = ((fd - zPadDLeft) / strideD);

                    int64_t curPosH = ((fh - zPadHLeft) / strideD);

                    int64_t curPosW = ((fw - zPadWLeft) / strideD);
                    if ((((((((((curPosD >= (int32_t)0) &&
                                (curPosH >= (int32_t)0)) &&
                               (curPosW >= (int32_t)0)) &&
                              (curPosD < D)) &&
                             (curPosH < H)) &&
                            (curPosW < W)) &&
                           (((fd - zPadDLeft) % strideD) == (int32_t)0)) &&
                          (((fh - zPadHLeft) % strideH) == (int32_t)0)) &&
                         (((fw - zPadWLeft) % strideW) == (int32_t)0))) {

                      int64_t curFilterPosD = (((FD + d) - fd) - (int32_t)1);

                      int64_t curFilterPosH = (((FH + h) - fh) - (int32_t)1);

                      int64_t curFilterPosW = (((FW + w) - fw) - (int32_t)1);
                      val = SecretAdd(
                          val, SecretMult(
                                   Arr5DIdxRowM(inputArr, N, D, H, W, CI, n,
                                                curPosD, curPosH, curPosW, ci),
                                   Arr5DIdxRowM(filterArr, FD, FH, FW, CO, CI,
                                                curFilterPosD, curFilterPosH,
                                                curFilterPosW, co, ci)));
                    }
                  }
                }
              }
              Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d, h, w, co) =
                  SecretAdd(Arr5DIdxRowM(outArr, N, outD, outH, outW, CO, n, d,
                                         h, w, co),
                            val);
            }
          }
        }
      }
    }
  }
}

void ConvTranspose3DLoop(int64_t N, int64_t DPrime, int64_t HPrime,
                         int64_t WPrime, int64_t CI, int64_t FD, int64_t FH,
                         int64_t FW, int64_t CO, int64_t D, int64_t H,
                         int64_t W, int64_t zPadTrDLeft, int64_t zPadTrDRight,
                         int64_t zPadTrHLeft, int64_t zPadTrHRight,
                         int64_t zPadTrWLeft, int64_t zPadTrWRight,
                         int64_t strideD, int64_t strideH, int64_t strideW,
                         uint64_t *inputArr, uint64_t *filterArr,
                         uint64_t *outArr) {
  ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO,
                           zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight,
                           zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW,
                           D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      Arr2DIdxRowM(outArr, s1, s2, i, j) = Arr2DIdxRowM(inArr, s2, s1, j, i);
    }
  }
}

void Pad442(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t inps1,
            int64_t inps2, int64_t inps3, int64_t inps4, uint64_t *inpArr,
            int64_t pads1, int64_t pads2, int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)0);

  int64_t rbounds1excl =
      (s1 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)1));

  int64_t lbounds2 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)0);

  int64_t rbounds2excl =
      (s2 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)1));

  int64_t lbounds3 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)0);

  int64_t rbounds3excl =
      (s3 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)1));

  int64_t lbounds4 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)0);

  int64_t rbounds4excl =
      (s4 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)1));
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          if (((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                    (j >= lbounds2)) &&
                   (j < rbounds2excl)) &&
                  (k >= lbounds3)) &&
                 (k < rbounds3excl)) &&
                (l >= lbounds4)) &&
               (l < rbounds4excl))) {
            Arr4DIdxRowM(outArr, s1, s2, s3, s4, i, j, k, l) =
                Arr4DIdxRowM(inpArr, inps1, inps2, inps3, inps4,
                             (i - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)0, (int32_t)0)),
                             (j - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)1, (int32_t)0)),
                             (k - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)2, (int32_t)0)),
                             (l - Arr2DIdxRowM(paddings, pads1, pads2,
                                               (int32_t)3, (int32_t)0)));
          } else {
            Arr4DIdxRowM(outArr, s1, s2, s3, s4, i, j, k, l) =
                funcSSCons((int32_t)0);
          }
        }
      }
    }
  }
}

void Pad552(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
            int64_t inps1, int64_t inps2, int64_t inps3, int64_t inps4,
            int64_t inps5, uint64_t *inpArr, int64_t pads1, int64_t pads2,
            int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)0);

  int64_t rbounds1excl =
      (s1 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)0, (int32_t)1));

  int64_t lbounds2 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)0);

  int64_t rbounds2excl =
      (s2 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)1, (int32_t)1));

  int64_t lbounds3 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)0);

  int64_t rbounds3excl =
      (s3 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)2, (int32_t)1));

  int64_t lbounds4 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)0);

  int64_t rbounds4excl =
      (s4 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)3, (int32_t)1));

  int64_t lbounds5 =
      Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)4, (int32_t)0);

  int64_t rbounds5excl =
      (s5 - Arr2DIdxRowM(paddings, pads1, pads2, (int32_t)4, (int32_t)1));
  for (uint64_t i = (int32_t)0; i < s1; i++) {
    for (uint64_t j = (int32_t)0; j < s2; j++) {
      for (uint64_t k = (int32_t)0; k < s3; k++) {
        for (uint64_t l = (int32_t)0; l < s4; l++) {
          for (uint64_t m = (int32_t)0; m < s5; m++) {
            if (((((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                        (j >= lbounds2)) &&
                       (j < rbounds2excl)) &&
                      (k >= lbounds3)) &&
                     (k < rbounds3excl)) &&
                    (l >= lbounds4)) &&
                   (l < rbounds4excl)) &&
                  (m >= lbounds5)) &&
                 (m < rbounds5excl))) {
              Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                  Arr5DIdxRowM(inpArr, inps1, inps2, inps3, inps4, inps5,
                               (i - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)0, (int32_t)0)),
                               (j - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)1, (int32_t)0)),
                               (k - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)2, (int32_t)0)),
                               (l - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)3, (int32_t)0)),
                               (m - Arr2DIdxRowM(paddings, pads1, pads2,
                                                 (int32_t)4, (int32_t)0)));
            } else {
              Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i, j, k, l, m) =
                  funcSSCons((int32_t)0);
            }
          }
        }
      }
    }
  }
}

void PadONNX441(int64_t o1, int64_t o2, int64_t o3, int64_t o4, int64_t i1,
                int64_t i2, int64_t i3, int64_t i4, uint64_t *inpArr,
                int64_t pads, int64_t *paddings, uint64_t *outArr) {

  int64_t lbounds1 = Arr1DIdxRowM(paddings, pads, (int32_t)0);

  int64_t rbounds1excl = (o1 - Arr1DIdxRowM(paddings, pads, (int32_t)4));

  int64_t lbounds2 = Arr1DIdxRowM(paddings, pads, (int32_t)1);

  int64_t rbounds2excl = (o2 - Arr1DIdxRowM(paddings, pads, (int32_t)5));

  int64_t lbounds3 = Arr1DIdxRowM(paddings, pads, (int32_t)2);

  int64_t rbounds3excl = (o3 - Arr1DIdxRowM(paddings, pads, (int32_t)6));

  int64_t lbounds4 = Arr1DIdxRowM(paddings, pads, (int32_t)3);

  int64_t rbounds4excl = (o4 - Arr1DIdxRowM(paddings, pads, (int32_t)7));
  for (uint64_t i = (int32_t)0; i < o1; i++) {
    for (uint64_t j = (int32_t)0; j < o2; j++) {
      for (uint64_t k = (int32_t)0; k < o3; k++) {
        for (uint64_t l = (int32_t)0; l < o4; l++) {
          if (((((((((i >= lbounds1) && (i < rbounds1excl)) &&
                    (j >= lbounds2)) &&
                   (j < rbounds2excl)) &&
                  (k >= lbounds3)) &&
                 (k < rbounds3excl)) &&
                (l >= lbounds4)) &&
               (l < rbounds4excl))) {
            Arr4DIdxRowM(outArr, o1, o2, o3, o4, i, j, k, l) =
                Arr4DIdxRowM(inpArr, i1, i2, i3, i4,
                             (i - Arr1DIdxRowM(paddings, pads, (int32_t)0)),
                             (j - Arr1DIdxRowM(paddings, pads, (int32_t)1)),
                             (k - Arr1DIdxRowM(paddings, pads, (int32_t)2)),
                             (l - Arr1DIdxRowM(paddings, pads, (int32_t)3)));
          } else {
            Arr4DIdxRowM(outArr, o1, o2, o3, o4, i, j, k, l) =
                funcSSCons((int32_t)0);
          }
        }
      }
    }
  }
}

void Squeeze24(int64_t s1, int64_t s2, int64_t dim1, int64_t dim2, int64_t ins1,
               int64_t ins2, int64_t ins3, int64_t ins4, uint64_t *inArr,
               uint64_t *outArr) {
  for (uint64_t i = (int32_t)0; i < ins1; i++) {
    for (uint64_t j = (int32_t)0; j < ins2; j++) {
      for (uint64_t k = (int32_t)0; k < ins3; k++) {
        for (uint64_t l = (int32_t)0; l < ins4; l++) {

          int64_t linIdx =
              ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) +
                (k * ins4)) +
               l);

          int64_t outIdx1 = (linIdx / s2);

          int64_t outIdx2 = (linIdx % s2);
          Arr2DIdxRowM(outArr, s1, s2, outIdx1, outIdx2) =
              Arr4DIdxRowM(inArr, ins1, ins2, ins3, ins4, i, j, k, l);
        }
      }
    }
  }
}

void FusedBatchNorm4411(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                        uint64_t *inArr, uint64_t *multArr, uint64_t *biasArr,
                        int64_t multExprScaleDownSf, int64_t biasExprScaleUpSf,
                        uint64_t *outputArr) {

  int64_t inpSize = (((s1 * s2) * s3) * s4);

  uint64_t *inArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multExprAns = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(inArrReshaped, inpSize, linIdx) =
              Arr4DIdxRowM(inArr, s1, s2, s3, s4, i1, i2, i3, i4);
          Arr1DIdxRowM(multArrReshaped, inpSize, linIdx) =
              Arr1DIdxRowM(multArr, s4, i4);
        }
      }
    }
  }
  ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped,
                             multExprAns);
  if ((multExprScaleDownSf > (int32_t)0)) {
    ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
  }

  uint64_t *biasArrScaledUp = make_array<uint64_t>(s4);
  for (uint64_t ii = (int32_t)0; ii < s4; ii++) {
    Arr1DIdxRowM(biasArrScaledUp, s4, ii) = Arr1DIdxRowM(biasArr, s4, ii);
  }
  if ((biasExprScaleUpSf > (int32_t)0)) {
    ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
  }
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outputArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              SecretAdd(Arr1DIdxRowM(multExprAns, inpSize, linIdx),
                        Arr1DIdxRowM(biasArrScaledUp, s4, i4));
        }
      }
    }
  }
  ClearMemSecret1(inpSize, inArrReshaped);
  ClearMemSecret1(inpSize, multArrReshaped);
  ClearMemSecret1(inpSize, multExprAns);
  ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                        int64_t s5, uint64_t *inArr, uint64_t *multArr,
                        uint64_t *biasArr, int64_t multExprScaleDownSf,
                        int64_t biasExprScaleUpSf, uint64_t *outputArr) {

  int64_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *inArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multArrReshaped = make_array<uint64_t>(inpSize);

  uint64_t *multExprAns = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(inArrReshaped, inpSize, linIdx) =
                Arr5DIdxRowM(inArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
            Arr1DIdxRowM(multArrReshaped, inpSize, linIdx) =
                Arr1DIdxRowM(multArr, s5, i5);
          }
        }
      }
    }
  }
  ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped,
                             multExprAns);
  if ((multExprScaleDownSf > (int32_t)0)) {
    ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
  }

  uint64_t *biasArrScaledUp = make_array<uint64_t>(s5);
  for (uint64_t ii = (int32_t)0; ii < s5; ii++) {
    Arr1DIdxRowM(biasArrScaledUp, s5, ii) = Arr1DIdxRowM(biasArr, s5, ii);
  }
  if ((biasExprScaleUpSf > (int32_t)0)) {
    ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
  }
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outputArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                SecretAdd(Arr1DIdxRowM(multExprAns, inpSize, linIdx),
                          Arr1DIdxRowM(biasArrScaledUp, s5, i5));
          }
        }
      }
    }
  }
  ClearMemSecret1(inpSize, inArrReshaped);
  ClearMemSecret1(inpSize, multArrReshaped);
  ClearMemSecret1(inpSize, multExprAns);
  ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int64_t s1, int64_t s2, uint64_t *arr1, uint64_t *arr2,
                  uint64_t *outArr) {

  int64_t inpSize = (s1 * s2);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
          Arr2DIdxRowM(arr1, s1, s2, i1, i2);
      Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
          Arr2DIdxRowM(arr2, s1, s2, i1, i2);
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int64_t s1, int64_t s2, int64_t s3, int64_t s4,
                  uint64_t *arr1, uint64_t *arr2, uint64_t *outArr) {

  int64_t inpSize = (((s1 * s2) * s3) * s4);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
              Arr4DIdxRowM(arr1, s1, s2, s3, s4, i1, i2, i3, i4);
          Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
              Arr4DIdxRowM(arr2, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
                  uint64_t *arr1, uint64_t *arr2, uint64_t *outArr) {

  int64_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *arr1Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *arr2Reshaped = make_array<uint64_t>(inpSize);

  uint64_t *outArrReshaped = make_array<uint64_t>(inpSize);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(arr1Reshaped, inpSize, linIdx) =
                Arr5DIdxRowM(arr1, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
            Arr1DIdxRowM(arr2Reshaped, inpSize, linIdx) =
                Arr5DIdxRowM(arr2, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
          }
        }
      }
    }
  }
  ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped,
                                 outArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                Arr1DIdxRowM(outArrReshaped, inpSize, linIdx);
          }
        }
      }
    }
  }
  ClearMemSecret1(inpSize, arr1Reshaped);
  ClearMemSecret1(inpSize, arr2Reshaped);
  ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int64_t outS1, int64_t outS2, int64_t inS1, int64_t inS2,
                  int64_t inS3, int64_t inS4, uint64_t *inputArr, int64_t *axes,
                  uint64_t *outputArr) {

  int64_t divisor = (inS2 * inS3);

  int64_t outputSize = (outS1 * outS2);

  uint64_t *sumArr = make_array<uint64_t>(outputSize);

  uint64_t *outputArrReshaped = make_array<uint64_t>(outputSize);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {

      uint64_t summ = funcSSCons((int32_t)0);
      for (uint64_t i = (int32_t)0; i < inS2; i++) {
        for (uint64_t j = (int32_t)0; j < inS3; j++) {
          summ = SecretAdd(summ, Arr4DIdxRowM(inputArr, inS1, inS2, inS3, inS4,
                                              i1, i, j, i2));
        }
      }
      Arr1DIdxRowM(sumArr, outputSize, ((i1 * outS2) + i2)) = summ;
    }
  }
  ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {
      Arr2DIdxRowM(outputArr, outS1, outS2, i1, i2) =
          Arr1DIdxRowM(outputArrReshaped, outputSize, ((i1 * outS2) + i2));
    }
  }
  ClearMemSecret1(outputSize, sumArr);
  ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int64_t outS1, int64_t outS2, int64_t inS1, int64_t inS2,
                      int64_t inS3, int64_t inS4, uint64_t *inputArr,
                      int64_t axis1, int64_t axis2, uint64_t *outputArr) {

  int64_t divisor = (inS3 * inS4);

  int64_t outputSize = (outS1 * outS2);

  uint64_t *sumArr = make_array<uint64_t>(outputSize);

  uint64_t *outputArrReshaped = make_array<uint64_t>(outputSize);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {

      uint64_t summ = funcSSCons((int32_t)0);
      for (uint64_t i = (int32_t)0; i < inS3; i++) {
        for (uint64_t j = (int32_t)0; j < inS4; j++) {
          summ = SecretAdd(summ, Arr4DIdxRowM(inputArr, inS1, inS2, inS3, inS4,
                                              i1, i2, i, j));
        }
      }
      Arr1DIdxRowM(sumArr, outputSize, ((i1 * outS2) + i2)) = summ;
    }
  }
  ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
  for (uint64_t i1 = (int32_t)0; i1 < outS1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < outS2; i2++) {
      Arr2DIdxRowM(outputArr, outS1, outS2, i1, i2) =
          Arr1DIdxRowM(outputArrReshaped, outputSize, ((i1 * outS2) + i2));
    }
  }
  ClearMemSecret1(outputSize, sumArr);
  ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int64_t outArrS1, int64_t inArrS1, int64_t inArrS2,
             uint64_t *inArr, int64_t dim, uint64_t *outArr) {
  ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int64_t outs1, int64_t outs2, int64_t outs3, int64_t ins1,
             int64_t ins2, int64_t ins3, int64_t ins4, uint64_t *inArr,
             int64_t dim, uint64_t *outArr) {

  int64_t size = ((ins1 * ins2) * ins3);

  uint64_t *reshapedInArr = make_array<uint64_t>(size, ins4);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < ins1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < ins2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < ins3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < ins4; i4++) {

          int64_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
          Arr2DIdxRowM(reshapedInArr, size, ins4, linIdx, i4) =
              Arr4DIdxRowM(inArr, ins1, ins2, ins3, ins4, i1, i2, i3, i4);
        }
      }
    }
  }
  ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
  for (uint64_t i1 = (int32_t)0; i1 < ins1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < ins2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < ins3; i3++) {

        int64_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
        Arr3DIdxRowM(outArr, outs1, outs2, outs3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedOutArr, size, linIdx);
      }
    }
  }
  ClearMemSecret2(size, ins4, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr,
           int64_t sf, uint64_t doTruncation) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedInArr, size, linIdx) =
          Arr2DIdxRowM(inArr, s1, s2, i1, i2);
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedOutArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *inArr,
           uint64_t *outArr, int64_t sf, uint64_t doTruncation) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedInArr, size, linIdx) =
              Arr4DIdxRowM(inArr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(outArr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedOutArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int64_t s1, int64_t s2, int64_t s3, int64_t s4, int64_t s5,
           uint64_t *inArr, uint64_t *outArr, int64_t sf,
           uint64_t doTruncation) {

  int64_t size = ((((s1 * s2) * s3) * s4) * s5);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr1DIdxRowM(reshapedInArr, size, linIdx) =
                Arr5DIdxRowM(inArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5);
          }
        }
      }
    }
  }
  Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {
          for (uint64_t i5 = (int32_t)0; i5 < s5; i5++) {

            int64_t linIdx =
                ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) +
                   ((i3 * s4) * s5)) +
                  (i4 * s5)) +
                 i5);
            Arr5DIdxRowM(outArr, s1, s2, s3, s4, s5, i1, i2, i3, i4, i5) =
                Arr1DIdxRowM(reshapedOutArr, size, linIdx);
          }
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int64_t s1, int64_t s2, uint64_t *inArr, uint64_t *outArr,
            int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedInArr = make_array<uint64_t>(size);

  uint64_t *reshapedOutArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedInArr, size, linIdx) =
          Arr2DIdxRowM(inArr, s1, s2, i1, i2);
    }
  }
  Floor(size, reshapedInArr, reshapedOutArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(outArr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedOutArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedInArr);
  ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int64_t s1, uint64_t *arr, int64_t sf) { ScaleUp(s1, arr, sf); }

void ScaleUp2(int64_t s1, int64_t s2, uint64_t *arr, int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedArr, size, linIdx) =
          Arr2DIdxRowM(arr, s1, s2, i1, i2);
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(arr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int64_t s1, int64_t s2, int64_t s3, uint64_t *arr, int64_t sf) {

  int64_t size = ((s1 * s2) * s3);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr1DIdxRowM(reshapedArr, size, linIdx) =
            Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedArr, size, linIdx);
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *arr,
              int64_t sf) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedArr, size, linIdx) =
              Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ScaleUp(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int64_t s1, uint64_t *arr, int64_t sf) {
  ScaleDown(s1, arr, sf);
}

void ScaleDown2(int64_t s1, int64_t s2, uint64_t *arr, int64_t sf) {

  int64_t size = (s1 * s2);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr1DIdxRowM(reshapedArr, size, linIdx) =
          Arr2DIdxRowM(arr, s1, s2, i1, i2);
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {

      int64_t linIdx = ((i1 * s2) + i2);
      Arr2DIdxRowM(arr, s1, s2, i1, i2) =
          Arr1DIdxRowM(reshapedArr, size, linIdx);
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int64_t s1, int64_t s2, int64_t s3, uint64_t *arr, int64_t sf) {

  int64_t size = ((s1 * s2) * s3);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr1DIdxRowM(reshapedArr, size, linIdx) =
            Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3);
      }
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {

        int64_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
        Arr3DIdxRowM(arr, s1, s2, s3, i1, i2, i3) =
            Arr1DIdxRowM(reshapedArr, size, linIdx);
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int64_t s1, int64_t s2, int64_t s3, int64_t s4, uint64_t *arr,
                int64_t sf) {

  int64_t size = (((s1 * s2) * s3) * s4);

  uint64_t *reshapedArr = make_array<uint64_t>(size);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr1DIdxRowM(reshapedArr, size, linIdx) =
              Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4);
        }
      }
    }
  }
  ScaleDown(size, reshapedArr, sf);
  for (uint64_t i1 = (int32_t)0; i1 < s1; i1++) {
    for (uint64_t i2 = (int32_t)0; i2 < s2; i2++) {
      for (uint64_t i3 = (int32_t)0; i3 < s3; i3++) {
        for (uint64_t i4 = (int32_t)0; i4 < s4; i4++) {

          int64_t linIdx =
              ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
          Arr4DIdxRowM(arr, s1, s2, s3, s4, i1, i2, i3, i4) =
              Arr1DIdxRowM(reshapedArr, size, linIdx);
        }
      }
    }
  }
  ClearMemSecret1(size, reshapedArr);
}

int main(int argc, char **argv) {
  ArgMapping amap;

  amap.arg("r", party, "Role of party: ALICE/SERVER = 1; BOB/CLIENT = 2");
  amap.arg("p", port, "Port Number");
  amap.arg("ip", address, "IP Address of server (ALICE)");
  amap.arg("nt", num_threads, "Number of Threads");
  amap.arg("ell", bitlength, "Uniform Bitwidth");
  amap.parse(argc, argv);

  assert(party == SERVER || party == CLIENT);

  uint64_t *tmp0 =
      make_array<uint64_t>((int32_t)1, (int32_t)227, (int32_t)227, (int32_t)3);
  /* Variable to read the clear value corresponding to the input variable tmp0
   * at (1930,1-1930,46) */
  uint64_t __tmp_in_tmp0;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)227; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)227; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)3; i3++) {
          if ((party == CLIENT)) {
            cin >> __tmp_in_tmp0;
          }
          Arr4DIdxRowM(tmp0, (int32_t)1, (int32_t)227, (int32_t)227, (int32_t)3,
                       i0, i1, i2, i3) = (party == CLIENT) ? __tmp_in_tmp0 : 0;
        }
      }
    }
  }

  uint64_t *tmp1 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)3, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp1
   * at (1933,1-1933,43) */
  uint64_t __tmp_in_tmp1;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)3; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp1;
          }
          Arr4DIdxRowM(tmp1, (int32_t)3, (int32_t)3, (int32_t)3, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp1 : 0;
        }
      }
    }
  }

  uint64_t *tmp2 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp2
   * at (1936,1-1936,34) */
  uint64_t __tmp_in_tmp2;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp2;
    }
    Arr1DIdxRowM(tmp2, (int32_t)64, i0) = (party == SERVER) ? __tmp_in_tmp2 : 0;
  }

  uint64_t *tmp3 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp3
   * at (1939,1-1939,44) */
  uint64_t __tmp_in_tmp3;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp3;
          }
          Arr4DIdxRowM(tmp3, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp3 : 0;
        }
      }
    }
  }

  uint64_t *tmp4 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp4
   * at (1942,1-1942,34) */
  uint64_t __tmp_in_tmp4;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp4;
    }
    Arr1DIdxRowM(tmp4, (int32_t)16, i0) = (party == SERVER) ? __tmp_in_tmp4 : 0;
  }

  uint64_t *tmp5 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)16, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp5
   * at (1945,1-1945,44) */
  uint64_t __tmp_in_tmp5;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)16; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp5;
          }
          Arr4DIdxRowM(tmp5, (int32_t)1, (int32_t)1, (int32_t)16, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp5 : 0;
        }
      }
    }
  }

  uint64_t *tmp6 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp6
   * at (1948,1-1948,34) */
  uint64_t __tmp_in_tmp6;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp6;
    }
    Arr1DIdxRowM(tmp6, (int32_t)64, i0) = (party == SERVER) ? __tmp_in_tmp6 : 0;
  }

  uint64_t *tmp7 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp7
   * at (1951,1-1951,44) */
  uint64_t __tmp_in_tmp7;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)16; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp7;
          }
          Arr4DIdxRowM(tmp7, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp7 : 0;
        }
      }
    }
  }

  uint64_t *tmp8 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp8
   * at (1954,1-1954,34) */
  uint64_t __tmp_in_tmp8;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp8;
    }
    Arr1DIdxRowM(tmp8, (int32_t)64, i0) = (party == SERVER) ? __tmp_in_tmp8 : 0;
  }

  uint64_t *tmp9 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)128, (int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp9
   * at (1957,1-1957,45) */
  uint64_t __tmp_in_tmp9;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)128; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)16; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp9;
          }
          Arr4DIdxRowM(tmp9, (int32_t)1, (int32_t)1, (int32_t)128, (int32_t)16,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp9 : 0;
        }
      }
    }
  }

  uint64_t *tmp10 = make_array<uint64_t>((int32_t)16);
  /* Variable to read the clear value corresponding to the input variable tmp10
   * at (1960,1-1960,35) */
  uint64_t __tmp_in_tmp10;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)16; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp10;
    }
    Arr1DIdxRowM(tmp10, (int32_t)16, i0) =
        (party == SERVER) ? __tmp_in_tmp10 : 0;
  }

  uint64_t *tmp11 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)16, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp11
   * at (1963,1-1963,45) */
  uint64_t __tmp_in_tmp11;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)16; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp11;
          }
          Arr4DIdxRowM(tmp11, (int32_t)1, (int32_t)1, (int32_t)16, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp11 : 0;
        }
      }
    }
  }

  uint64_t *tmp12 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp12
   * at (1966,1-1966,35) */
  uint64_t __tmp_in_tmp12;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp12;
    }
    Arr1DIdxRowM(tmp12, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp12 : 0;
  }

  uint64_t *tmp13 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp13
   * at (1969,1-1969,45) */
  uint64_t __tmp_in_tmp13;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)16; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp13;
          }
          Arr4DIdxRowM(tmp13, (int32_t)3, (int32_t)3, (int32_t)16, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp13 : 0;
        }
      }
    }
  }

  uint64_t *tmp14 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp14
   * at (1972,1-1972,35) */
  uint64_t __tmp_in_tmp14;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp14;
    }
    Arr1DIdxRowM(tmp14, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp14 : 0;
  }

  uint64_t *tmp15 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)128, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp15
   * at (1975,1-1975,46) */
  uint64_t __tmp_in_tmp15;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)128; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp15;
          }
          Arr4DIdxRowM(tmp15, (int32_t)1, (int32_t)1, (int32_t)128, (int32_t)32,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp15 : 0;
        }
      }
    }
  }

  uint64_t *tmp16 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp16
   * at (1978,1-1978,35) */
  uint64_t __tmp_in_tmp16;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp16;
    }
    Arr1DIdxRowM(tmp16, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp16 : 0;
  }

  uint64_t *tmp17 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)32, (int32_t)128);
  /* Variable to read the clear value corresponding to the input variable tmp17
   * at (1981,1-1981,46) */
  uint64_t __tmp_in_tmp17;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)32; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)128; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp17;
          }
          Arr4DIdxRowM(tmp17, (int32_t)1, (int32_t)1, (int32_t)32, (int32_t)128,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp17 : 0;
        }
      }
    }
  }

  uint64_t *tmp18 = make_array<uint64_t>((int32_t)128);
  /* Variable to read the clear value corresponding to the input variable tmp18
   * at (1984,1-1984,36) */
  uint64_t __tmp_in_tmp18;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)128; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp18;
    }
    Arr1DIdxRowM(tmp18, (int32_t)128, i0) =
        (party == SERVER) ? __tmp_in_tmp18 : 0;
  }

  uint64_t *tmp19 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)128);
  /* Variable to read the clear value corresponding to the input variable tmp19
   * at (1987,1-1987,46) */
  uint64_t __tmp_in_tmp19;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)32; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)128; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp19;
          }
          Arr4DIdxRowM(tmp19, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)128,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp19 : 0;
        }
      }
    }
  }

  uint64_t *tmp20 = make_array<uint64_t>((int32_t)128);
  /* Variable to read the clear value corresponding to the input variable tmp20
   * at (1990,1-1990,36) */
  uint64_t __tmp_in_tmp20;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)128; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp20;
    }
    Arr1DIdxRowM(tmp20, (int32_t)128, i0) =
        (party == SERVER) ? __tmp_in_tmp20 : 0;
  }

  uint64_t *tmp21 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)256, (int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp21
   * at (1993,1-1993,46) */
  uint64_t __tmp_in_tmp21;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)256; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)32; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp21;
          }
          Arr4DIdxRowM(tmp21, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)32,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp21 : 0;
        }
      }
    }
  }

  uint64_t *tmp22 = make_array<uint64_t>((int32_t)32);
  /* Variable to read the clear value corresponding to the input variable tmp22
   * at (1996,1-1996,35) */
  uint64_t __tmp_in_tmp22;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)32; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp22;
    }
    Arr1DIdxRowM(tmp22, (int32_t)32, i0) =
        (party == SERVER) ? __tmp_in_tmp22 : 0;
  }

  uint64_t *tmp23 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)32, (int32_t)128);
  /* Variable to read the clear value corresponding to the input variable tmp23
   * at (1999,1-1999,46) */
  uint64_t __tmp_in_tmp23;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)32; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)128; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp23;
          }
          Arr4DIdxRowM(tmp23, (int32_t)1, (int32_t)1, (int32_t)32, (int32_t)128,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp23 : 0;
        }
      }
    }
  }

  uint64_t *tmp24 = make_array<uint64_t>((int32_t)128);
  /* Variable to read the clear value corresponding to the input variable tmp24
   * at (2002,1-2002,36) */
  uint64_t __tmp_in_tmp24;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)128; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp24;
    }
    Arr1DIdxRowM(tmp24, (int32_t)128, i0) =
        (party == SERVER) ? __tmp_in_tmp24 : 0;
  }

  uint64_t *tmp25 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)128);
  /* Variable to read the clear value corresponding to the input variable tmp25
   * at (2005,1-2005,46) */
  uint64_t __tmp_in_tmp25;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)32; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)128; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp25;
          }
          Arr4DIdxRowM(tmp25, (int32_t)3, (int32_t)3, (int32_t)32, (int32_t)128,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp25 : 0;
        }
      }
    }
  }

  uint64_t *tmp26 = make_array<uint64_t>((int32_t)128);
  /* Variable to read the clear value corresponding to the input variable tmp26
   * at (2008,1-2008,36) */
  uint64_t __tmp_in_tmp26;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)128; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp26;
    }
    Arr1DIdxRowM(tmp26, (int32_t)128, i0) =
        (party == SERVER) ? __tmp_in_tmp26 : 0;
  }

  uint64_t *tmp27 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)256, (int32_t)48);
  /* Variable to read the clear value corresponding to the input variable tmp27
   * at (2011,1-2011,46) */
  uint64_t __tmp_in_tmp27;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)256; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)48; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp27;
          }
          Arr4DIdxRowM(tmp27, (int32_t)1, (int32_t)1, (int32_t)256, (int32_t)48,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp27 : 0;
        }
      }
    }
  }

  uint64_t *tmp28 = make_array<uint64_t>((int32_t)48);
  /* Variable to read the clear value corresponding to the input variable tmp28
   * at (2014,1-2014,35) */
  uint64_t __tmp_in_tmp28;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)48; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp28;
    }
    Arr1DIdxRowM(tmp28, (int32_t)48, i0) =
        (party == SERVER) ? __tmp_in_tmp28 : 0;
  }

  uint64_t *tmp29 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)48, (int32_t)192);
  /* Variable to read the clear value corresponding to the input variable tmp29
   * at (2017,1-2017,46) */
  uint64_t __tmp_in_tmp29;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)48; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)192; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp29;
          }
          Arr4DIdxRowM(tmp29, (int32_t)1, (int32_t)1, (int32_t)48, (int32_t)192,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp29 : 0;
        }
      }
    }
  }

  uint64_t *tmp30 = make_array<uint64_t>((int32_t)192);
  /* Variable to read the clear value corresponding to the input variable tmp30
   * at (2020,1-2020,36) */
  uint64_t __tmp_in_tmp30;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)192; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp30;
    }
    Arr1DIdxRowM(tmp30, (int32_t)192, i0) =
        (party == SERVER) ? __tmp_in_tmp30 : 0;
  }

  uint64_t *tmp31 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)48, (int32_t)192);
  /* Variable to read the clear value corresponding to the input variable tmp31
   * at (2023,1-2023,46) */
  uint64_t __tmp_in_tmp31;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)48; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)192; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp31;
          }
          Arr4DIdxRowM(tmp31, (int32_t)3, (int32_t)3, (int32_t)48, (int32_t)192,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp31 : 0;
        }
      }
    }
  }

  uint64_t *tmp32 = make_array<uint64_t>((int32_t)192);
  /* Variable to read the clear value corresponding to the input variable tmp32
   * at (2026,1-2026,36) */
  uint64_t __tmp_in_tmp32;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)192; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp32;
    }
    Arr1DIdxRowM(tmp32, (int32_t)192, i0) =
        (party == SERVER) ? __tmp_in_tmp32 : 0;
  }

  uint64_t *tmp33 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)384, (int32_t)48);
  /* Variable to read the clear value corresponding to the input variable tmp33
   * at (2029,1-2029,46) */
  uint64_t __tmp_in_tmp33;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)384; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)48; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp33;
          }
          Arr4DIdxRowM(tmp33, (int32_t)1, (int32_t)1, (int32_t)384, (int32_t)48,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp33 : 0;
        }
      }
    }
  }

  uint64_t *tmp34 = make_array<uint64_t>((int32_t)48);
  /* Variable to read the clear value corresponding to the input variable tmp34
   * at (2032,1-2032,35) */
  uint64_t __tmp_in_tmp34;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)48; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp34;
    }
    Arr1DIdxRowM(tmp34, (int32_t)48, i0) =
        (party == SERVER) ? __tmp_in_tmp34 : 0;
  }

  uint64_t *tmp35 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)48, (int32_t)192);
  /* Variable to read the clear value corresponding to the input variable tmp35
   * at (2035,1-2035,46) */
  uint64_t __tmp_in_tmp35;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)48; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)192; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp35;
          }
          Arr4DIdxRowM(tmp35, (int32_t)1, (int32_t)1, (int32_t)48, (int32_t)192,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp35 : 0;
        }
      }
    }
  }

  uint64_t *tmp36 = make_array<uint64_t>((int32_t)192);
  /* Variable to read the clear value corresponding to the input variable tmp36
   * at (2038,1-2038,36) */
  uint64_t __tmp_in_tmp36;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)192; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp36;
    }
    Arr1DIdxRowM(tmp36, (int32_t)192, i0) =
        (party == SERVER) ? __tmp_in_tmp36 : 0;
  }

  uint64_t *tmp37 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)48, (int32_t)192);
  /* Variable to read the clear value corresponding to the input variable tmp37
   * at (2041,1-2041,46) */
  uint64_t __tmp_in_tmp37;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)48; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)192; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp37;
          }
          Arr4DIdxRowM(tmp37, (int32_t)3, (int32_t)3, (int32_t)48, (int32_t)192,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp37 : 0;
        }
      }
    }
  }

  uint64_t *tmp38 = make_array<uint64_t>((int32_t)192);
  /* Variable to read the clear value corresponding to the input variable tmp38
   * at (2044,1-2044,36) */
  uint64_t __tmp_in_tmp38;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)192; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp38;
    }
    Arr1DIdxRowM(tmp38, (int32_t)192, i0) =
        (party == SERVER) ? __tmp_in_tmp38 : 0;
  }

  uint64_t *tmp39 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)384, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp39
   * at (2047,1-2047,46) */
  uint64_t __tmp_in_tmp39;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)384; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp39;
          }
          Arr4DIdxRowM(tmp39, (int32_t)1, (int32_t)1, (int32_t)384, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp39 : 0;
        }
      }
    }
  }

  uint64_t *tmp40 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp40
   * at (2050,1-2050,35) */
  uint64_t __tmp_in_tmp40;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp40;
    }
    Arr1DIdxRowM(tmp40, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp40 : 0;
  }

  uint64_t *tmp41 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256);
  /* Variable to read the clear value corresponding to the input variable tmp41
   * at (2053,1-2053,46) */
  uint64_t __tmp_in_tmp41;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)256; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp41;
          }
          Arr4DIdxRowM(tmp41, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp41 : 0;
        }
      }
    }
  }

  uint64_t *tmp42 = make_array<uint64_t>((int32_t)256);
  /* Variable to read the clear value corresponding to the input variable tmp42
   * at (2056,1-2056,36) */
  uint64_t __tmp_in_tmp42;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)256; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp42;
    }
    Arr1DIdxRowM(tmp42, (int32_t)256, i0) =
        (party == SERVER) ? __tmp_in_tmp42 : 0;
  }

  uint64_t *tmp43 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)256);
  /* Variable to read the clear value corresponding to the input variable tmp43
   * at (2059,1-2059,46) */
  uint64_t __tmp_in_tmp43;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)256; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp43;
          }
          Arr4DIdxRowM(tmp43, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)256,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp43 : 0;
        }
      }
    }
  }

  uint64_t *tmp44 = make_array<uint64_t>((int32_t)256);
  /* Variable to read the clear value corresponding to the input variable tmp44
   * at (2062,1-2062,36) */
  uint64_t __tmp_in_tmp44;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)256; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp44;
    }
    Arr1DIdxRowM(tmp44, (int32_t)256, i0) =
        (party == SERVER) ? __tmp_in_tmp44 : 0;
  }

  uint64_t *tmp45 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)512, (int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp45
   * at (2065,1-2065,46) */
  uint64_t __tmp_in_tmp45;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)512; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)64; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp45;
          }
          Arr4DIdxRowM(tmp45, (int32_t)1, (int32_t)1, (int32_t)512, (int32_t)64,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp45 : 0;
        }
      }
    }
  }

  uint64_t *tmp46 = make_array<uint64_t>((int32_t)64);
  /* Variable to read the clear value corresponding to the input variable tmp46
   * at (2068,1-2068,35) */
  uint64_t __tmp_in_tmp46;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)64; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp46;
    }
    Arr1DIdxRowM(tmp46, (int32_t)64, i0) =
        (party == SERVER) ? __tmp_in_tmp46 : 0;
  }

  uint64_t *tmp47 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256);
  /* Variable to read the clear value corresponding to the input variable tmp47
   * at (2071,1-2071,46) */
  uint64_t __tmp_in_tmp47;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)256; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp47;
          }
          Arr4DIdxRowM(tmp47, (int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp47 : 0;
        }
      }
    }
  }

  uint64_t *tmp48 = make_array<uint64_t>((int32_t)256);
  /* Variable to read the clear value corresponding to the input variable tmp48
   * at (2074,1-2074,36) */
  uint64_t __tmp_in_tmp48;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)256; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp48;
    }
    Arr1DIdxRowM(tmp48, (int32_t)256, i0) =
        (party == SERVER) ? __tmp_in_tmp48 : 0;
  }

  uint64_t *tmp49 =
      make_array<uint64_t>((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)256);
  /* Variable to read the clear value corresponding to the input variable tmp49
   * at (2077,1-2077,46) */
  uint64_t __tmp_in_tmp49;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)3; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)3; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)64; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)256; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp49;
          }
          Arr4DIdxRowM(tmp49, (int32_t)3, (int32_t)3, (int32_t)64, (int32_t)256,
                       i0, i1, i2, i3) = (party == SERVER) ? __tmp_in_tmp49 : 0;
        }
      }
    }
  }

  uint64_t *tmp50 = make_array<uint64_t>((int32_t)256);
  /* Variable to read the clear value corresponding to the input variable tmp50
   * at (2080,1-2080,36) */
  uint64_t __tmp_in_tmp50;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)256; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp50;
    }
    Arr1DIdxRowM(tmp50, (int32_t)256, i0) =
        (party == SERVER) ? __tmp_in_tmp50 : 0;
  }

  uint64_t *tmp51 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)512, (int32_t)1000);
  /* Variable to read the clear value corresponding to the input variable tmp51
   * at (2083,1-2083,48) */
  uint64_t __tmp_in_tmp51;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)512; i2++) {
        for (uint64_t i3 = (uint64_t)0; i3 < (int32_t)1000; i3++) {
          if ((party == SERVER)) {
            cin >> __tmp_in_tmp51;
          }
          Arr4DIdxRowM(tmp51, (int32_t)1, (int32_t)1, (int32_t)512,
                       (int32_t)1000, i0, i1, i2, i3) =
              (party == SERVER) ? __tmp_in_tmp51 : 0;
        }
      }
    }
  }

  uint64_t *tmp52 = make_array<uint64_t>((int32_t)1000);
  /* Variable to read the clear value corresponding to the input variable tmp52
   * at (2086,1-2086,37) */
  uint64_t __tmp_in_tmp52;
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1000; i0++) {
    if ((party == SERVER)) {
      cin >> __tmp_in_tmp52;
    }
    Arr1DIdxRowM(tmp52, (int32_t)1000, i0) =
        (party == SERVER) ? __tmp_in_tmp52 : 0;
  }
  StartComputation();

  uint64_t *tmp53 =
      make_array<uint64_t>((int32_t)1, (int32_t)113, (int32_t)113, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)227, (int32_t)227, (int32_t)3, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)2, (int32_t)2, tmp0, tmp1, tmp53);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)3, (int32_t)64, tmp1);
  ClearMemSecret4((int32_t)1, (int32_t)227, (int32_t)227, (int32_t)3, tmp0);

  uint64_t *tmp56 =
      make_array<uint64_t>((int32_t)1, (int32_t)113, (int32_t)113, (int32_t)64);
  ScaleUp1((int32_t)64, tmp2, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)113, (int32_t)113, (int32_t)64, tmp53,
                   tmp2, tmp56);
  ClearMemSecret1((int32_t)64, tmp2);
  ClearMemSecret4((int32_t)1, (int32_t)113, (int32_t)113, (int32_t)64, tmp53);

  uint64_t *tmp59 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  MaxPool((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, (int32_t)3,
          (int32_t)3, (int32_t)0, (int32_t)0, (int32_t)0, (int32_t)0,
          (int32_t)2, (int32_t)2, (int32_t)1, (int32_t)113, (int32_t)113,
          (int32_t)64, tmp56, tmp59);
  ClearMemSecret4((int32_t)1, (int32_t)113, (int32_t)113, (int32_t)64, tmp56);

  uint64_t *tmp61 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Relu4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp59, tmp61,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp59);

  uint64_t *tmp63 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, (int32_t)1,
                (int32_t)1, (int32_t)16, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp61, tmp3, tmp63);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp61);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)16, tmp3);

  uint64_t *tmp66 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16);
  ScaleUp1((int32_t)16, tmp4, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp63,
                   tmp4, tmp66);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp63);
  ClearMemSecret1((int32_t)16, tmp4);

  uint64_t *tmp69 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16);
  Relu4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp66, tmp69,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp66);

  uint64_t *tmp71 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, (int32_t)1,
                (int32_t)1, (int32_t)64, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp69, tmp5, tmp71);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)16, (int32_t)64, tmp5);

  uint64_t *tmp73 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  ScaleUp1((int32_t)64, tmp6, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp71,
                   tmp6, tmp73);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp71);
  ClearMemSecret1((int32_t)64, tmp6);

  uint64_t *tmp76 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Relu4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp73, tmp76,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp73);

  uint64_t *tmp78 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp69, tmp7, tmp78);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp69);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)64, tmp7);

  uint64_t *tmp81 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  ScaleUp1((int32_t)64, tmp8, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp78,
                   tmp8, tmp81);
  ClearMemSecret1((int32_t)64, tmp8);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp78);

  uint64_t *tmp84 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Relu4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp81, tmp84,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp81);

  int64_t tmp86 = (int32_t)3;

  uint64_t *tmp87 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)128);
  Concat2T444((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)128, (int32_t)1,
              (int32_t)56, (int32_t)56, (int32_t)64, tmp76, (int32_t)1,
              (int32_t)56, (int32_t)56, (int32_t)64, tmp84, tmp86, tmp87);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp84);
  ClearMemPublic(tmp86);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp76);

  uint64_t *tmp91 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16);
  Conv2DWrapper((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)128, (int32_t)1,
                (int32_t)1, (int32_t)16, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp87, tmp9, tmp91);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)128, tmp87);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)128, (int32_t)16, tmp9);

  uint64_t *tmp94 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16);
  ScaleUp1((int32_t)16, tmp10, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp91,
                   tmp10, tmp94);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp91);
  ClearMemSecret1((int32_t)16, tmp10);

  uint64_t *tmp97 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16);
  Relu4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp94, tmp97,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp94);

  uint64_t *tmp99 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, (int32_t)1,
                (int32_t)1, (int32_t)64, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp97, tmp11, tmp99);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)16, (int32_t)64, tmp11);

  uint64_t *tmp101 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  ScaleUp1((int32_t)64, tmp12, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp99,
                   tmp12, tmp101);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp99);
  ClearMemSecret1((int32_t)64, tmp12);

  uint64_t *tmp104 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Relu4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp101, tmp104,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp101);

  uint64_t *tmp106 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, (int32_t)3,
                (int32_t)3, (int32_t)64, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp97, tmp13, tmp106);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)16, (int32_t)64, tmp13);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)16, tmp97);

  uint64_t *tmp109 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  ScaleUp1((int32_t)64, tmp14, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp106,
                   tmp14, tmp109);
  ClearMemSecret1((int32_t)64, tmp14);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp106);

  uint64_t *tmp112 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64);
  Relu4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp109, tmp112,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp109);

  int64_t tmp114 = (int32_t)3;

  uint64_t *tmp115 =
      make_array<uint64_t>((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)128);
  Concat2T444((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)128, (int32_t)1,
              (int32_t)56, (int32_t)56, (int32_t)64, tmp104, (int32_t)1,
              (int32_t)56, (int32_t)56, (int32_t)64, tmp112, tmp114, tmp115);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp104);
  ClearMemPublic(tmp114);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)64, tmp112);

  uint64_t *tmp119 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  MaxPool((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, (int32_t)3,
          (int32_t)3, (int32_t)0, (int32_t)0, (int32_t)0, (int32_t)0,
          (int32_t)2, (int32_t)2, (int32_t)1, (int32_t)56, (int32_t)56,
          (int32_t)128, tmp115, tmp119);
  ClearMemSecret4((int32_t)1, (int32_t)56, (int32_t)56, (int32_t)128, tmp115);

  uint64_t *tmp121 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, (int32_t)1,
                (int32_t)1, (int32_t)32, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp119, tmp15, tmp121);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp119);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)128, (int32_t)32, tmp15);

  uint64_t *tmp124 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32);
  ScaleUp1((int32_t)32, tmp16, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp121,
                   tmp16, tmp124);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp121);
  ClearMemSecret1((int32_t)32, tmp16);

  uint64_t *tmp127 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32);
  Relu4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp124, tmp127,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp124);

  uint64_t *tmp129 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  Conv2DWrapper((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, (int32_t)1,
                (int32_t)1, (int32_t)128, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp127, tmp17, tmp129);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)32, (int32_t)128, tmp17);

  uint64_t *tmp131 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  ScaleUp1((int32_t)128, tmp18, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp129,
                   tmp18, tmp131);
  ClearMemSecret1((int32_t)128, tmp18);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp129);

  uint64_t *tmp134 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  Relu4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp131, tmp134,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp131);

  uint64_t *tmp136 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  Conv2DWrapper((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)128, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp127, tmp19, tmp136);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)128, tmp19);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp127);

  uint64_t *tmp139 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  ScaleUp1((int32_t)128, tmp20, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp136,
                   tmp20, tmp139);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp136);
  ClearMemSecret1((int32_t)128, tmp20);

  uint64_t *tmp142 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  Relu4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp139, tmp142,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp139);

  int64_t tmp144 = (int32_t)3;

  uint64_t *tmp145 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)256);
  Concat2T444((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)256, (int32_t)1,
              (int32_t)27, (int32_t)27, (int32_t)128, tmp134, (int32_t)1,
              (int32_t)27, (int32_t)27, (int32_t)128, tmp142, tmp144, tmp145);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp134);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp142);
  ClearMemPublic(tmp144);

  uint64_t *tmp149 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32);
  Conv2DWrapper((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)256, (int32_t)1,
                (int32_t)1, (int32_t)32, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp145, tmp21, tmp149);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)256, (int32_t)32, tmp21);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)256, tmp145);

  uint64_t *tmp152 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32);
  ScaleUp1((int32_t)32, tmp22, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp149,
                   tmp22, tmp152);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp149);
  ClearMemSecret1((int32_t)32, tmp22);

  uint64_t *tmp155 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32);
  Relu4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp152, tmp155,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp152);

  uint64_t *tmp157 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  Conv2DWrapper((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, (int32_t)1,
                (int32_t)1, (int32_t)128, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp155, tmp23, tmp157);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)32, (int32_t)128, tmp23);

  uint64_t *tmp159 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  ScaleUp1((int32_t)128, tmp24, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp157,
                   tmp24, tmp159);
  ClearMemSecret1((int32_t)128, tmp24);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp157);

  uint64_t *tmp162 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  Relu4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp159, tmp162,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp159);

  uint64_t *tmp164 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  Conv2DWrapper((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, (int32_t)3,
                (int32_t)3, (int32_t)128, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp155, tmp25, tmp164);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)32, (int32_t)128, tmp25);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)32, tmp155);

  uint64_t *tmp167 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  ScaleUp1((int32_t)128, tmp26, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp164,
                   tmp26, tmp167);
  ClearMemSecret1((int32_t)128, tmp26);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp164);

  uint64_t *tmp170 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128);
  Relu4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp167, tmp170,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp167);

  int64_t tmp172 = (int32_t)3;

  uint64_t *tmp173 =
      make_array<uint64_t>((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)256);
  Concat2T444((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)256, (int32_t)1,
              (int32_t)27, (int32_t)27, (int32_t)128, tmp162, (int32_t)1,
              (int32_t)27, (int32_t)27, (int32_t)128, tmp170, tmp172, tmp173);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp170);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)128, tmp162);
  ClearMemPublic(tmp172);

  uint64_t *tmp177 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  MaxPool((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, (int32_t)3,
          (int32_t)3, (int32_t)0, (int32_t)0, (int32_t)0, (int32_t)0,
          (int32_t)2, (int32_t)2, (int32_t)1, (int32_t)27, (int32_t)27,
          (int32_t)256, tmp173, tmp177);
  ClearMemSecret4((int32_t)1, (int32_t)27, (int32_t)27, (int32_t)256, tmp173);

  uint64_t *tmp179 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, (int32_t)1,
                (int32_t)1, (int32_t)48, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp177, tmp27, tmp179);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp177);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)256, (int32_t)48, tmp27);

  uint64_t *tmp182 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48);
  ScaleUp1((int32_t)48, tmp28, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp179,
                   tmp28, tmp182);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp179);
  ClearMemSecret1((int32_t)48, tmp28);

  uint64_t *tmp185 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp182, tmp185,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp182);

  uint64_t *tmp187 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, (int32_t)1,
                (int32_t)1, (int32_t)192, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp185, tmp29, tmp187);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)48, (int32_t)192, tmp29);

  uint64_t *tmp189 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  ScaleUp1((int32_t)192, tmp30, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp187,
                   tmp30, tmp189);
  ClearMemSecret1((int32_t)192, tmp30);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp187);

  uint64_t *tmp192 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp189, tmp192,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp189);

  uint64_t *tmp194 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, (int32_t)3,
                (int32_t)3, (int32_t)192, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp185, tmp31, tmp194);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp185);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)48, (int32_t)192, tmp31);

  uint64_t *tmp197 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  ScaleUp1((int32_t)192, tmp32, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp194,
                   tmp32, tmp197);
  ClearMemSecret1((int32_t)192, tmp32);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp194);

  uint64_t *tmp200 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp197, tmp200,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp197);

  int64_t tmp202 = (int32_t)3;

  uint64_t *tmp203 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)384);
  Concat2T444((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)384, (int32_t)1,
              (int32_t)13, (int32_t)13, (int32_t)192, tmp192, (int32_t)1,
              (int32_t)13, (int32_t)13, (int32_t)192, tmp200, tmp202, tmp203);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp200);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp192);
  ClearMemPublic(tmp202);

  uint64_t *tmp207 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)384, (int32_t)1,
                (int32_t)1, (int32_t)48, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp203, tmp33, tmp207);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)384, tmp203);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)384, (int32_t)48, tmp33);

  uint64_t *tmp210 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48);
  ScaleUp1((int32_t)48, tmp34, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp207,
                   tmp34, tmp210);
  ClearMemSecret1((int32_t)48, tmp34);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp207);

  uint64_t *tmp213 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp210, tmp213,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp210);

  uint64_t *tmp215 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, (int32_t)1,
                (int32_t)1, (int32_t)192, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp213, tmp35, tmp215);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)48, (int32_t)192, tmp35);

  uint64_t *tmp217 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  ScaleUp1((int32_t)192, tmp36, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp215,
                   tmp36, tmp217);
  ClearMemSecret1((int32_t)192, tmp36);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp215);

  uint64_t *tmp220 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp217, tmp220,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp217);

  uint64_t *tmp222 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, (int32_t)3,
                (int32_t)3, (int32_t)192, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp213, tmp37, tmp222);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)48, tmp213);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)48, (int32_t)192, tmp37);

  uint64_t *tmp225 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  ScaleUp1((int32_t)192, tmp38, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp222,
                   tmp38, tmp225);
  ClearMemSecret1((int32_t)192, tmp38);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp222);

  uint64_t *tmp228 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp225, tmp228,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp225);

  int64_t tmp230 = (int32_t)3;

  uint64_t *tmp231 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)384);
  Concat2T444((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)384, (int32_t)1,
              (int32_t)13, (int32_t)13, (int32_t)192, tmp220, (int32_t)1,
              (int32_t)13, (int32_t)13, (int32_t)192, tmp228, tmp230, tmp231);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp220);
  ClearMemPublic(tmp230);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)192, tmp228);

  uint64_t *tmp235 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)384, (int32_t)1,
                (int32_t)1, (int32_t)64, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp231, tmp39, tmp235);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)384, tmp231);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)384, (int32_t)64, tmp39);

  uint64_t *tmp238 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64);
  ScaleUp1((int32_t)64, tmp40, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp235,
                   tmp40, tmp238);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp235);
  ClearMemSecret1((int32_t)64, tmp40);

  uint64_t *tmp241 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp238, tmp241,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp238);

  uint64_t *tmp243 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, (int32_t)1,
                (int32_t)1, (int32_t)256, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp241, tmp41, tmp243);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256, tmp41);

  uint64_t *tmp245 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  ScaleUp1((int32_t)256, tmp42, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp243,
                   tmp42, tmp245);
  ClearMemSecret1((int32_t)256, tmp42);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp243);

  uint64_t *tmp248 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp245, tmp248,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp245);

  uint64_t *tmp250 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)256, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp241, tmp43, tmp250);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)256, tmp43);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp241);

  uint64_t *tmp253 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  ScaleUp1((int32_t)256, tmp44, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp250,
                   tmp44, tmp253);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp250);
  ClearMemSecret1((int32_t)256, tmp44);

  uint64_t *tmp256 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp253, tmp256,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp253);

  int64_t tmp258 = (int32_t)3;

  uint64_t *tmp259 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)512);
  Concat2T444((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)512, (int32_t)1,
              (int32_t)13, (int32_t)13, (int32_t)256, tmp248, (int32_t)1,
              (int32_t)13, (int32_t)13, (int32_t)256, tmp256, tmp258, tmp259);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp256);
  ClearMemPublic(tmp258);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp248);

  uint64_t *tmp263 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)512, (int32_t)1,
                (int32_t)1, (int32_t)64, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp259, tmp45, tmp263);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)512, tmp259);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)512, (int32_t)64, tmp45);

  uint64_t *tmp266 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64);
  ScaleUp1((int32_t)64, tmp46, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp263,
                   tmp46, tmp266);
  ClearMemSecret1((int32_t)64, tmp46);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp263);

  uint64_t *tmp269 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp266, tmp269,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp266);

  uint64_t *tmp271 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, (int32_t)1,
                (int32_t)1, (int32_t)256, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp269, tmp47, tmp271);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)64, (int32_t)256, tmp47);

  uint64_t *tmp273 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  ScaleUp1((int32_t)256, tmp48, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp271,
                   tmp48, tmp273);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp271);
  ClearMemSecret1((int32_t)256, tmp48);

  uint64_t *tmp276 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp273, tmp276,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp273);

  uint64_t *tmp278 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, (int32_t)3,
                (int32_t)3, (int32_t)256, (int32_t)1, (int32_t)1, (int32_t)1,
                (int32_t)1, (int32_t)1, (int32_t)1, tmp269, tmp49, tmp278);
  ClearMemSecret4((int32_t)3, (int32_t)3, (int32_t)64, (int32_t)256, tmp49);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)64, tmp269);

  uint64_t *tmp281 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  ScaleUp1((int32_t)256, tmp50, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp278,
                   tmp50, tmp281);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp278);
  ClearMemSecret1((int32_t)256, tmp50);

  uint64_t *tmp284 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp281, tmp284,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp281);

  int64_t tmp286 = (int32_t)3;

  uint64_t *tmp287 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)512);
  Concat2T444((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)512, (int32_t)1,
              (int32_t)13, (int32_t)13, (int32_t)256, tmp276, (int32_t)1,
              (int32_t)13, (int32_t)13, (int32_t)256, tmp284, tmp286, tmp287);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp276);
  ClearMemPublic(tmp286);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)256, tmp284);

  uint64_t *tmp291 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)1000);
  Conv2DWrapper((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)512, (int32_t)1,
                (int32_t)1, (int32_t)1000, (int32_t)0, (int32_t)0, (int32_t)0,
                (int32_t)0, (int32_t)1, (int32_t)1, tmp287, tmp51, tmp291);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)512, (int32_t)1000, tmp51);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)512, tmp287);

  uint64_t *tmp294 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)1000);
  ScaleUp1((int32_t)1000, tmp52, (int32_t)9);
  MatAddBroadCast4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)1000, tmp291,
                   tmp52, tmp294);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)1000, tmp291);
  ClearMemSecret1((int32_t)1000, tmp52);

  uint64_t *tmp297 =
      make_array<uint64_t>((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)1000);
  Relu4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)1000, tmp294, tmp297,
        (int32_t)9, 1);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)1000, tmp294);

  uint64_t *tmp299 =
      make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1000);
  AvgPool((int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1000, (int32_t)13,
          (int32_t)13, (int32_t)0, (int32_t)0, (int32_t)0, (int32_t)0,
          (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)13, (int32_t)13,
          (int32_t)1000, tmp297, tmp299);
  ClearMemSecret4((int32_t)1, (int32_t)13, (int32_t)13, (int32_t)1000, tmp297);

  int64_t tmp301 = (int32_t)3;

  uint64_t *tmp302 = make_array<uint64_t>((int32_t)1, (int32_t)1, (int32_t)1);
  ArgMax3((int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1,
          (int32_t)1, (int32_t)1000, tmp299, tmp301, tmp302);
  ClearMemPublic(tmp301);
  ClearMemSecret4((int32_t)1, (int32_t)1, (int32_t)1, (int32_t)1000, tmp299);
  EndComputation();
  for (uint64_t i0 = (uint64_t)0; i0 < (int32_t)1; i0++) {
    for (uint64_t i1 = (uint64_t)0; i1 < (int32_t)1; i1++) {
      for (uint64_t i2 = (uint64_t)0; i2 < (int32_t)1; i2++) {
        cout << (funcReconstruct2PCCons(Arr3DIdxRowM(tmp302, (int32_t)1,
                                                     (int32_t)1, (int32_t)1, i0,
                                                     i1, i2),
                                        2))
             << endl;
      }
    }
  }
}
