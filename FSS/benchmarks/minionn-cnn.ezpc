(*

Authors: Kanav Gupta.

Copyright:
Copyright (c) 2020 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)


(* Helper functions defined in C++ Code *)
extern void ClearMemSecret1(int32_pl s1, int64_al[s1] arr);
extern void ClearMemSecret2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr);
extern void ClearMemSecret3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr);
extern void ClearMemSecret4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr);
extern void ClearMemSecret5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr);
extern void ClearMemPublic(int32_pl x);
extern void ClearMemPublic1(int32_pl s, int32_pl[s] x);
extern void ClearMemPublic2(int32_pl s1, int32_pl s2, int32_pl[s1][s2] arr);
extern void ClearMemPublic3(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl[s1][s2][s3] arr);
extern void ClearMemPublic4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl[s1][s2][s3][s4] arr);
extern void ClearMemPublic5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl[s1][s2][s3][s4][s5] arr);

extern void MatMul2D(int32_pl i, int32_pl j, int32_pl k, int64_al[i][j] A, int64_al[j][k] B, int64_al[i][k] C, bool_pl modelIsA);

extern void ArgMax(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1] outArr);

extern void Relu(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation);

extern void Floor(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf);

extern void MaxPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int64_al[N1][imgH][imgW][C1] inArr, 
				  int64_al[N][H][W][C] outArr);

extern void AvgPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int64_al[N1][imgH][imgW][C1] inArr, 
				  int64_al[N][H][W][C] outArr);

extern void ElemWiseSecretSharedVectorMult(int32_pl s1, int64_al[s1] arr1, int64_al[s1] arr2, int64_al[s1] outArr);
extern void ElemWiseActModelVectorMult(int32_pl s1, int64_al[s1] arr1, int64_al[s1] arr2, int64_al[s1] outArr);
extern void ElemWiseVectorPublicDiv(int32_pl s1, int64_al[s1] arr1, int32_pl divisor, int64_al[s1] outArr);

extern void ScaleUp(int32_pl s1, int64_al[s1] arr, int32_pl sf);
extern void ScaleDown(int32_pl s1, int64_al[s1] arr, int32_pl sf);

extern void Conv2DWrapper(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void Conv3DWrapper(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr,
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void Conv2DGroupWrapper(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void ConvTranspose2DWrapper(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl H, int32_pl W,
				   int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int64_al[N][HPrime][WPrime][CI] inputArr, 
				   int64_al[FH][FW][CO][CI] filterArr, 
				   int64_al[N][H][W][CO] outArr);

extern void ConvTranspose3DWrapper(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][D][H][W][CO] outArr);

extern void TanH(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B);
extern void Sigmoid(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B);
extern void Sqrt(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, bool_pl inverse, int64_al[size] A, int64_al[size] B);

(**************************)
(*  FSS Standard Library  *)
(**************************)

extern void ScaleUp1(int32_pl s1, int64_al[s1] arr, int32_pl sf);

extern void ScaleUp2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr, int32_pl sf);

extern void ScaleUp3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr, int32_pl sf);

extern void ScaleUp4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr, int32_pl sf);

extern void ScaleUp5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr, int32_pl sf);

extern void ScaleDown1(int32_pl s1, int64_al[s1] arr, int32_pl sf);

extern void ScaleDown2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr, int32_pl sf);

extern void ScaleDown3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr, int32_pl sf);

extern void ScaleDown4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr, int32_pl sf);

extern void ScaleDown5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr, int32_pl sf);

extern void StartComputation();

extern void EndComputation();

extern void MatAddBroadCast2(int32_pl a1, int32_pl a2, int32_pl b1, int32_pl s1, int32_pl s2, int64_al[s1][s2] A, int64_al[s2] B, int64_al[s1][s2] outArr);

extern void MatAdd2(int32_pl a1, int32_pl a2, int32_pl b1, int32_pl b2, int32_pl s1, int32_pl s2, int64_al[a1][a2] A, int64_al[b1][b2] B, int64_al[s1][s2] outArr);

extern void MatAddBroadCast4(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl b1, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] A, int64_al[s4] B, int64_al[s1][s2][s3][s4] outArr);

extern void MatAddBroadCast5(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl a5, int32_pl b1, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] A, int64_al[s5] B, int64_al[s1][s2][s3][s4][s5] outArr);

extern void MatAdd4(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl b1, int32_pl b2, int32_pl b3, int32_pl b4, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[a1][a2][a3][a4] A, int64_al[b1][b2][b3][b4] B, int64_al[s1][s2][s3][s4] outArr);

extern void MatAdd5(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl a5, int32_pl b1, int32_pl b2, int32_pl b3, int32_pl b4, int32_pl b5, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[a1][a2][a3][a4][a5] A, int64_al[b1][b2][b3][b4][b5] B, int64_al[s1][s2][s3][s4][s5] outArr);

(**************************)
extern void CreateTensor1(int32_pl s1, int64_pl val, int64_pl[s1] arr);

extern void CreateTensor2(int32_pl s1, int32_pl s2, int64_pl val, int64_pl[s1][s2] arr);

extern void CreateTensor3(int32_pl s1, int32_pl s2, int32_pl s3, int64_pl val, int64_pl[s1][s2][s3] arr);

extern void CreateTensor4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_pl val, int64_pl[s1][s2][s3][s4] arr);

extern void CreateTensor5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_pl val, int64_pl[s1][s2][s3][s4][s5] arr);

(**************************)
extern void CopyTensor1(int32_pl s1, int64_al[s1] targetArr, int64_al[s1] fromArr, int64_al[s1] ignore);

extern void CopyTensor2(int32_pl s1, int32_pl s2, int64_al[s1][s2] targetArr, int64_al[s1][s2] fromArr, int64_al[s1][s2] ignore);

extern void CopyTensor3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] targetArr, int64_al[s1][s2][s3] fromArr, int64_al[s1][s2][s3] ignore);

extern void CopyTensor4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] targetArr, int64_al[s1][s2][s3][s4] fromArr, int64_al[s1][s2][s3][s4] ignore);

(**************************)
extern void CreateIdentity11(int32_pl s1, int64_al[s1] fromArr, int64_al[s1] newArr);

extern void CreateIdentity22(int32_pl s1, int32_pl s2, int64_al[s1][s2] fromArr, int64_al[s1][s2] newArr);

extern void CreateIdentity33(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] fromArr, int64_al[s1][s2][s3] newArr);

extern void CreateIdentity44(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] fromArr, int64_al[s1][s2][s3][s4] newArr);

(**************************)
extern void CreateCopy2211(int32_pl s1, int32_pl s2, int32_pl inps1, int32_pl inps2, int64_al[inps1][inps2] inArr, int32_pl perDimSize, int32_pl[perDimSize] beginIdx, int32_pl[perDimSize] sizeIdx, int64_al[s1][s2] outArr);

extern void CreateCopy5511(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_pl inps5, int64_al[inps1][inps2][inps3][inps4][inps5] inArr, int32_pl perDimSize, int32_pl[perDimSize] beginIdx, int32_pl[perDimSize] sizeIdx, int64_al[s1][s2][s3][s4][s5] outArr);

(**************************)

extern void Concat1T44(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat2T222(int32_pl s1, int32_pl s2, int32_pl inp1s1, int32_pl inp1s2, int64_al[inp1s1][inp1s2] inp1, int32_pl inp2s1, int32_pl inp2s2, int64_al[inp2s1][inp2s2] inp2, int32_pl axis, int64_al[s1][s2] outp);

extern void Concat2T444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat3T4444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat4T44444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat5T444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat6T4444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat7T44444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat8T444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat9T4444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat10T44444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat11T444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat12T4444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat13T44444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat14T444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat15T4444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat16T44444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat17T444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat18T4444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat19T44444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat20T444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat21T4444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat22T44444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat23T444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat24T4444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl inp24s1, int32_pl inp24s2, int32_pl inp24s3, int32_pl inp24s4, int64_al[inp24s1][inp24s2][inp24s3][inp24s4] inp24, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

extern void Concat25T44444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl inp24s1, int32_pl inp24s2, int32_pl inp24s3, int32_pl inp24s4, int64_al[inp24s1][inp24s2][inp24s3][inp24s4] inp24, int32_pl inp25s1, int32_pl inp25s2, int32_pl inp25s3, int32_pl inp25s4, int64_al[inp25s1][inp25s2][inp25s3][inp25s4] inp25, int32_pl axis, int64_al[s1][s2][s3][s4] outp);

(**************************)
extern void Split44(int32_pl O1, int32_pl O2, int32_pl O3, int32_pl O4, int32_pl I1, int32_pl I2, int32_pl I3, int32_pl I4, int64_al[I1][I2][I3][I4] inp, int32_pl axis, int32_pl curCount, int32_pl total, int64_al[O1][O2][O3][O4] out);

(**************************)
(* Generic implementation of Conv2D *)

extern void Conv2DReshapeFilter(int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int64_al[FH][FW][CI][CO] inputArr, int64_al[CO][FH*FW*CI] outputArr);

extern void Conv2DReshapeMatMulOP(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr);

extern void Conv2DReshapeInput(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr);

extern void Conv2D(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Loop-based implementation of Conv2D *)
(* These loop implementations of convolution run faster with multithreading *)

extern void Conv2DLoopInner(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int32_pl outH, int32_pl outW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr,
				   int64_al[N][outH][outW][CO] outArr);

(* int64_al[N][H][W][CI] inputArr, 
   int64_al[FH][FW][CI][CO] filterArr, 
   int64_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
extern void Conv2DLoop(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Generic implementation of Conv2D with Groups *)

extern void Conv2DReshapeFilterGroup(int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int32_pl g, int32_pl G, int64_al[FH][FW][CI/G][CO] inputArr, int64_al[CO/G][FH*FW*(CI/G)] outputArr);


extern void Conv2DReshapeMatMulOPGroup(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int32_pl g, int32_pl G, int64_al[CO/G][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr);

extern void Conv2DReshapeInputGroup(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideH, int32_pl strideW, int32_pl g, int32_pl G, int32_pl RRows, int32_pl RCols, int64_al[N][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr);

(* int64_al[N][H][W][CI] inputArr, 
   int64_al[FH][FW][CI][CO] filterArr, 
   int64_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
extern void Conv2DGroup(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Generic implementation of Conv3D *)

extern void Conv3DReshapeFilter(int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int64_al[FD][FH][FW][CI][CO] inputArr, int64_al[CO][FD*FH*FW*CI] outputArr);

extern void Conv3DReshapeMatMulOP(int32_pl N, int32_pl finalD, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalD*finalH*finalW] inputArr, int64_al[N][finalD][finalH][finalW][CO] outputArr);

extern void Conv3DReshapeInput(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, int32_pl FD, int32_pl FH, int32_pl FW, int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideD, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][D][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr);

(* int64_al[N][D][H][W][CI] inputArr, 
   int64_al[FD][FH][FW][CI][CO] filterArr, 
   int64_al[N][((D-FD+zPadDLeft+zPadDRight)/strideD)+1][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
extern void Conv3D(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr,
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Loop-based implementation of Conv3D *)
(* Loop implementation of convolution run faster with multithreading *)

extern void Conv3DLoopInner(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight,int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_pl outD, int32_pl outH, int32_pl outW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr, 
				   int64_al[N][outD][outH][outW][CO] outArr);

(* int64_al[N][D][H][W][CI] inputArr, 
   int64_al[FD][FH][FW][CI][CO] filterArr, 
   int64_al[N][((D-FD+zPadDLeft+zPadDRight)/strideD)+1][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
extern void Conv3DLoop(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr, 
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Generic implementation of ConvTranpose2D *)

extern void ConvTranspose2DReshapeMatMulOP(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr);


extern void ConvTranspose2DReshapeFilter(int32_pl FH, int32_pl FW, int32_pl CO, int32_pl CI, int64_al[FH][FW][CO][CI] inputArr, int64_al[CO][FH*FW*CI] outputArr);

extern void ConvTranspose2DReshapeInput(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][HPrime][WPrime][CI] inputArr, int64_al[RRows][RCols] outputArr);

(* int64_al[N][HPrime][WPrime][CI] inputArr,
   int64_al[FH][FW][CO][CI] filter,
   int64_al[N][H][W][CO] outputArr
*)
extern void ConvTranspose2D(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl H, int32_pl W,
				   int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int64_al[N][HPrime][WPrime][CI] inputArr, 
				   int64_al[FH][FW][CO][CI] filterArr, 
				   int64_al[N][H][W][CO] outArr);

(**************************)
(* Generic implementation of ConvTranpose3D *)

extern void ConvTranspose3DReshapeFilter(int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, int32_pl CI, int64_al[FD][FH][FW][CO][CI] inputArr, int64_al[CO][FD*FH*FW*CI] outputArr);

extern void ConvTranspose3DReshapeInput(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, int32_pl FD, int32_pl FH, int32_pl FW, int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, int32_pl strideD, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, int64_al[RRows][RCols] outputArr);

(* int64_al[N][DPrime][HPrime][WPrime][CI] inputArr,
   int64_al[FD][FH][FW][CO][CI] filter,
   int64_al[N][D][H][W][CO] outputArr
*)
extern void ConvTranspose3D(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][D][H][W][CO] outArr);

(**************************)
(* Loop-based implementation of ConvTranspose3D *)

extern void ConvTranspose3DLoopInner(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight,int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_pl outD, int32_pl outH, int32_pl outW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][outD][outH][outW][CO] outArr);


(* int64_al[N][DPrime][HPrime][WPrime][CI] inputArr,
   int64_al[FD][FH][FW][CO][CI] filter,
   int64_al[N][D][H][W][CO] outputArr
*)
extern void ConvTranspose3DLoop(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][D][H][W][CO] outArr);

(**************************)
extern void Transpose2(int32_pl s1, int32_pl s2, int64_al[s2][s1] inArr, int64_al[s1][s2] outArr);

(**************************)
extern void Pad442(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int64_al[inps1][inps2][inps3][inps4] inpArr, int32_pl pads1, int32_pl pads2, int32_pl[pads1][pads2] paddings, int64_al[s1][s2][s3][s4] outArr);

extern void Pad552(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_pl inps5, int64_al[inps1][inps2][inps3][inps4][inps5] inpArr, int32_pl pads1, int32_pl pads2, int32_pl[pads1][pads2] paddings, int64_al[s1][s2][s3][s4][s5] outArr);

extern void PadONNX441(int32_pl o1, int32_pl o2, int32_pl o3, int32_pl o4, int32_pl i1, int32_pl i2, int32_pl i3, int32_pl i4, int64_al[i1][i2][i3][i4] inpArr, int32_pl pads, int32_pl[pads] paddings, int64_al[o1][o2][o3][o4] outArr);

(**************************)
(* Squeeze where the input is a 4D tensor, output is a 2D tensor and hence 2 dims are getting squeezed. *)
(* Ignoring dimensions in squeeze *)

extern void Squeeze24(int32_pl s1, int32_pl s2, int32_pl dim1, int32_pl dim2, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4, int64_al[ins1][ins2][ins3][ins4] inArr, int64_al[s1][s2] outArr);

extern void Squeeze34(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl dim, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4, int64_al[ins1][ins2][ins3][ins4] inArr, int64_al[s1][s2][s3] outArr);

extern void Squeeze23(int32_pl s1, int32_pl s2, int32_pl dim, int32_pl ins1, int32_pl ins2, int32_pl ins3, int64_al[ins1][ins2][ins3] inArr, int64_al[s1][s2] outArr);

(**************************)
extern void FusedBatchNorm4411(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s4] multArr, int64_al[s4] biasArr, int32_pl multExprScaleDownSf, int32_pl biasExprScaleUpSf, int64_al[s1][s2][s3][s4] outputArr);

extern void FusedBatchNorm5511(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s5] multArr, int64_al[s5] biasArr, int32_pl multExprScaleDownSf, int32_pl biasExprScaleUpSf, int64_al[s1][s2][s3][s4][s5] outputArr);
(**************************)
extern void ElemWiseMul2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr1, int64_al[s1][s2] arr2, int64_al[s1][s2] outArr);
extern void ElemWiseMul4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr1, int64_al[s1][s2][s3][s4] arr2, int64_al[s1][s2][s3][s4] outArr);
extern void ElemWiseMul5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr1, int64_al[s1][s2][s3][s4][s5] arr2, int64_al[s1][s2][s3][s4][s5] outArr);

(**************************)
extern void ReduceMean24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int64_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl[2] axes,
					  int64_al[outS1][outS2] outputArr
					  );

extern void ReduceMeanONNX24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int64_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl axis1, int32_pl axis2,
					  int64_al[outS1][outS2] outputArr
					  );

(**************************)
extern void ArgMax1(int32_pl outArrS1, int32_pl inArrS1, int32_pl inArrS2, int64_al[inArrS1][inArrS2] inArr, int32_pl dim, int64_al[outArrS1] outArr);

extern void ArgMax3(int32_pl outs1, int32_pl outs2, int32_pl outs3, 
			   int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4,
			   int64_al[ins1][ins2][ins3][ins4] inArr, int32_pl dim, int64_al[outs1][outs2][outs3] outArr);
(**************************)
extern void Relu1(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation);
extern void Relu2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf, bool_pl doTruncation);

extern void Relu4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr, int32_pl sf, bool_pl doTruncation);

extern void Relu5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s1][s2][s3][s4][s5] outArr, int32_pl sf, bool_pl doTruncation);

(**************************)
extern void Floor2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf);


def void main(){

	(* {'TFOpName': 'Input', 'TFNodeName': 'input_names'} *)
	input(CLIENT, tmp0, int64_al[1][3][32][32]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.0.weight'} *)
	input(SERVER, tmp1, int64_al[64][3][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.0.bias'} *)
	input(SERVER, tmp2, int64_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.2.weight'} *)
	input(SERVER, tmp3, int64_al[64][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.2.bias'} *)
	input(SERVER, tmp4, int64_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.5.weight'} *)
	input(SERVER, tmp5, int64_al[64][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.5.bias'} *)
	input(SERVER, tmp6, int64_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.7.weight'} *)
	input(SERVER, tmp7, int64_al[64][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.7.bias'} *)
	input(SERVER, tmp8, int64_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.10.weight'} *)
	input(SERVER, tmp9, int64_al[64][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.10.bias'} *)
	input(SERVER, tmp10, int64_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.12.weight'} *)
	input(SERVER, tmp11, int64_al[64][64][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.12.bias'} *)
	input(SERVER, tmp12, int64_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.14.weight'} *)
	input(SERVER, tmp13, int64_al[16][64][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'cnn_layers.14.bias'} *)
	input(SERVER, tmp14, int64_al[16]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'linear_layers.0.weight'} *)
	input(SERVER, tmp15, int64_al[10][1024]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'linear_layers.0.bias'} *)
	input(SERVER, tmp16, int64_al[10]);

	(* {'TFOpName': 'Input', 'TFNodeName': '44'} *)
	input(SERVER, tmp17, int64_al[2]);

	StartComputation();

	int64_al[1][32][32][3] tmp18;

	int64_pl i7;

	int64_pl i6;

	int64_pl i5;

	int64_pl i4;

	int64_pl i3;

	int64_pl i2;

	int64_pl i1;

	int64_pl i0;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(input_names, 1, 32, 32, 3) *)
	i0 = 0L;
	i1 = 0L;
	i2 = 0L;
	i3 = 0L;
	for i4 = [0: 1]{
 		for i7 = [0: 3]{
 			for i5 = [0: 32]{
 				for i6 = [0: 32]{
 					tmp18[i4][i5][i6][i7] = tmp0[i0][i1][i2][i3];
					i3 = (i3 + 1L);
					if ((i3 == 32L)) {
						i3 = 0L;
						i2 = (i2 + 1L);
						if ((i2 == 32L)) {
							i2 = 0L;
							i1 = (i1 + 1L);
							if ((i1 == 3L)) {
								i1 = 0L;
								i0 = (i0 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 3, 32, 32, tmp0);

	int64_al[3][3][3][64] tmp20;

	int64_pl i15;

	int64_pl i14;

	int64_pl i13;

	int64_pl i12;

	int64_pl i11;

	int64_pl i10;

	int64_pl i9;

	int64_pl i8;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.0.weight, 3, 3, 3, 64) *)
	i8 = 0L;
	i9 = 0L;
	i10 = 0L;
	i11 = 0L;
	for i15 = [0: 64]{
 		for i14 = [0: 3]{
 			for i12 = [0: 3]{
 				for i13 = [0: 3]{
 					tmp20[i12][i13][i14][i15] = tmp1[i8][i9][i10][i11];
					i11 = (i11 + 1L);
					if ((i11 == 3L)) {
						i11 = 0L;
						i10 = (i10 + 1L);
						if ((i10 == 3L)) {
							i10 = 0L;
							i9 = (i9 + 1L);
							if ((i9 == 3L)) {
								i9 = 0L;
								i8 = (i8 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 3, 3, 3, tmp1);

	int64_al[1][32][32][64] tmp22;

	(* J0 # J1, convDim = 2 *)
	Conv2DGroupWrapper(1, 32, 32, 3, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp18, tmp20, tmp22);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 3, tmp18);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 3, 64, tmp20);

	int64_al[1][1][1][64] tmp25;

	int64_pl i20;

	int64_pl i19;

	int64_pl i18;

	int64_pl i17;

	int64_pl i16;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.0.bias, 1, 1, 1, 64) *)
	i16 = 0L;
	for i17 = [0: 1]{
 		for i18 = [0: 1]{
 			for i19 = [0: 1]{
 				for i20 = [0: 64]{
 					tmp25[i17][i18][i19][i20] = tmp2[i16];
					i16 = (i16 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp2);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp25, 15);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J2 + J3 *)
	int64_al[1][32][32][64] tmp27;

	for i0 = [0: 1]{
 		for i1 = [0: 32]{
 			for i2 = [0: 32]{
 				for i3 = [0: 64]{
 					tmp27[i0][i1][i2][i3] = (tmp22[i0][i1][i2][i3] + tmp25[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp22);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp25);

	int64_al[1][64][32][32] tmp30;

	int64_pl i28;

	int64_pl i27;

	int64_pl i26;

	int64_pl i25;

	int64_pl i24;

	int64_pl i23;

	int64_pl i22;

	int64_pl i21;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J4, 1, 64, 32, 32) *)
	i21 = 0L;
	i22 = 0L;
	i23 = 0L;
	i24 = 0L;
	for i25 = [0: 1]{
 		for i27 = [0: 32]{
 			for i28 = [0: 32]{
 				for i26 = [0: 64]{
 					tmp30[i25][i26][i27][i28] = tmp27[i21][i22][i23][i24];
					i24 = (i24 + 1L);
					if ((i24 == 64L)) {
						i24 = 0L;
						i23 = (i23 + 1L);
						if ((i23 == 32L)) {
							i23 = 0L;
							i22 = (i22 + 1L);
							if ((i22 == 32L)) {
								i22 = 0L;
								i21 = (i21 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp27);

	int64_al[1][32][32][64] tmp32;

	int64_pl i36;

	int64_pl i35;

	int64_pl i34;

	int64_pl i33;

	int64_pl i32;

	int64_pl i31;

	int64_pl i30;

	int64_pl i29;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J5, 1, 32, 32, 64) *)
	i29 = 0L;
	i30 = 0L;
	i31 = 0L;
	i32 = 0L;
	for i33 = [0: 1]{
 		for i36 = [0: 64]{
 			for i34 = [0: 32]{
 				for i35 = [0: 32]{
 					tmp32[i33][i34][i35][i36] = tmp30[i29][i30][i31][i32];
					i32 = (i32 + 1L);
					if ((i32 == 32L)) {
						i32 = 0L;
						i31 = (i31 + 1L);
						if ((i31 == 32L)) {
							i31 = 0L;
							i30 = (i30 + 1L);
							if ((i30 == 64L)) {
								i30 = 0L;
								i29 = (i29 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 32, 32, tmp30);

	int64_al[1][32][32][64] tmp34;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 32, 32, 64, tmp32, tmp34, 15, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp32);

	int64_al[1][64][32][32] tmp36;

	int64_pl i44;

	int64_pl i43;

	int64_pl i42;

	int64_pl i41;

	int64_pl i40;

	int64_pl i39;

	int64_pl i38;

	int64_pl i37;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J7, 1, 64, 32, 32) *)
	i37 = 0L;
	i38 = 0L;
	i39 = 0L;
	i40 = 0L;
	for i41 = [0: 1]{
 		for i43 = [0: 32]{
 			for i44 = [0: 32]{
 				for i42 = [0: 64]{
 					tmp36[i41][i42][i43][i44] = tmp34[i37][i38][i39][i40];
					i40 = (i40 + 1L);
					if ((i40 == 64L)) {
						i40 = 0L;
						i39 = (i39 + 1L);
						if ((i39 == 32L)) {
							i39 = 0L;
							i38 = (i38 + 1L);
							if ((i38 == 32L)) {
								i38 = 0L;
								i37 = (i37 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp34);

	int64_al[1][32][32][64] tmp38;

	int64_pl i52;

	int64_pl i51;

	int64_pl i50;

	int64_pl i49;

	int64_pl i48;

	int64_pl i47;

	int64_pl i46;

	int64_pl i45;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J8, 1, 32, 32, 64) *)
	i45 = 0L;
	i46 = 0L;
	i47 = 0L;
	i48 = 0L;
	for i49 = [0: 1]{
 		for i52 = [0: 64]{
 			for i50 = [0: 32]{
 				for i51 = [0: 32]{
 					tmp38[i49][i50][i51][i52] = tmp36[i45][i46][i47][i48];
					i48 = (i48 + 1L);
					if ((i48 == 32L)) {
						i48 = 0L;
						i47 = (i47 + 1L);
						if ((i47 == 32L)) {
							i47 = 0L;
							i46 = (i46 + 1L);
							if ((i46 == 64L)) {
								i46 = 0L;
								i45 = (i45 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 32, 32, tmp36);

	int64_al[3][3][64][64] tmp40;

	int64_pl i60;

	int64_pl i59;

	int64_pl i58;

	int64_pl i57;

	int64_pl i56;

	int64_pl i55;

	int64_pl i54;

	int64_pl i53;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.2.weight, 3, 3, 64, 64) *)
	i53 = 0L;
	i54 = 0L;
	i55 = 0L;
	i56 = 0L;
	for i60 = [0: 64]{
 		for i59 = [0: 64]{
 			for i57 = [0: 3]{
 				for i58 = [0: 3]{
 					tmp40[i57][i58][i59][i60] = tmp3[i53][i54][i55][i56];
					i56 = (i56 + 1L);
					if ((i56 == 3L)) {
						i56 = 0L;
						i55 = (i55 + 1L);
						if ((i55 == 3L)) {
							i55 = 0L;
							i54 = (i54 + 1L);
							if ((i54 == 64L)) {
								i54 = 0L;
								i53 = (i53 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 3, 3, tmp3);

	int64_al[1][32][32][64] tmp42;

	(* J9 # J10, convDim = 2 *)
	Conv2DGroupWrapper(1, 32, 32, 64, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp38, tmp40, tmp42);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 64, tmp40);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp38);

	int64_al[1][1][1][64] tmp45;

	int64_pl i65;

	int64_pl i64;

	int64_pl i63;

	int64_pl i62;

	int64_pl i61;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.2.bias, 1, 1, 1, 64) *)
	i61 = 0L;
	for i62 = [0: 1]{
 		for i63 = [0: 1]{
 			for i64 = [0: 1]{
 				for i65 = [0: 64]{
 					tmp45[i62][i63][i64][i65] = tmp4[i61];
					i61 = (i61 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp4);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp45, 15);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J11 + J12 *)
	int64_al[1][32][32][64] tmp47;

	for i0 = [0: 1]{
 		for i1 = [0: 32]{
 			for i2 = [0: 32]{
 				for i3 = [0: 64]{
 					tmp47[i0][i1][i2][i3] = (tmp42[i0][i1][i2][i3] + tmp45[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp45);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp42);

	int64_al[1][64][32][32] tmp50;

	int64_pl i73;

	int64_pl i72;

	int64_pl i71;

	int64_pl i70;

	int64_pl i69;

	int64_pl i68;

	int64_pl i67;

	int64_pl i66;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J13, 1, 64, 32, 32) *)
	i66 = 0L;
	i67 = 0L;
	i68 = 0L;
	i69 = 0L;
	for i70 = [0: 1]{
 		for i72 = [0: 32]{
 			for i73 = [0: 32]{
 				for i71 = [0: 64]{
 					tmp50[i70][i71][i72][i73] = tmp47[i66][i67][i68][i69];
					i69 = (i69 + 1L);
					if ((i69 == 64L)) {
						i69 = 0L;
						i68 = (i68 + 1L);
						if ((i68 == 32L)) {
							i68 = 0L;
							i67 = (i67 + 1L);
							if ((i67 == 32L)) {
								i67 = 0L;
								i66 = (i66 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp47);

	int64_al[1][32][32][64] tmp52;

	int64_pl i81;

	int64_pl i80;

	int64_pl i79;

	int64_pl i78;

	int64_pl i77;

	int64_pl i76;

	int64_pl i75;

	int64_pl i74;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J14, 1, 32, 32, 64) *)
	i74 = 0L;
	i75 = 0L;
	i76 = 0L;
	i77 = 0L;
	for i78 = [0: 1]{
 		for i81 = [0: 64]{
 			for i79 = [0: 32]{
 				for i80 = [0: 32]{
 					tmp52[i78][i79][i80][i81] = tmp50[i74][i75][i76][i77];
					i77 = (i77 + 1L);
					if ((i77 == 32L)) {
						i77 = 0L;
						i76 = (i76 + 1L);
						if ((i76 == 32L)) {
							i76 = 0L;
							i75 = (i75 + 1L);
							if ((i75 == 64L)) {
								i75 = 0L;
								i74 = (i74 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 32, 32, tmp50);

	int64_al[1][32][32][64] tmp54;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 32, 32, 64, tmp52, tmp54, 15, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp52);

	int64_al[1][64][32][32] tmp56;

	int64_pl i89;

	int64_pl i88;

	int64_pl i87;

	int64_pl i86;

	int64_pl i85;

	int64_pl i84;

	int64_pl i83;

	int64_pl i82;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J16, 1, 64, 32, 32) *)
	i82 = 0L;
	i83 = 0L;
	i84 = 0L;
	i85 = 0L;
	for i86 = [0: 1]{
 		for i88 = [0: 32]{
 			for i89 = [0: 32]{
 				for i87 = [0: 64]{
 					tmp56[i86][i87][i88][i89] = tmp54[i82][i83][i84][i85];
					i85 = (i85 + 1L);
					if ((i85 == 64L)) {
						i85 = 0L;
						i84 = (i84 + 1L);
						if ((i84 == 32L)) {
							i84 = 0L;
							i83 = (i83 + 1L);
							if ((i83 == 32L)) {
								i83 = 0L;
								i82 = (i82 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp54);

	int64_al[1][32][32][64] tmp58;

	int64_pl i97;

	int64_pl i96;

	int64_pl i95;

	int64_pl i94;

	int64_pl i93;

	int64_pl i92;

	int64_pl i91;

	int64_pl i90;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J17, 1, 32, 32, 64) *)
	i90 = 0L;
	i91 = 0L;
	i92 = 0L;
	i93 = 0L;
	for i94 = [0: 1]{
 		for i97 = [0: 64]{
 			for i95 = [0: 32]{
 				for i96 = [0: 32]{
 					tmp58[i94][i95][i96][i97] = tmp56[i90][i91][i92][i93];
					i93 = (i93 + 1L);
					if ((i93 == 32L)) {
						i93 = 0L;
						i92 = (i92 + 1L);
						if ((i92 == 32L)) {
							i92 = 0L;
							i91 = (i91 + 1L);
							if ((i91 == 64L)) {
								i91 = 0L;
								i90 = (i90 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 32, 32, tmp56);

	int64_al[1][16][16][64] tmp60;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	AvgPool(1, 16, 16, 64, 2, 2, 0, 0, 0, 0, 2, 2, 1, 32, 32, 64, tmp58, tmp60);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 32, 32, 64, tmp58);

	int64_al[1][64][16][16] tmp62;

	int64_pl i105;

	int64_pl i104;

	int64_pl i103;

	int64_pl i102;

	int64_pl i101;

	int64_pl i100;

	int64_pl i99;

	int64_pl i98;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J19, 1, 64, 16, 16) *)
	i98 = 0L;
	i99 = 0L;
	i100 = 0L;
	i101 = 0L;
	for i102 = [0: 1]{
 		for i104 = [0: 16]{
 			for i105 = [0: 16]{
 				for i103 = [0: 64]{
 					tmp62[i102][i103][i104][i105] = tmp60[i98][i99][i100][i101];
					i101 = (i101 + 1L);
					if ((i101 == 64L)) {
						i101 = 0L;
						i100 = (i100 + 1L);
						if ((i100 == 16L)) {
							i100 = 0L;
							i99 = (i99 + 1L);
							if ((i99 == 16L)) {
								i99 = 0L;
								i98 = (i98 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp60);

	int64_al[1][16][16][64] tmp64;

	int64_pl i113;

	int64_pl i112;

	int64_pl i111;

	int64_pl i110;

	int64_pl i109;

	int64_pl i108;

	int64_pl i107;

	int64_pl i106;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J20, 1, 16, 16, 64) *)
	i106 = 0L;
	i107 = 0L;
	i108 = 0L;
	i109 = 0L;
	for i110 = [0: 1]{
 		for i113 = [0: 64]{
 			for i111 = [0: 16]{
 				for i112 = [0: 16]{
 					tmp64[i110][i111][i112][i113] = tmp62[i106][i107][i108][i109];
					i109 = (i109 + 1L);
					if ((i109 == 16L)) {
						i109 = 0L;
						i108 = (i108 + 1L);
						if ((i108 == 16L)) {
							i108 = 0L;
							i107 = (i107 + 1L);
							if ((i107 == 64L)) {
								i107 = 0L;
								i106 = (i106 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 16, 16, tmp62);

	int64_al[3][3][64][64] tmp66;

	int64_pl i121;

	int64_pl i120;

	int64_pl i119;

	int64_pl i118;

	int64_pl i117;

	int64_pl i116;

	int64_pl i115;

	int64_pl i114;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.5.weight, 3, 3, 64, 64) *)
	i114 = 0L;
	i115 = 0L;
	i116 = 0L;
	i117 = 0L;
	for i121 = [0: 64]{
 		for i120 = [0: 64]{
 			for i118 = [0: 3]{
 				for i119 = [0: 3]{
 					tmp66[i118][i119][i120][i121] = tmp5[i114][i115][i116][i117];
					i117 = (i117 + 1L);
					if ((i117 == 3L)) {
						i117 = 0L;
						i116 = (i116 + 1L);
						if ((i116 == 3L)) {
							i116 = 0L;
							i115 = (i115 + 1L);
							if ((i115 == 64L)) {
								i115 = 0L;
								i114 = (i114 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 3, 3, tmp5);

	int64_al[1][16][16][64] tmp68;

	(* J21 # J22, convDim = 2 *)
	Conv2DGroupWrapper(1, 16, 16, 64, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp64, tmp66, tmp68);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 64, tmp66);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp64);

	int64_al[1][1][1][64] tmp71;

	int64_pl i126;

	int64_pl i125;

	int64_pl i124;

	int64_pl i123;

	int64_pl i122;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.5.bias, 1, 1, 1, 64) *)
	i122 = 0L;
	for i123 = [0: 1]{
 		for i124 = [0: 1]{
 			for i125 = [0: 1]{
 				for i126 = [0: 64]{
 					tmp71[i123][i124][i125][i126] = tmp6[i122];
					i122 = (i122 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp6);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp71, 15);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J23 + J24 *)
	int64_al[1][16][16][64] tmp73;

	for i0 = [0: 1]{
 		for i1 = [0: 16]{
 			for i2 = [0: 16]{
 				for i3 = [0: 64]{
 					tmp73[i0][i1][i2][i3] = (tmp68[i0][i1][i2][i3] + tmp71[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp71);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp68);

	int64_al[1][64][16][16] tmp76;

	int64_pl i134;

	int64_pl i133;

	int64_pl i132;

	int64_pl i131;

	int64_pl i130;

	int64_pl i129;

	int64_pl i128;

	int64_pl i127;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J25, 1, 64, 16, 16) *)
	i127 = 0L;
	i128 = 0L;
	i129 = 0L;
	i130 = 0L;
	for i131 = [0: 1]{
 		for i133 = [0: 16]{
 			for i134 = [0: 16]{
 				for i132 = [0: 64]{
 					tmp76[i131][i132][i133][i134] = tmp73[i127][i128][i129][i130];
					i130 = (i130 + 1L);
					if ((i130 == 64L)) {
						i130 = 0L;
						i129 = (i129 + 1L);
						if ((i129 == 16L)) {
							i129 = 0L;
							i128 = (i128 + 1L);
							if ((i128 == 16L)) {
								i128 = 0L;
								i127 = (i127 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp73);

	int64_al[1][16][16][64] tmp78;

	int64_pl i142;

	int64_pl i141;

	int64_pl i140;

	int64_pl i139;

	int64_pl i138;

	int64_pl i137;

	int64_pl i136;

	int64_pl i135;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J26, 1, 16, 16, 64) *)
	i135 = 0L;
	i136 = 0L;
	i137 = 0L;
	i138 = 0L;
	for i139 = [0: 1]{
 		for i142 = [0: 64]{
 			for i140 = [0: 16]{
 				for i141 = [0: 16]{
 					tmp78[i139][i140][i141][i142] = tmp76[i135][i136][i137][i138];
					i138 = (i138 + 1L);
					if ((i138 == 16L)) {
						i138 = 0L;
						i137 = (i137 + 1L);
						if ((i137 == 16L)) {
							i137 = 0L;
							i136 = (i136 + 1L);
							if ((i136 == 64L)) {
								i136 = 0L;
								i135 = (i135 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 16, 16, tmp76);

	int64_al[1][16][16][64] tmp80;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 16, 16, 64, tmp78, tmp80, 15, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp78);

	int64_al[1][64][16][16] tmp82;

	int64_pl i150;

	int64_pl i149;

	int64_pl i148;

	int64_pl i147;

	int64_pl i146;

	int64_pl i145;

	int64_pl i144;

	int64_pl i143;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J28, 1, 64, 16, 16) *)
	i143 = 0L;
	i144 = 0L;
	i145 = 0L;
	i146 = 0L;
	for i147 = [0: 1]{
 		for i149 = [0: 16]{
 			for i150 = [0: 16]{
 				for i148 = [0: 64]{
 					tmp82[i147][i148][i149][i150] = tmp80[i143][i144][i145][i146];
					i146 = (i146 + 1L);
					if ((i146 == 64L)) {
						i146 = 0L;
						i145 = (i145 + 1L);
						if ((i145 == 16L)) {
							i145 = 0L;
							i144 = (i144 + 1L);
							if ((i144 == 16L)) {
								i144 = 0L;
								i143 = (i143 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp80);

	int64_al[1][16][16][64] tmp84;

	int64_pl i158;

	int64_pl i157;

	int64_pl i156;

	int64_pl i155;

	int64_pl i154;

	int64_pl i153;

	int64_pl i152;

	int64_pl i151;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J29, 1, 16, 16, 64) *)
	i151 = 0L;
	i152 = 0L;
	i153 = 0L;
	i154 = 0L;
	for i155 = [0: 1]{
 		for i158 = [0: 64]{
 			for i156 = [0: 16]{
 				for i157 = [0: 16]{
 					tmp84[i155][i156][i157][i158] = tmp82[i151][i152][i153][i154];
					i154 = (i154 + 1L);
					if ((i154 == 16L)) {
						i154 = 0L;
						i153 = (i153 + 1L);
						if ((i153 == 16L)) {
							i153 = 0L;
							i152 = (i152 + 1L);
							if ((i152 == 64L)) {
								i152 = 0L;
								i151 = (i151 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 16, 16, tmp82);

	int64_al[3][3][64][64] tmp86;

	int64_pl i166;

	int64_pl i165;

	int64_pl i164;

	int64_pl i163;

	int64_pl i162;

	int64_pl i161;

	int64_pl i160;

	int64_pl i159;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.7.weight, 3, 3, 64, 64) *)
	i159 = 0L;
	i160 = 0L;
	i161 = 0L;
	i162 = 0L;
	for i166 = [0: 64]{
 		for i165 = [0: 64]{
 			for i163 = [0: 3]{
 				for i164 = [0: 3]{
 					tmp86[i163][i164][i165][i166] = tmp7[i159][i160][i161][i162];
					i162 = (i162 + 1L);
					if ((i162 == 3L)) {
						i162 = 0L;
						i161 = (i161 + 1L);
						if ((i161 == 3L)) {
							i161 = 0L;
							i160 = (i160 + 1L);
							if ((i160 == 64L)) {
								i160 = 0L;
								i159 = (i159 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 3, 3, tmp7);

	int64_al[1][16][16][64] tmp88;

	(* J30 # J31, convDim = 2 *)
	Conv2DGroupWrapper(1, 16, 16, 64, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp84, tmp86, tmp88);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp84);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 64, tmp86);

	int64_al[1][1][1][64] tmp91;

	int64_pl i171;

	int64_pl i170;

	int64_pl i169;

	int64_pl i168;

	int64_pl i167;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.7.bias, 1, 1, 1, 64) *)
	i167 = 0L;
	for i168 = [0: 1]{
 		for i169 = [0: 1]{
 			for i170 = [0: 1]{
 				for i171 = [0: 64]{
 					tmp91[i168][i169][i170][i171] = tmp8[i167];
					i167 = (i167 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp8);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp91, 15);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J32 + J33 *)
	int64_al[1][16][16][64] tmp93;

	for i0 = [0: 1]{
 		for i1 = [0: 16]{
 			for i2 = [0: 16]{
 				for i3 = [0: 64]{
 					tmp93[i0][i1][i2][i3] = (tmp88[i0][i1][i2][i3] + tmp91[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp91);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp88);

	int64_al[1][64][16][16] tmp96;

	int64_pl i179;

	int64_pl i178;

	int64_pl i177;

	int64_pl i176;

	int64_pl i175;

	int64_pl i174;

	int64_pl i173;

	int64_pl i172;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J34, 1, 64, 16, 16) *)
	i172 = 0L;
	i173 = 0L;
	i174 = 0L;
	i175 = 0L;
	for i176 = [0: 1]{
 		for i178 = [0: 16]{
 			for i179 = [0: 16]{
 				for i177 = [0: 64]{
 					tmp96[i176][i177][i178][i179] = tmp93[i172][i173][i174][i175];
					i175 = (i175 + 1L);
					if ((i175 == 64L)) {
						i175 = 0L;
						i174 = (i174 + 1L);
						if ((i174 == 16L)) {
							i174 = 0L;
							i173 = (i173 + 1L);
							if ((i173 == 16L)) {
								i173 = 0L;
								i172 = (i172 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp93);

	int64_al[1][16][16][64] tmp98;

	int64_pl i187;

	int64_pl i186;

	int64_pl i185;

	int64_pl i184;

	int64_pl i183;

	int64_pl i182;

	int64_pl i181;

	int64_pl i180;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J35, 1, 16, 16, 64) *)
	i180 = 0L;
	i181 = 0L;
	i182 = 0L;
	i183 = 0L;
	for i184 = [0: 1]{
 		for i187 = [0: 64]{
 			for i185 = [0: 16]{
 				for i186 = [0: 16]{
 					tmp98[i184][i185][i186][i187] = tmp96[i180][i181][i182][i183];
					i183 = (i183 + 1L);
					if ((i183 == 16L)) {
						i183 = 0L;
						i182 = (i182 + 1L);
						if ((i182 == 16L)) {
							i182 = 0L;
							i181 = (i181 + 1L);
							if ((i181 == 64L)) {
								i181 = 0L;
								i180 = (i180 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 16, 16, tmp96);

	int64_al[1][16][16][64] tmp100;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 16, 16, 64, tmp98, tmp100, 15, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp98);

	int64_al[1][64][16][16] tmp102;

	int64_pl i195;

	int64_pl i194;

	int64_pl i193;

	int64_pl i192;

	int64_pl i191;

	int64_pl i190;

	int64_pl i189;

	int64_pl i188;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J37, 1, 64, 16, 16) *)
	i188 = 0L;
	i189 = 0L;
	i190 = 0L;
	i191 = 0L;
	for i192 = [0: 1]{
 		for i194 = [0: 16]{
 			for i195 = [0: 16]{
 				for i193 = [0: 64]{
 					tmp102[i192][i193][i194][i195] = tmp100[i188][i189][i190][i191];
					i191 = (i191 + 1L);
					if ((i191 == 64L)) {
						i191 = 0L;
						i190 = (i190 + 1L);
						if ((i190 == 16L)) {
							i190 = 0L;
							i189 = (i189 + 1L);
							if ((i189 == 16L)) {
								i189 = 0L;
								i188 = (i188 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp100);

	int64_al[1][16][16][64] tmp104;

	int64_pl i203;

	int64_pl i202;

	int64_pl i201;

	int64_pl i200;

	int64_pl i199;

	int64_pl i198;

	int64_pl i197;

	int64_pl i196;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J38, 1, 16, 16, 64) *)
	i196 = 0L;
	i197 = 0L;
	i198 = 0L;
	i199 = 0L;
	for i200 = [0: 1]{
 		for i203 = [0: 64]{
 			for i201 = [0: 16]{
 				for i202 = [0: 16]{
 					tmp104[i200][i201][i202][i203] = tmp102[i196][i197][i198][i199];
					i199 = (i199 + 1L);
					if ((i199 == 16L)) {
						i199 = 0L;
						i198 = (i198 + 1L);
						if ((i198 == 16L)) {
							i198 = 0L;
							i197 = (i197 + 1L);
							if ((i197 == 64L)) {
								i197 = 0L;
								i196 = (i196 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 16, 16, tmp102);

	int64_al[1][8][8][64] tmp106;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	AvgPool(1, 8, 8, 64, 2, 2, 0, 0, 0, 0, 2, 2, 1, 16, 16, 64, tmp104, tmp106);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 16, 64, tmp104);

	int64_al[1][64][8][8] tmp108;

	int64_pl i211;

	int64_pl i210;

	int64_pl i209;

	int64_pl i208;

	int64_pl i207;

	int64_pl i206;

	int64_pl i205;

	int64_pl i204;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J40, 1, 64, 8, 8) *)
	i204 = 0L;
	i205 = 0L;
	i206 = 0L;
	i207 = 0L;
	for i208 = [0: 1]{
 		for i210 = [0: 8]{
 			for i211 = [0: 8]{
 				for i209 = [0: 64]{
 					tmp108[i208][i209][i210][i211] = tmp106[i204][i205][i206][i207];
					i207 = (i207 + 1L);
					if ((i207 == 64L)) {
						i207 = 0L;
						i206 = (i206 + 1L);
						if ((i206 == 8L)) {
							i206 = 0L;
							i205 = (i205 + 1L);
							if ((i205 == 8L)) {
								i205 = 0L;
								i204 = (i204 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp106);

	int64_al[1][8][8][64] tmp110;

	int64_pl i219;

	int64_pl i218;

	int64_pl i217;

	int64_pl i216;

	int64_pl i215;

	int64_pl i214;

	int64_pl i213;

	int64_pl i212;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J41, 1, 8, 8, 64) *)
	i212 = 0L;
	i213 = 0L;
	i214 = 0L;
	i215 = 0L;
	for i216 = [0: 1]{
 		for i219 = [0: 64]{
 			for i217 = [0: 8]{
 				for i218 = [0: 8]{
 					tmp110[i216][i217][i218][i219] = tmp108[i212][i213][i214][i215];
					i215 = (i215 + 1L);
					if ((i215 == 8L)) {
						i215 = 0L;
						i214 = (i214 + 1L);
						if ((i214 == 8L)) {
							i214 = 0L;
							i213 = (i213 + 1L);
							if ((i213 == 64L)) {
								i213 = 0L;
								i212 = (i212 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 8, 8, tmp108);

	int64_al[3][3][64][64] tmp112;

	int64_pl i227;

	int64_pl i226;

	int64_pl i225;

	int64_pl i224;

	int64_pl i223;

	int64_pl i222;

	int64_pl i221;

	int64_pl i220;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.10.weight, 3, 3, 64, 64) *)
	i220 = 0L;
	i221 = 0L;
	i222 = 0L;
	i223 = 0L;
	for i227 = [0: 64]{
 		for i226 = [0: 64]{
 			for i224 = [0: 3]{
 				for i225 = [0: 3]{
 					tmp112[i224][i225][i226][i227] = tmp9[i220][i221][i222][i223];
					i223 = (i223 + 1L);
					if ((i223 == 3L)) {
						i223 = 0L;
						i222 = (i222 + 1L);
						if ((i222 == 3L)) {
							i222 = 0L;
							i221 = (i221 + 1L);
							if ((i221 == 64L)) {
								i221 = 0L;
								i220 = (i220 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 3, 3, tmp9);

	int64_al[1][8][8][64] tmp114;

	(* J42 # J43, convDim = 2 *)
	Conv2DGroupWrapper(1, 8, 8, 64, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp110, tmp112, tmp114);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 64, tmp112);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp110);

	int64_al[1][1][1][64] tmp117;

	int64_pl i232;

	int64_pl i231;

	int64_pl i230;

	int64_pl i229;

	int64_pl i228;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.10.bias, 1, 1, 1, 64) *)
	i228 = 0L;
	for i229 = [0: 1]{
 		for i230 = [0: 1]{
 			for i231 = [0: 1]{
 				for i232 = [0: 64]{
 					tmp117[i229][i230][i231][i232] = tmp10[i228];
					i228 = (i228 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp10);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp117, 15);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J44 + J45 *)
	int64_al[1][8][8][64] tmp119;

	for i0 = [0: 1]{
 		for i1 = [0: 8]{
 			for i2 = [0: 8]{
 				for i3 = [0: 64]{
 					tmp119[i0][i1][i2][i3] = (tmp114[i0][i1][i2][i3] + tmp117[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp117);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp114);

	int64_al[1][64][8][8] tmp122;

	int64_pl i240;

	int64_pl i239;

	int64_pl i238;

	int64_pl i237;

	int64_pl i236;

	int64_pl i235;

	int64_pl i234;

	int64_pl i233;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J46, 1, 64, 8, 8) *)
	i233 = 0L;
	i234 = 0L;
	i235 = 0L;
	i236 = 0L;
	for i237 = [0: 1]{
 		for i239 = [0: 8]{
 			for i240 = [0: 8]{
 				for i238 = [0: 64]{
 					tmp122[i237][i238][i239][i240] = tmp119[i233][i234][i235][i236];
					i236 = (i236 + 1L);
					if ((i236 == 64L)) {
						i236 = 0L;
						i235 = (i235 + 1L);
						if ((i235 == 8L)) {
							i235 = 0L;
							i234 = (i234 + 1L);
							if ((i234 == 8L)) {
								i234 = 0L;
								i233 = (i233 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp119);

	int64_al[1][8][8][64] tmp124;

	int64_pl i248;

	int64_pl i247;

	int64_pl i246;

	int64_pl i245;

	int64_pl i244;

	int64_pl i243;

	int64_pl i242;

	int64_pl i241;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J47, 1, 8, 8, 64) *)
	i241 = 0L;
	i242 = 0L;
	i243 = 0L;
	i244 = 0L;
	for i245 = [0: 1]{
 		for i248 = [0: 64]{
 			for i246 = [0: 8]{
 				for i247 = [0: 8]{
 					tmp124[i245][i246][i247][i248] = tmp122[i241][i242][i243][i244];
					i244 = (i244 + 1L);
					if ((i244 == 8L)) {
						i244 = 0L;
						i243 = (i243 + 1L);
						if ((i243 == 8L)) {
							i243 = 0L;
							i242 = (i242 + 1L);
							if ((i242 == 64L)) {
								i242 = 0L;
								i241 = (i241 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 8, 8, tmp122);

	int64_al[1][8][8][64] tmp126;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 8, 8, 64, tmp124, tmp126, 15, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp124);

	int64_al[1][64][8][8] tmp128;

	int64_pl i256;

	int64_pl i255;

	int64_pl i254;

	int64_pl i253;

	int64_pl i252;

	int64_pl i251;

	int64_pl i250;

	int64_pl i249;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J49, 1, 64, 8, 8) *)
	i249 = 0L;
	i250 = 0L;
	i251 = 0L;
	i252 = 0L;
	for i253 = [0: 1]{
 		for i255 = [0: 8]{
 			for i256 = [0: 8]{
 				for i254 = [0: 64]{
 					tmp128[i253][i254][i255][i256] = tmp126[i249][i250][i251][i252];
					i252 = (i252 + 1L);
					if ((i252 == 64L)) {
						i252 = 0L;
						i251 = (i251 + 1L);
						if ((i251 == 8L)) {
							i251 = 0L;
							i250 = (i250 + 1L);
							if ((i250 == 8L)) {
								i250 = 0L;
								i249 = (i249 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp126);

	int64_al[1][8][8][64] tmp130;

	int64_pl i264;

	int64_pl i263;

	int64_pl i262;

	int64_pl i261;

	int64_pl i260;

	int64_pl i259;

	int64_pl i258;

	int64_pl i257;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J50, 1, 8, 8, 64) *)
	i257 = 0L;
	i258 = 0L;
	i259 = 0L;
	i260 = 0L;
	for i261 = [0: 1]{
 		for i264 = [0: 64]{
 			for i262 = [0: 8]{
 				for i263 = [0: 8]{
 					tmp130[i261][i262][i263][i264] = tmp128[i257][i258][i259][i260];
					i260 = (i260 + 1L);
					if ((i260 == 8L)) {
						i260 = 0L;
						i259 = (i259 + 1L);
						if ((i259 == 8L)) {
							i259 = 0L;
							i258 = (i258 + 1L);
							if ((i258 == 64L)) {
								i258 = 0L;
								i257 = (i257 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 8, 8, tmp128);

	int64_al[1][1][64][64] tmp132;

	int64_pl i272;

	int64_pl i271;

	int64_pl i270;

	int64_pl i269;

	int64_pl i268;

	int64_pl i267;

	int64_pl i266;

	int64_pl i265;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.12.weight, 1, 1, 64, 64) *)
	i265 = 0L;
	i266 = 0L;
	i267 = 0L;
	i268 = 0L;
	for i272 = [0: 64]{
 		for i271 = [0: 64]{
 			for i269 = [0: 1]{
 				for i270 = [0: 1]{
 					tmp132[i269][i270][i271][i272] = tmp11[i265][i266][i267][i268];
					i268 = (i268 + 1L);
					if ((i268 == 1L)) {
						i268 = 0L;
						i267 = (i267 + 1L);
						if ((i267 == 1L)) {
							i267 = 0L;
							i266 = (i266 + 1L);
							if ((i266 == 64L)) {
								i266 = 0L;
								i265 = (i265 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 1, 1, tmp11);

	int64_al[1][8][8][64] tmp134;

	(* J51 # J52, convDim = 2 *)
	Conv2DGroupWrapper(1, 8, 8, 64, 1, 1, 64, 0, 0, 0, 0, 1, 1, 1, tmp130, tmp132, tmp134);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp130);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 64, 64, tmp132);

	int64_al[1][1][1][64] tmp137;

	int64_pl i277;

	int64_pl i276;

	int64_pl i275;

	int64_pl i274;

	int64_pl i273;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.12.bias, 1, 1, 1, 64) *)
	i273 = 0L;
	for i274 = [0: 1]{
 		for i275 = [0: 1]{
 			for i276 = [0: 1]{
 				for i277 = [0: 64]{
 					tmp137[i274][i275][i276][i277] = tmp12[i273];
					i273 = (i273 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp12);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp137, 15);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J53 + J54 *)
	int64_al[1][8][8][64] tmp139;

	for i0 = [0: 1]{
 		for i1 = [0: 8]{
 			for i2 = [0: 8]{
 				for i3 = [0: 64]{
 					tmp139[i0][i1][i2][i3] = (tmp134[i0][i1][i2][i3] + tmp137[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp137);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp134);

	int64_al[1][64][8][8] tmp142;

	int64_pl i285;

	int64_pl i284;

	int64_pl i283;

	int64_pl i282;

	int64_pl i281;

	int64_pl i280;

	int64_pl i279;

	int64_pl i278;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J55, 1, 64, 8, 8) *)
	i278 = 0L;
	i279 = 0L;
	i280 = 0L;
	i281 = 0L;
	for i282 = [0: 1]{
 		for i284 = [0: 8]{
 			for i285 = [0: 8]{
 				for i283 = [0: 64]{
 					tmp142[i282][i283][i284][i285] = tmp139[i278][i279][i280][i281];
					i281 = (i281 + 1L);
					if ((i281 == 64L)) {
						i281 = 0L;
						i280 = (i280 + 1L);
						if ((i280 == 8L)) {
							i280 = 0L;
							i279 = (i279 + 1L);
							if ((i279 == 8L)) {
								i279 = 0L;
								i278 = (i278 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp139);

	int64_al[1][8][8][64] tmp144;

	int64_pl i293;

	int64_pl i292;

	int64_pl i291;

	int64_pl i290;

	int64_pl i289;

	int64_pl i288;

	int64_pl i287;

	int64_pl i286;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J56, 1, 8, 8, 64) *)
	i286 = 0L;
	i287 = 0L;
	i288 = 0L;
	i289 = 0L;
	for i290 = [0: 1]{
 		for i293 = [0: 64]{
 			for i291 = [0: 8]{
 				for i292 = [0: 8]{
 					tmp144[i290][i291][i292][i293] = tmp142[i286][i287][i288][i289];
					i289 = (i289 + 1L);
					if ((i289 == 8L)) {
						i289 = 0L;
						i288 = (i288 + 1L);
						if ((i288 == 8L)) {
							i288 = 0L;
							i287 = (i287 + 1L);
							if ((i287 == 64L)) {
								i287 = 0L;
								i286 = (i286 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 8, 8, tmp142);

	int64_al[1][8][8][64] tmp146;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 8, 8, 64, tmp144, tmp146, 15, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp144);

	int64_al[1][64][8][8] tmp148;

	int64_pl i301;

	int64_pl i300;

	int64_pl i299;

	int64_pl i298;

	int64_pl i297;

	int64_pl i296;

	int64_pl i295;

	int64_pl i294;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J58, 1, 64, 8, 8) *)
	i294 = 0L;
	i295 = 0L;
	i296 = 0L;
	i297 = 0L;
	for i298 = [0: 1]{
 		for i300 = [0: 8]{
 			for i301 = [0: 8]{
 				for i299 = [0: 64]{
 					tmp148[i298][i299][i300][i301] = tmp146[i294][i295][i296][i297];
					i297 = (i297 + 1L);
					if ((i297 == 64L)) {
						i297 = 0L;
						i296 = (i296 + 1L);
						if ((i296 == 8L)) {
							i296 = 0L;
							i295 = (i295 + 1L);
							if ((i295 == 8L)) {
								i295 = 0L;
								i294 = (i294 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp146);

	int64_al[1][8][8][64] tmp150;

	int64_pl i309;

	int64_pl i308;

	int64_pl i307;

	int64_pl i306;

	int64_pl i305;

	int64_pl i304;

	int64_pl i303;

	int64_pl i302;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J59, 1, 8, 8, 64) *)
	i302 = 0L;
	i303 = 0L;
	i304 = 0L;
	i305 = 0L;
	for i306 = [0: 1]{
 		for i309 = [0: 64]{
 			for i307 = [0: 8]{
 				for i308 = [0: 8]{
 					tmp150[i306][i307][i308][i309] = tmp148[i302][i303][i304][i305];
					i305 = (i305 + 1L);
					if ((i305 == 8L)) {
						i305 = 0L;
						i304 = (i304 + 1L);
						if ((i304 == 8L)) {
							i304 = 0L;
							i303 = (i303 + 1L);
							if ((i303 == 64L)) {
								i303 = 0L;
								i302 = (i302 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 8, 8, tmp148);

	int64_al[1][1][64][16] tmp152;

	int64_pl i317;

	int64_pl i316;

	int64_pl i315;

	int64_pl i314;

	int64_pl i313;

	int64_pl i312;

	int64_pl i311;

	int64_pl i310;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.14.weight, 1, 1, 64, 16) *)
	i310 = 0L;
	i311 = 0L;
	i312 = 0L;
	i313 = 0L;
	for i317 = [0: 16]{
 		for i316 = [0: 64]{
 			for i314 = [0: 1]{
 				for i315 = [0: 1]{
 					tmp152[i314][i315][i316][i317] = tmp13[i310][i311][i312][i313];
					i313 = (i313 + 1L);
					if ((i313 == 1L)) {
						i313 = 0L;
						i312 = (i312 + 1L);
						if ((i312 == 1L)) {
							i312 = 0L;
							i311 = (i311 + 1L);
							if ((i311 == 64L)) {
								i311 = 0L;
								i310 = (i310 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(16, 64, 1, 1, tmp13);

	int64_al[1][8][8][16] tmp154;

	(* J60 # J61, convDim = 2 *)
	Conv2DGroupWrapper(1, 8, 8, 64, 1, 1, 16, 0, 0, 0, 0, 1, 1, 1, tmp150, tmp152, tmp154);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 64, tmp150);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 64, 16, tmp152);

	int64_al[1][1][1][16] tmp157;

	int64_pl i322;

	int64_pl i321;

	int64_pl i320;

	int64_pl i319;

	int64_pl i318;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(cnn_layers.14.bias, 1, 1, 1, 16) *)
	i318 = 0L;
	for i319 = [0: 1]{
 		for i320 = [0: 1]{
 			for i321 = [0: 1]{
 				for i322 = [0: 16]{
 					tmp157[i319][i320][i321][i322] = tmp14[i318];
					i318 = (i318 + 1L);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(16, tmp14);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 16, tmp157, 15);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J62 + J63 *)
	int64_al[1][8][8][16] tmp159;

	for i0 = [0: 1]{
 		for i1 = [0: 8]{
 			for i2 = [0: 8]{
 				for i3 = [0: 16]{
 					tmp159[i0][i1][i2][i3] = (tmp154[i0][i1][i2][i3] + tmp157[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 16, tmp157);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 16, tmp154);

	int64_al[1][16][8][8] tmp162;

	int64_pl i330;

	int64_pl i329;

	int64_pl i328;

	int64_pl i327;

	int64_pl i326;

	int64_pl i325;

	int64_pl i324;

	int64_pl i323;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J64, 1, 16, 8, 8) *)
	i323 = 0L;
	i324 = 0L;
	i325 = 0L;
	i326 = 0L;
	for i327 = [0: 1]{
 		for i329 = [0: 8]{
 			for i330 = [0: 8]{
 				for i328 = [0: 16]{
 					tmp162[i327][i328][i329][i330] = tmp159[i323][i324][i325][i326];
					i326 = (i326 + 1L);
					if ((i326 == 16L)) {
						i326 = 0L;
						i325 = (i325 + 1L);
						if ((i325 == 8L)) {
							i325 = 0L;
							i324 = (i324 + 1L);
							if ((i324 == 8L)) {
								i324 = 0L;
								i323 = (i323 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 16, tmp159);

	int64_al[1][8][8][16] tmp164;

	int64_pl i338;

	int64_pl i337;

	int64_pl i336;

	int64_pl i335;

	int64_pl i334;

	int64_pl i333;

	int64_pl i332;

	int64_pl i331;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J65, 1, 8, 8, 16) *)
	i331 = 0L;
	i332 = 0L;
	i333 = 0L;
	i334 = 0L;
	for i335 = [0: 1]{
 		for i338 = [0: 16]{
 			for i336 = [0: 8]{
 				for i337 = [0: 8]{
 					tmp164[i335][i336][i337][i338] = tmp162[i331][i332][i333][i334];
					i334 = (i334 + 1L);
					if ((i334 == 8L)) {
						i334 = 0L;
						i333 = (i333 + 1L);
						if ((i333 == 8L)) {
							i333 = 0L;
							i332 = (i332 + 1L);
							if ((i332 == 16L)) {
								i332 = 0L;
								i331 = (i331 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 8, 8, tmp162);

	int64_al[1][8][8][16] tmp166;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 8, 8, 16, tmp164, tmp166, 15, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 16, tmp164);

	int64_al[1][16][8][8] tmp168;

	int64_pl i346;

	int64_pl i345;

	int64_pl i344;

	int64_pl i343;

	int64_pl i342;

	int64_pl i341;

	int64_pl i340;

	int64_pl i339;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J67, 1, 16, 8, 8) *)
	i339 = 0L;
	i340 = 0L;
	i341 = 0L;
	i342 = 0L;
	for i343 = [0: 1]{
 		for i345 = [0: 8]{
 			for i346 = [0: 8]{
 				for i344 = [0: 16]{
 					tmp168[i343][i344][i345][i346] = tmp166[i339][i340][i341][i342];
					i342 = (i342 + 1L);
					if ((i342 == 16L)) {
						i342 = 0L;
						i341 = (i341 + 1L);
						if ((i341 == 8L)) {
							i341 = 0L;
							i340 = (i340 + 1L);
							if ((i340 == 8L)) {
								i340 = 0L;
								i339 = (i339 + 1L);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 8, 8, 16, tmp166);

	int64_al[1][1024] tmp170;

	int64_pl i352;

	int64_pl i351;

	int64_pl i350;

	int64_pl i349;

	int64_pl i348;

	int64_pl i347;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J68, 1, 1024) *)
	i347 = 0L;
	i348 = 0L;
	i349 = 0L;
	i350 = 0L;
	for i351 = [0: 1]{
 		for i352 = [0: 1024]{
 			tmp170[i351][i352] = tmp168[i347][i348][i349][i350];
			i350 = (i350 + 1L);
			if ((i350 == 8L)) {
				i350 = 0L;
				i349 = (i349 + 1L);
				if ((i349 == 8L)) {
					i349 = 0L;
					i348 = (i348 + 1L);
					if ((i348 == 16L)) {
						i348 = 0L;
						i347 = (i347 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 16, 8, 8, tmp168);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(10, tmp16, 15);

	int64_al[1][10] tmp173;

	int64_al[1024][10] tmp172;

	int64_pl i354;

	int64_pl i353;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* transpose(linear_layers.0.weight, [10, 1024] --> [1024, 10]) *)
	for i353 = [0: 10]{
 		for i354 = [0: 1024]{
 			tmp172[i354][i353] = tmp15[i353][i354];
		};
	};
	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J69 * tmp172 *)
	MatMul2D(1, 1024, 10, tmp170, tmp172, tmp173, false);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* tmp173 + linear_layers.0.bias *)
	int64_al[1][10] tmp174;

	for i0 = [0: 1]{
 		for i1 = [0: 10]{
 			tmp174[i0][i1] = (tmp173[i0][i1] + tmp16[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(10, tmp16);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(10, 1024, tmp15);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(1, 1024, tmp170);

	ScaleDown2(1, 10, tmp174, 15);

	EndComputation();

	output(CLIENT, tmp174);

}
