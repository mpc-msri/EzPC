(*

Authors: Kanav Gupta.

Copyright:
Copyright (c) 2020 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)


(* Helper functions defined in C++ Code *)
extern void ClearMemSecret1(int32_pl s1, int32_al[s1] arr);
extern void ClearMemSecret2(int32_pl s1, int32_pl s2, int32_al[s1][s2] arr);
extern void ClearMemSecret3(int32_pl s1, int32_pl s2, int32_pl s3, int32_al[s1][s2][s3] arr);
extern void ClearMemSecret4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] arr);
extern void ClearMemSecret5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] arr);
extern void ClearMemPublic(int32_pl x);
extern void ClearMemPublic1(int32_pl s, int32_pl[s] x);
extern void ClearMemPublic2(int32_pl s1, int32_pl s2, int32_pl[s1][s2] arr);
extern void ClearMemPublic3(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl[s1][s2][s3] arr);
extern void ClearMemPublic4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl[s1][s2][s3][s4] arr);
extern void ClearMemPublic5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl[s1][s2][s3][s4][s5] arr);

extern void MatMul2D(int32_pl i, int32_pl j, int32_pl k, int32_al[i][j] A, int32_al[j][k] B, int32_al[i][k] C, bool_pl modelIsA);

extern void ArgMax(int32_pl s1, int32_pl s2, int32_al[s1][s2] inArr, int32_al[s1] outArr);

extern void Relu(int32_pl s1, int32_al[s1] inArr, int32_al[s1] outArr, int32_pl sf, bool_pl doTruncation);

extern void Floor(int32_pl s1, int32_al[s1] inArr, int32_al[s1] outArr, int32_pl sf);

extern void MaxPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int32_al[N1][imgH][imgW][C1] inArr, 
				  int32_al[N][H][W][C] outArr);

extern void AvgPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int32_al[N1][imgH][imgW][C1] inArr, 
				  int32_al[N][H][W][C] outArr);

extern void ElemWiseSecretSharedVectorMult(int32_pl s1, int32_al[s1] arr1, int32_al[s1] arr2, int32_al[s1] outArr);
extern void ElemWiseActModelVectorMult(int32_pl s1, int32_al[s1] arr1, int32_al[s1] arr2, int32_al[s1] outArr);
extern void ElemWiseVectorPublicDiv(int32_pl s1, int32_al[s1] arr1, int32_pl divisor, int32_al[s1] outArr);

extern void ScaleUp(int32_pl s1, int32_al[s1] arr, int32_pl sf);
extern void ScaleDown(int32_pl s1, int32_al[s1] arr, int32_pl sf);

extern void Conv2DWrapper(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, 
				   int32_al[N][H][W][CI] inputArr, 
				   int32_al[FH][FW][CI][CO] filterArr, 
				   int32_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void Conv3DWrapper(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int32_al[N][D][H][W][CI] inputArr, 
				   int32_al[FD][FH][FW][CI][CO] filterArr,
				   int32_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void Conv2DGroupWrapper(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G,
				   int32_al[N][H][W][CI] inputArr, 
				   int32_al[FH][FW][CI/G][CO] filterArr, 
				   int32_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

extern void ConvTranspose2DWrapper(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl H, int32_pl W,
				   int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int32_al[N][HPrime][WPrime][CI] inputArr, 
				   int32_al[FH][FW][CO][CI] filterArr, 
				   int32_al[N][H][W][CO] outArr);

extern void ConvTranspose3DWrapper(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int32_al[FD][FH][FW][CO][CI] filterArr, 
				   int32_al[N][D][H][W][CO] outArr);

extern void TanH(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, int32_al[size] A, int32_al[size] B);
extern void Sigmoid(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, int32_al[size] A, int32_al[size] B);
extern void Sqrt(int32_pl one, int32_pl size, int32_pl scaleIn, int32_pl scaleOut, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_al[size] A, int32_al[size] B);

(**************************)
(*  FSS Standard Library  *)
(**************************)

extern void ScaleUp1(int32_pl s1, int32_al[s1] arr, int32_pl sf);

extern void ScaleUp2(int32_pl s1, int32_pl s2, int32_al[s1][s2] arr, int32_pl sf);

extern void ScaleUp3(int32_pl s1, int32_pl s2, int32_pl s3, int32_al[s1][s2][s3] arr, int32_pl sf);

extern void ScaleUp4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] arr, int32_pl sf);

extern void ScaleUp5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] arr, int32_pl sf);

extern void ScaleDown1(int32_pl s1, int32_al[s1] arr, int32_pl sf);

extern void ScaleDown2(int32_pl s1, int32_pl s2, int32_al[s1][s2] arr, int32_pl sf);

extern void ScaleDown3(int32_pl s1, int32_pl s2, int32_pl s3, int32_al[s1][s2][s3] arr, int32_pl sf);

extern void ScaleDown4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] arr, int32_pl sf);

extern void ScaleDown5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] arr, int32_pl sf);

extern void StartComputation();

extern void EndComputation();

extern void MatAddBroadCast2(int32_pl a1, int32_pl a2, int32_pl b1, int32_pl s1, int32_pl s2, int32_al[s1][s2] A, int32_al[s2] B, int32_al[s1][s2] outArr);

extern void MatAdd2(int32_pl a1, int32_pl a2, int32_pl b1, int32_pl b2, int32_pl s1, int32_pl s2, int32_al[a1][a2] A, int32_al[b1][b2] B, int32_al[s1][s2] outArr);

extern void MatAddBroadCast4(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl b1, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] A, int32_al[s4] B, int32_al[s1][s2][s3][s4] outArr);

extern void MatAddBroadCast5(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl a5, int32_pl b1, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] A, int32_al[s5] B, int32_al[s1][s2][s3][s4][s5] outArr);

extern void MatAdd4(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl b1, int32_pl b2, int32_pl b3, int32_pl b4, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[a1][a2][a3][a4] A, int32_al[b1][b2][b3][b4] B, int32_al[s1][s2][s3][s4] outArr);

extern void MatAdd5(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl a5, int32_pl b1, int32_pl b2, int32_pl b3, int32_pl b4, int32_pl b5, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[a1][a2][a3][a4][a5] A, int32_al[b1][b2][b3][b4][b5] B, int32_al[s1][s2][s3][s4][s5] outArr);

(**************************)
extern void CreateTensor1(int32_pl s1, int64_pl val, int64_pl[s1] arr);

extern void CreateTensor2(int32_pl s1, int32_pl s2, int64_pl val, int64_pl[s1][s2] arr);

extern void CreateTensor3(int32_pl s1, int32_pl s2, int32_pl s3, int64_pl val, int64_pl[s1][s2][s3] arr);

extern void CreateTensor4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_pl val, int64_pl[s1][s2][s3][s4] arr);

extern void CreateTensor5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_pl val, int64_pl[s1][s2][s3][s4][s5] arr);

(**************************)
extern void CopyTensor1(int32_pl s1, int32_al[s1] targetArr, int32_al[s1] fromArr, int32_al[s1] ignore);

extern void CopyTensor2(int32_pl s1, int32_pl s2, int32_al[s1][s2] targetArr, int32_al[s1][s2] fromArr, int32_al[s1][s2] ignore);

extern void CopyTensor3(int32_pl s1, int32_pl s2, int32_pl s3, int32_al[s1][s2][s3] targetArr, int32_al[s1][s2][s3] fromArr, int32_al[s1][s2][s3] ignore);

extern void CopyTensor4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] targetArr, int32_al[s1][s2][s3][s4] fromArr, int32_al[s1][s2][s3][s4] ignore);

(**************************)
extern void CreateIdentity11(int32_pl s1, int32_al[s1] fromArr, int32_al[s1] newArr);

extern void CreateIdentity22(int32_pl s1, int32_pl s2, int32_al[s1][s2] fromArr, int32_al[s1][s2] newArr);

extern void CreateIdentity33(int32_pl s1, int32_pl s2, int32_pl s3, int32_al[s1][s2][s3] fromArr, int32_al[s1][s2][s3] newArr);

extern void CreateIdentity44(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] fromArr, int32_al[s1][s2][s3][s4] newArr);

(**************************)
extern void CreateCopy2211(int32_pl s1, int32_pl s2, int32_pl inps1, int32_pl inps2, int32_al[inps1][inps2] inArr, int32_pl perDimSize, int32_pl[perDimSize] beginIdx, int32_pl[perDimSize] sizeIdx, int32_al[s1][s2] outArr);

extern void CreateCopy5511(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_pl inps5, int32_al[inps1][inps2][inps3][inps4][inps5] inArr, int32_pl perDimSize, int32_pl[perDimSize] beginIdx, int32_pl[perDimSize] sizeIdx, int32_al[s1][s2][s3][s4][s5] outArr);

(**************************)

extern void Concat1T44(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat2T222(int32_pl s1, int32_pl s2, int32_pl inp1s1, int32_pl inp1s2, int32_al[inp1s1][inp1s2] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_al[inp2s1][inp2s2] inp2, int32_pl axis, int32_al[s1][s2] outp);

extern void Concat2T444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat3T4444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat4T44444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat5T444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat6T4444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat7T44444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat8T444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat9T4444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat10T44444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat11T444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat12T4444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat13T44444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat14T444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat15T4444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat16T44444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat17T444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat18T4444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int32_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat19T44444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int32_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int32_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat20T444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int32_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int32_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int32_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat21T4444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int32_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int32_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int32_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int32_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat22T44444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int32_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int32_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int32_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int32_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int32_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat23T444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int32_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int32_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int32_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int32_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int32_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int32_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat24T4444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int32_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int32_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int32_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int32_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int32_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int32_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl inp24s1, int32_pl inp24s2, int32_pl inp24s3, int32_pl inp24s4, int32_al[inp24s1][inp24s2][inp24s3][inp24s4] inp24, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

extern void Concat25T44444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int32_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int32_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int32_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int32_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int32_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int32_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int32_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int32_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int32_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int32_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int32_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int32_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int32_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int32_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int32_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int32_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int32_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int32_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int32_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int32_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int32_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int32_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int32_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl inp24s1, int32_pl inp24s2, int32_pl inp24s3, int32_pl inp24s4, int32_al[inp24s1][inp24s2][inp24s3][inp24s4] inp24, int32_pl inp25s1, int32_pl inp25s2, int32_pl inp25s3, int32_pl inp25s4, int32_al[inp25s1][inp25s2][inp25s3][inp25s4] inp25, int32_pl axis, int32_al[s1][s2][s3][s4] outp);

(**************************)
extern void Split44(int32_pl O1, int32_pl O2, int32_pl O3, int32_pl O4, int32_pl I1, int32_pl I2, int32_pl I3, int32_pl I4, int32_al[I1][I2][I3][I4] inp, int32_pl axis, int32_pl curCount, int32_pl total, int32_al[O1][O2][O3][O4] out);

(**************************)
(* Generic implementation of Conv2D *)

extern void Conv2DReshapeFilter(int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int32_al[FH][FW][CI][CO] inputArr, int32_al[CO][FH*FW*CI] outputArr);

extern void Conv2DReshapeMatMulOP(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int32_al[CO][N*finalH*finalW] inputArr, int32_al[N][finalH][finalW][CO] outputArr);

extern void Conv2DReshapeInput(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int32_al[N][H][W][CI] inputArr, int32_al[RRows][RCols] outputArr);

extern void Conv2D(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, 
				   int32_al[N][H][W][CI] inputArr, 
				   int32_al[FH][FW][CI][CO] filterArr, 
				   int32_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Loop-based implementation of Conv2D *)
(* These loop implementations of convolution run faster with multithreading *)

extern void Conv2DLoopInner(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int32_pl outH, int32_pl outW, int32_pl G,
				   int32_al[N][H][W][CI] inputArr, 
				   int32_al[FH][FW][CI/G][CO] filterArr,
				   int32_al[N][outH][outW][CO] outArr);

(* int32_al[N][H][W][CI] inputArr, 
   int32_al[FH][FW][CI][CO] filterArr, 
   int32_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
extern void Conv2DLoop(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G, 
				   int32_al[N][H][W][CI] inputArr, 
				   int32_al[FH][FW][CI][CO] filterArr, 
				   int32_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Generic implementation of Conv2D with Groups *)

extern void Conv2DReshapeFilterGroup(int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int32_pl g, int32_pl G, int32_al[FH][FW][CI/G][CO] inputArr, int32_al[CO/G][FH*FW*(CI/G)] outputArr);


extern void Conv2DReshapeMatMulOPGroup(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int32_pl g, int32_pl G, int32_al[CO/G][N*finalH*finalW] inputArr, int32_al[N][finalH][finalW][CO] outputArr);

extern void Conv2DReshapeInputGroup(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideH, int32_pl strideW, int32_pl g, int32_pl G, int32_pl RRows, int32_pl RCols, int32_al[N][H][W][CI] inputArr, int32_al[RRows][RCols] outputArr);

(* int32_al[N][H][W][CI] inputArr, 
   int32_al[FH][FW][CI][CO] filterArr, 
   int32_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
extern void Conv2DGroup(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G,
				   int32_al[N][H][W][CI] inputArr, 
				   int32_al[FH][FW][CI/G][CO] filterArr, 
				   int32_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Generic implementation of Conv3D *)

extern void Conv3DReshapeFilter(int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int32_al[FD][FH][FW][CI][CO] inputArr, int32_al[CO][FD*FH*FW*CI] outputArr);

extern void Conv3DReshapeMatMulOP(int32_pl N, int32_pl finalD, int32_pl finalH, int32_pl finalW, int32_pl CO, int32_al[CO][N*finalD*finalH*finalW] inputArr, int32_al[N][finalD][finalH][finalW][CO] outputArr);

extern void Conv3DReshapeInput(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, int32_pl FD, int32_pl FH, int32_pl FW, int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideD, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int32_al[N][D][H][W][CI] inputArr, int32_al[RRows][RCols] outputArr);

(* int32_al[N][D][H][W][CI] inputArr, 
   int32_al[FD][FH][FW][CI][CO] filterArr, 
   int32_al[N][((D-FD+zPadDLeft+zPadDRight)/strideD)+1][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
extern void Conv3D(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int32_al[N][D][H][W][CI] inputArr, 
				   int32_al[FD][FH][FW][CI][CO] filterArr,
				   int32_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Loop-based implementation of Conv3D *)
(* Loop implementation of convolution run faster with multithreading *)

extern void Conv3DLoopInner(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight,int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_pl outD, int32_pl outH, int32_pl outW, 
				   int32_al[N][D][H][W][CI] inputArr, 
				   int32_al[FD][FH][FW][CI][CO] filterArr, 
				   int32_al[N][outD][outH][outW][CO] outArr);

(* int32_al[N][D][H][W][CI] inputArr, 
   int32_al[FD][FH][FW][CI][CO] filterArr, 
   int32_al[N][((D-FD+zPadDLeft+zPadDRight)/strideD)+1][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
extern void Conv3DLoop(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int32_al[N][D][H][W][CI] inputArr, 
				   int32_al[FD][FH][FW][CI][CO] filterArr, 
				   int32_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr);

(**************************)
(* Generic implementation of ConvTranpose2D *)

extern void ConvTranspose2DReshapeMatMulOP(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int32_al[CO][N*finalH*finalW] inputArr, int32_al[N][finalH][finalW][CO] outputArr);


extern void ConvTranspose2DReshapeFilter(int32_pl FH, int32_pl FW, int32_pl CO, int32_pl CI, int32_al[FH][FW][CO][CI] inputArr, int32_al[CO][FH*FW*CI] outputArr);

extern void ConvTranspose2DReshapeInput(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int32_al[N][HPrime][WPrime][CI] inputArr, int32_al[RRows][RCols] outputArr);

(* int32_al[N][HPrime][WPrime][CI] inputArr,
   int32_al[FH][FW][CO][CI] filter,
   int32_al[N][H][W][CO] outputArr
*)
extern void ConvTranspose2D(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl H, int32_pl W,
				   int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int32_al[N][HPrime][WPrime][CI] inputArr, 
				   int32_al[FH][FW][CO][CI] filterArr, 
				   int32_al[N][H][W][CO] outArr);

(**************************)
(* Generic implementation of ConvTranpose3D *)

extern void ConvTranspose3DReshapeFilter(int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, int32_pl CI, int32_al[FD][FH][FW][CO][CI] inputArr, int32_al[CO][FD*FH*FW*CI] outputArr);

extern void ConvTranspose3DReshapeInput(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, int32_pl FD, int32_pl FH, int32_pl FW, int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, int32_pl strideD, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int32_al[N][DPrime][HPrime][WPrime][CI] inputArr, int32_al[RRows][RCols] outputArr);

(* int32_al[N][DPrime][HPrime][WPrime][CI] inputArr,
   int32_al[FD][FH][FW][CO][CI] filter,
   int32_al[N][D][H][W][CO] outputArr
*)
extern void ConvTranspose3D(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int32_al[FD][FH][FW][CO][CI] filterArr, 
				   int32_al[N][D][H][W][CO] outArr);

(**************************)
(* Loop-based implementation of ConvTranspose3D *)

extern void ConvTranspose3DLoopInner(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight,int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_pl outD, int32_pl outH, int32_pl outW, 
				   int32_al[N][D][H][W][CI] inputArr, 
				   int32_al[FD][FH][FW][CO][CI] filterArr, 
				   int32_al[N][outD][outH][outW][CO] outArr);


(* int32_al[N][DPrime][HPrime][WPrime][CI] inputArr,
   int32_al[FD][FH][FW][CO][CI] filter,
   int32_al[N][D][H][W][CO] outputArr
*)
extern void ConvTranspose3DLoop(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int32_al[FD][FH][FW][CO][CI] filterArr, 
				   int32_al[N][D][H][W][CO] outArr);

(**************************)
extern void Transpose2(int32_pl s1, int32_pl s2, int32_al[s2][s1] inArr, int32_al[s1][s2] outArr);

(**************************)
extern void Pad442(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_al[inps1][inps2][inps3][inps4] inpArr, int32_pl pads1, int32_pl pads2, int32_pl[pads1][pads2] paddings, int32_al[s1][s2][s3][s4] outArr);

extern void Pad552(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_pl inps5, int32_al[inps1][inps2][inps3][inps4][inps5] inpArr, int32_pl pads1, int32_pl pads2, int32_pl[pads1][pads2] paddings, int32_al[s1][s2][s3][s4][s5] outArr);

extern void PadONNX441(int32_pl o1, int32_pl o2, int32_pl o3, int32_pl o4, int32_pl i1, int32_pl i2, int32_pl i3, int32_pl i4, int32_al[i1][i2][i3][i4] inpArr, int32_pl pads, int32_pl[pads] paddings, int32_al[o1][o2][o3][o4] outArr);

(**************************)
(* Squeeze where the input is a 4D tensor, output is a 2D tensor and hence 2 dims are getting squeezed. *)
(* Ignoring dimensions in squeeze *)

extern void Squeeze24(int32_pl s1, int32_pl s2, int32_pl dim1, int32_pl dim2, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4, int32_al[ins1][ins2][ins3][ins4] inArr, int32_al[s1][s2] outArr);

extern void Squeeze34(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl dim, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4, int32_al[ins1][ins2][ins3][ins4] inArr, int32_al[s1][s2][s3] outArr);

extern void Squeeze23(int32_pl s1, int32_pl s2, int32_pl dim, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_al[ins1][ins2][ins3] inArr, int32_al[s1][s2] outArr);

(**************************)
extern void FusedBatchNorm4411(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] inArr, int32_al[s4] multArr, int32_al[s4] biasArr, int32_pl multExprScaleDownSf, int32_pl biasExprScaleUpSf, int32_al[s1][s2][s3][s4] outputArr);

extern void FusedBatchNorm5511(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] inArr, int32_al[s5] multArr, int32_al[s5] biasArr, int32_pl multExprScaleDownSf, int32_pl biasExprScaleUpSf, int32_al[s1][s2][s3][s4][s5] outputArr);
(**************************)
extern void ElemWiseMul2(int32_pl s1, int32_pl s2, int32_al[s1][s2] arr1, int32_al[s1][s2] arr2, int32_al[s1][s2] outArr);
extern void ElemWiseMul4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] arr1, int32_al[s1][s2][s3][s4] arr2, int32_al[s1][s2][s3][s4] outArr);
extern void ElemWiseMul5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] arr1, int32_al[s1][s2][s3][s4][s5] arr2, int32_al[s1][s2][s3][s4][s5] outArr);

(**************************)
extern void ReduceMean24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int32_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl[2] axes,
					  int32_al[outS1][outS2] outputArr
					  );

extern void ReduceMeanONNX24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int32_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl axis1, int32_pl axis2,
					  int32_al[outS1][outS2] outputArr
					  );

(**************************)
extern void ArgMax1(int32_pl outArrS1, int32_pl inArrS1, int32_pl inArrS2, int32_al[inArrS1][inArrS2] inArr, int32_pl dim, int32_al[outArrS1] outArr);

extern void ArgMax3(int32_pl outs1, int32_pl outs2, int32_pl outs3, 
			   int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4,
			   int32_al[ins1][ins2][ins3][ins4] inArr, int32_pl dim, int32_al[outs1][outs2][outs3] outArr);
(**************************)
extern void Relu1(int32_pl s1, int32_al[s1] inArr, int32_al[s1] outArr, int32_pl sf, bool_pl doTruncation);
extern void Relu2(int32_pl s1, int32_pl s2, int32_al[s1][s2] inArr, int32_al[s1][s2] outArr, int32_pl sf, bool_pl doTruncation);

extern void Relu4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_al[s1][s2][s3][s4] inArr, int32_al[s1][s2][s3][s4] outArr, int32_pl sf, bool_pl doTruncation);

extern void Relu5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_al[s1][s2][s3][s4][s5] inArr, int32_al[s1][s2][s3][s4][s5] outArr, int32_pl sf, bool_pl doTruncation);

(**************************)
extern void Floor2(int32_pl s1, int32_pl s2, int32_al[s1][s2] inArr, int32_al[s1][s2] outArr, int32_pl sf);


def void main(){

	(* {'TFOpName': 'Input', 'TFNodeName': 'input'} *)
	input(CLIENT, tmp0, int32_al[1][3][224][224]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'fc.weight'} *)
	input(SERVER, tmp1, int32_al[1000][512]);

	(* {'TFOpName': 'Input', 'TFNodeName': 'fc.bias'} *)
	input(SERVER, tmp2, int32_al[1000]);

	(* {'TFOpName': 'Input', 'TFNodeName': '193'} *)
	input(SERVER, tmp3, int32_al[64][3][7][7]);

	(* {'TFOpName': 'Input', 'TFNodeName': '194'} *)
	input(SERVER, tmp4, int32_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': '196'} *)
	input(SERVER, tmp5, int32_al[64][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '197'} *)
	input(SERVER, tmp6, int32_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': '199'} *)
	input(SERVER, tmp7, int32_al[64][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '200'} *)
	input(SERVER, tmp8, int32_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': '202'} *)
	input(SERVER, tmp9, int32_al[64][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '203'} *)
	input(SERVER, tmp10, int32_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': '205'} *)
	input(SERVER, tmp11, int32_al[64][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '206'} *)
	input(SERVER, tmp12, int32_al[64]);

	(* {'TFOpName': 'Input', 'TFNodeName': '208'} *)
	input(SERVER, tmp13, int32_al[128][64][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '209'} *)
	input(SERVER, tmp14, int32_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': '211'} *)
	input(SERVER, tmp15, int32_al[128][128][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '212'} *)
	input(SERVER, tmp16, int32_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': '214'} *)
	input(SERVER, tmp17, int32_al[128][64][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': '215'} *)
	input(SERVER, tmp18, int32_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': '217'} *)
	input(SERVER, tmp19, int32_al[128][128][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '218'} *)
	input(SERVER, tmp20, int32_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': '220'} *)
	input(SERVER, tmp21, int32_al[128][128][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '221'} *)
	input(SERVER, tmp22, int32_al[128]);

	(* {'TFOpName': 'Input', 'TFNodeName': '223'} *)
	input(SERVER, tmp23, int32_al[256][128][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '224'} *)
	input(SERVER, tmp24, int32_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': '226'} *)
	input(SERVER, tmp25, int32_al[256][256][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '227'} *)
	input(SERVER, tmp26, int32_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': '229'} *)
	input(SERVER, tmp27, int32_al[256][128][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': '230'} *)
	input(SERVER, tmp28, int32_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': '232'} *)
	input(SERVER, tmp29, int32_al[256][256][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '233'} *)
	input(SERVER, tmp30, int32_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': '235'} *)
	input(SERVER, tmp31, int32_al[256][256][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '236'} *)
	input(SERVER, tmp32, int32_al[256]);

	(* {'TFOpName': 'Input', 'TFNodeName': '238'} *)
	input(SERVER, tmp33, int32_al[512][256][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '239'} *)
	input(SERVER, tmp34, int32_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': '241'} *)
	input(SERVER, tmp35, int32_al[512][512][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '242'} *)
	input(SERVER, tmp36, int32_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': '244'} *)
	input(SERVER, tmp37, int32_al[512][256][1][1]);

	(* {'TFOpName': 'Input', 'TFNodeName': '245'} *)
	input(SERVER, tmp38, int32_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': '247'} *)
	input(SERVER, tmp39, int32_al[512][512][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '248'} *)
	input(SERVER, tmp40, int32_al[512]);

	(* {'TFOpName': 'Input', 'TFNodeName': '250'} *)
	input(SERVER, tmp41, int32_al[512][512][3][3]);

	(* {'TFOpName': 'Input', 'TFNodeName': '251'} *)
	input(SERVER, tmp42, int32_al[512]);

	StartComputation();

	int32_al[1][224][224][3] tmp43;

	int32_pl i7;

	int32_pl i6;

	int32_pl i5;

	int32_pl i4;

	int32_pl i3;

	int32_pl i2;

	int32_pl i1;

	int32_pl i0;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(input, 1, 224, 224, 3) *)
	i0 = 0;
	i1 = 0;
	i2 = 0;
	i3 = 0;
	for i4 = [0: 1]{
 		for i7 = [0: 3]{
 			for i5 = [0: 224]{
 				for i6 = [0: 224]{
 					tmp43[i4][i5][i6][i7] = tmp0[i0][i1][i2][i3];
					i3 = (i3 + 1);
					if ((i3 == 224)) {
						i3 = 0;
						i2 = (i2 + 1);
						if ((i2 == 224)) {
							i2 = 0;
							i1 = (i1 + 1);
							if ((i1 == 3)) {
								i1 = 0;
								i0 = (i0 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 3, 224, 224, tmp0);

	int32_al[7][7][3][64] tmp45;

	int32_pl i15;

	int32_pl i14;

	int32_pl i13;

	int32_pl i12;

	int32_pl i11;

	int32_pl i10;

	int32_pl i9;

	int32_pl i8;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(193, 7, 7, 3, 64) *)
	i8 = 0;
	i9 = 0;
	i10 = 0;
	i11 = 0;
	for i15 = [0: 64]{
 		for i14 = [0: 3]{
 			for i12 = [0: 7]{
 				for i13 = [0: 7]{
 					tmp45[i12][i13][i14][i15] = tmp3[i8][i9][i10][i11];
					i11 = (i11 + 1);
					if ((i11 == 7)) {
						i11 = 0;
						i10 = (i10 + 1);
						if ((i10 == 7)) {
							i10 = 0;
							i9 = (i9 + 1);
							if ((i9 == 3)) {
								i9 = 0;
								i8 = (i8 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 3, 7, 7, tmp3);

	int32_al[1][112][112][64] tmp47;

	(* J0 # J1, convDim = 2 *)
	Conv2DGroupWrapper(1, 224, 224, 3, 7, 7, 64, 3, 3, 3, 3, 2, 2, 1, tmp43, tmp45, tmp47);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(7, 7, 3, 64, tmp45);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 224, 224, 3, tmp43);

	int32_al[1][1][1][64] tmp50;

	int32_pl i20;

	int32_pl i19;

	int32_pl i18;

	int32_pl i17;

	int32_pl i16;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(194, 1, 1, 1, 64) *)
	i16 = 0;
	for i17 = [0: 1]{
 		for i18 = [0: 1]{
 			for i19 = [0: 1]{
 				for i20 = [0: 64]{
 					tmp50[i17][i18][i19][i20] = tmp4[i16];
					i16 = (i16 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp4);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp50, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J2 + J3 *)
	int32_al[1][112][112][64] tmp52;

	for i0 = [0: 1]{
 		for i1 = [0: 112]{
 			for i2 = [0: 112]{
 				for i3 = [0: 64]{
 					tmp52[i0][i1][i2][i3] = (tmp47[i0][i1][i2][i3] + tmp50[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp50);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 112, 112, 64, tmp47);

	int32_al[1][64][112][112] tmp55;

	int32_pl i28;

	int32_pl i27;

	int32_pl i26;

	int32_pl i25;

	int32_pl i24;

	int32_pl i23;

	int32_pl i22;

	int32_pl i21;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J4, 1, 64, 112, 112) *)
	i21 = 0;
	i22 = 0;
	i23 = 0;
	i24 = 0;
	for i25 = [0: 1]{
 		for i27 = [0: 112]{
 			for i28 = [0: 112]{
 				for i26 = [0: 64]{
 					tmp55[i25][i26][i27][i28] = tmp52[i21][i22][i23][i24];
					i24 = (i24 + 1);
					if ((i24 == 64)) {
						i24 = 0;
						i23 = (i23 + 1);
						if ((i23 == 112)) {
							i23 = 0;
							i22 = (i22 + 1);
							if ((i22 == 112)) {
								i22 = 0;
								i21 = (i21 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 112, 112, 64, tmp52);

	int32_al[1][112][112][64] tmp57;

	int32_pl i36;

	int32_pl i35;

	int32_pl i34;

	int32_pl i33;

	int32_pl i32;

	int32_pl i31;

	int32_pl i30;

	int32_pl i29;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J5, 1, 112, 112, 64) *)
	i29 = 0;
	i30 = 0;
	i31 = 0;
	i32 = 0;
	for i33 = [0: 1]{
 		for i36 = [0: 64]{
 			for i34 = [0: 112]{
 				for i35 = [0: 112]{
 					tmp57[i33][i34][i35][i36] = tmp55[i29][i30][i31][i32];
					i32 = (i32 + 1);
					if ((i32 == 112)) {
						i32 = 0;
						i31 = (i31 + 1);
						if ((i31 == 112)) {
							i31 = 0;
							i30 = (i30 + 1);
							if ((i30 == 64)) {
								i30 = 0;
								i29 = (i29 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 112, 112, tmp55);

	(* KANAV: Deleted some reshape code here for MaxPool Relu optimization *)

	int32_al[1][56][56][64] tmp59;
	int32_al[1][56][56][64] tmp65;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	MaxPool(1, 56, 56, 64, 3, 3, 1, 1, 1, 1, 2, 2, 1, 112, 112, 64, tmp57, tmp59);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 112, 112, 64, tmp57);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 56, 56, 64, tmp59, tmp65, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp59);

	int32_al[1][64][56][56] tmp67;

	int32_pl i60;

	int32_pl i59;

	int32_pl i58;

	int32_pl i57;

	int32_pl i56;

	int32_pl i55;

	int32_pl i54;

	int32_pl i53;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J10, 1, 64, 56, 56) *)
	i53 = 0;
	i54 = 0;
	i55 = 0;
	i56 = 0;
	for i57 = [0: 1]{
 		for i59 = [0: 56]{
 			for i60 = [0: 56]{
 				for i58 = [0: 64]{
 					tmp67[i57][i58][i59][i60] = tmp65[i53][i54][i55][i56];
					i56 = (i56 + 1);
					if ((i56 == 64)) {
						i56 = 0;
						i55 = (i55 + 1);
						if ((i55 == 56)) {
							i55 = 0;
							i54 = (i54 + 1);
							if ((i54 == 56)) {
								i54 = 0;
								i53 = (i53 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp65);

	int32_al[1][56][56][64] tmp69;

	int32_pl i68;

	int32_pl i67;

	int32_pl i66;

	int32_pl i65;

	int32_pl i64;

	int32_pl i63;

	int32_pl i62;

	int32_pl i61;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J11, 1, 56, 56, 64) *)
	i61 = 0;
	i62 = 0;
	i63 = 0;
	i64 = 0;
	for i65 = [0: 1]{
 		for i68 = [0: 64]{
 			for i66 = [0: 56]{
 				for i67 = [0: 56]{
 					tmp69[i65][i66][i67][i68] = tmp67[i61][i62][i63][i64];
					i64 = (i64 + 1);
					if ((i64 == 56)) {
						i64 = 0;
						i63 = (i63 + 1);
						if ((i63 == 56)) {
							i63 = 0;
							i62 = (i62 + 1);
							if ((i62 == 64)) {
								i62 = 0;
								i61 = (i61 + 1);
							}
						}
					}
				};
			};
		};
	};
	int32_al[3][3][64][64] tmp70;

	int32_pl i76;

	int32_pl i75;

	int32_pl i74;

	int32_pl i73;

	int32_pl i72;

	int32_pl i71;

	int32_pl i70;

	int32_pl i69;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(196, 3, 3, 64, 64) *)
	i69 = 0;
	i70 = 0;
	i71 = 0;
	i72 = 0;
	for i76 = [0: 64]{
 		for i75 = [0: 64]{
 			for i73 = [0: 3]{
 				for i74 = [0: 3]{
 					tmp70[i73][i74][i75][i76] = tmp5[i69][i70][i71][i72];
					i72 = (i72 + 1);
					if ((i72 == 3)) {
						i72 = 0;
						i71 = (i71 + 1);
						if ((i71 == 3)) {
							i71 = 0;
							i70 = (i70 + 1);
							if ((i70 == 64)) {
								i70 = 0;
								i69 = (i69 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 3, 3, tmp5);

	int32_al[1][56][56][64] tmp72;

	(* J12 # J13, convDim = 2 *)
	Conv2DGroupWrapper(1, 56, 56, 64, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp69, tmp70, tmp72);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp69);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 64, tmp70);

	int32_al[1][1][1][64] tmp75;

	int32_pl i81;

	int32_pl i80;

	int32_pl i79;

	int32_pl i78;

	int32_pl i77;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(197, 1, 1, 1, 64) *)
	i77 = 0;
	for i78 = [0: 1]{
 		for i79 = [0: 1]{
 			for i80 = [0: 1]{
 				for i81 = [0: 64]{
 					tmp75[i78][i79][i80][i81] = tmp6[i77];
					i77 = (i77 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp6);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp75, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J14 + J15 *)
	int32_al[1][56][56][64] tmp77;

	for i0 = [0: 1]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 64]{
 					tmp77[i0][i1][i2][i3] = (tmp72[i0][i1][i2][i3] + tmp75[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp72);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp75);

	int32_al[1][64][56][56] tmp80;

	int32_pl i89;

	int32_pl i88;

	int32_pl i87;

	int32_pl i86;

	int32_pl i85;

	int32_pl i84;

	int32_pl i83;

	int32_pl i82;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J16, 1, 64, 56, 56) *)
	i82 = 0;
	i83 = 0;
	i84 = 0;
	i85 = 0;
	for i86 = [0: 1]{
 		for i88 = [0: 56]{
 			for i89 = [0: 56]{
 				for i87 = [0: 64]{
 					tmp80[i86][i87][i88][i89] = tmp77[i82][i83][i84][i85];
					i85 = (i85 + 1);
					if ((i85 == 64)) {
						i85 = 0;
						i84 = (i84 + 1);
						if ((i84 == 56)) {
							i84 = 0;
							i83 = (i83 + 1);
							if ((i83 == 56)) {
								i83 = 0;
								i82 = (i82 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp77);

	int32_al[1][56][56][64] tmp82;

	int32_pl i97;

	int32_pl i96;

	int32_pl i95;

	int32_pl i94;

	int32_pl i93;

	int32_pl i92;

	int32_pl i91;

	int32_pl i90;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J17, 1, 56, 56, 64) *)
	i90 = 0;
	i91 = 0;
	i92 = 0;
	i93 = 0;
	for i94 = [0: 1]{
 		for i97 = [0: 64]{
 			for i95 = [0: 56]{
 				for i96 = [0: 56]{
 					tmp82[i94][i95][i96][i97] = tmp80[i90][i91][i92][i93];
					i93 = (i93 + 1);
					if ((i93 == 56)) {
						i93 = 0;
						i92 = (i92 + 1);
						if ((i92 == 56)) {
							i92 = 0;
							i91 = (i91 + 1);
							if ((i91 == 64)) {
								i91 = 0;
								i90 = (i90 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp80);

	int32_al[1][56][56][64] tmp84;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 56, 56, 64, tmp82, tmp84, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp82);

	int32_al[1][64][56][56] tmp86;

	int32_pl i105;

	int32_pl i104;

	int32_pl i103;

	int32_pl i102;

	int32_pl i101;

	int32_pl i100;

	int32_pl i99;

	int32_pl i98;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J19, 1, 64, 56, 56) *)
	i98 = 0;
	i99 = 0;
	i100 = 0;
	i101 = 0;
	for i102 = [0: 1]{
 		for i104 = [0: 56]{
 			for i105 = [0: 56]{
 				for i103 = [0: 64]{
 					tmp86[i102][i103][i104][i105] = tmp84[i98][i99][i100][i101];
					i101 = (i101 + 1);
					if ((i101 == 64)) {
						i101 = 0;
						i100 = (i100 + 1);
						if ((i100 == 56)) {
							i100 = 0;
							i99 = (i99 + 1);
							if ((i99 == 56)) {
								i99 = 0;
								i98 = (i98 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp84);

	int32_al[1][56][56][64] tmp88;

	int32_pl i113;

	int32_pl i112;

	int32_pl i111;

	int32_pl i110;

	int32_pl i109;

	int32_pl i108;

	int32_pl i107;

	int32_pl i106;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J20, 1, 56, 56, 64) *)
	i106 = 0;
	i107 = 0;
	i108 = 0;
	i109 = 0;
	for i110 = [0: 1]{
 		for i113 = [0: 64]{
 			for i111 = [0: 56]{
 				for i112 = [0: 56]{
 					tmp88[i110][i111][i112][i113] = tmp86[i106][i107][i108][i109];
					i109 = (i109 + 1);
					if ((i109 == 56)) {
						i109 = 0;
						i108 = (i108 + 1);
						if ((i108 == 56)) {
							i108 = 0;
							i107 = (i107 + 1);
							if ((i107 == 64)) {
								i107 = 0;
								i106 = (i106 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp86);

	int32_al[3][3][64][64] tmp90;

	int32_pl i121;

	int32_pl i120;

	int32_pl i119;

	int32_pl i118;

	int32_pl i117;

	int32_pl i116;

	int32_pl i115;

	int32_pl i114;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(199, 3, 3, 64, 64) *)
	i114 = 0;
	i115 = 0;
	i116 = 0;
	i117 = 0;
	for i121 = [0: 64]{
 		for i120 = [0: 64]{
 			for i118 = [0: 3]{
 				for i119 = [0: 3]{
 					tmp90[i118][i119][i120][i121] = tmp7[i114][i115][i116][i117];
					i117 = (i117 + 1);
					if ((i117 == 3)) {
						i117 = 0;
						i116 = (i116 + 1);
						if ((i116 == 3)) {
							i116 = 0;
							i115 = (i115 + 1);
							if ((i115 == 64)) {
								i115 = 0;
								i114 = (i114 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 3, 3, tmp7);

	int32_al[1][56][56][64] tmp92;

	(* J21 # J22, convDim = 2 *)
	Conv2DGroupWrapper(1, 56, 56, 64, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp88, tmp90, tmp92);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp88);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 64, tmp90);

	int32_al[1][1][1][64] tmp95;

	int32_pl i126;

	int32_pl i125;

	int32_pl i124;

	int32_pl i123;

	int32_pl i122;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(200, 1, 1, 1, 64) *)
	i122 = 0;
	for i123 = [0: 1]{
 		for i124 = [0: 1]{
 			for i125 = [0: 1]{
 				for i126 = [0: 64]{
 					tmp95[i123][i124][i125][i126] = tmp8[i122];
					i122 = (i122 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp8);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp95, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J23 + J24 *)
	int32_al[1][56][56][64] tmp97;

	for i0 = [0: 1]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 64]{
 					tmp97[i0][i1][i2][i3] = (tmp92[i0][i1][i2][i3] + tmp95[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp92);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp95);

	int32_al[1][64][56][56] tmp100;

	int32_pl i134;

	int32_pl i133;

	int32_pl i132;

	int32_pl i131;

	int32_pl i130;

	int32_pl i129;

	int32_pl i128;

	int32_pl i127;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J25, 1, 64, 56, 56) *)
	i127 = 0;
	i128 = 0;
	i129 = 0;
	i130 = 0;
	for i131 = [0: 1]{
 		for i133 = [0: 56]{
 			for i134 = [0: 56]{
 				for i132 = [0: 64]{
 					tmp100[i131][i132][i133][i134] = tmp97[i127][i128][i129][i130];
					i130 = (i130 + 1);
					if ((i130 == 64)) {
						i130 = 0;
						i129 = (i129 + 1);
						if ((i129 == 56)) {
							i129 = 0;
							i128 = (i128 + 1);
							if ((i128 == 56)) {
								i128 = 0;
								i127 = (i127 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp97);

	int32_al[1][56][56][64] tmp102;

	int32_pl i142;

	int32_pl i141;

	int32_pl i140;

	int32_pl i139;

	int32_pl i138;

	int32_pl i137;

	int32_pl i136;

	int32_pl i135;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J26, 1, 56, 56, 64) *)
	i135 = 0;
	i136 = 0;
	i137 = 0;
	i138 = 0;
	for i139 = [0: 1]{
 		for i142 = [0: 64]{
 			for i140 = [0: 56]{
 				for i141 = [0: 56]{
 					tmp102[i139][i140][i141][i142] = tmp100[i135][i136][i137][i138];
					i138 = (i138 + 1);
					if ((i138 == 56)) {
						i138 = 0;
						i137 = (i137 + 1);
						if ((i137 == 56)) {
							i137 = 0;
							i136 = (i136 + 1);
							if ((i136 == 64)) {
								i136 = 0;
								i135 = (i135 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp100);

	int32_al[1][56][56][64] tmp104;

	int32_pl i150;

	int32_pl i149;

	int32_pl i148;

	int32_pl i147;

	int32_pl i146;

	int32_pl i145;

	int32_pl i144;

	int32_pl i143;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J11, 1, 56, 56, 64) *)
	i143 = 0;
	i144 = 0;
	i145 = 0;
	i146 = 0;
	for i147 = [0: 1]{
 		for i150 = [0: 64]{
 			for i148 = [0: 56]{
 				for i149 = [0: 56]{
 					tmp104[i147][i148][i149][i150] = tmp67[i143][i144][i145][i146];
					i146 = (i146 + 1);
					if ((i146 == 56)) {
						i146 = 0;
						i145 = (i145 + 1);
						if ((i145 == 56)) {
							i145 = 0;
							i144 = (i144 + 1);
							if ((i144 == 64)) {
								i144 = 0;
								i143 = (i143 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp67);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 56, 56, 64, tmp104, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J27 + J28 *)
	int32_al[1][56][56][64] tmp106;

	for i0 = [0: 1]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 64]{
 					tmp106[i0][i1][i2][i3] = (tmp102[i0][i1][i2][i3] + tmp104[i0][i1][i2][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp104);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp102);

	int32_al[1][64][56][56] tmp109;

	int32_pl i158;

	int32_pl i157;

	int32_pl i156;

	int32_pl i155;

	int32_pl i154;

	int32_pl i153;

	int32_pl i152;

	int32_pl i151;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J29, 1, 64, 56, 56) *)
	i151 = 0;
	i152 = 0;
	i153 = 0;
	i154 = 0;
	for i155 = [0: 1]{
 		for i157 = [0: 56]{
 			for i158 = [0: 56]{
 				for i156 = [0: 64]{
 					tmp109[i155][i156][i157][i158] = tmp106[i151][i152][i153][i154];
					i154 = (i154 + 1);
					if ((i154 == 64)) {
						i154 = 0;
						i153 = (i153 + 1);
						if ((i153 == 56)) {
							i153 = 0;
							i152 = (i152 + 1);
							if ((i152 == 56)) {
								i152 = 0;
								i151 = (i151 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp106);

	int32_al[1][56][56][64] tmp111;

	int32_pl i166;

	int32_pl i165;

	int32_pl i164;

	int32_pl i163;

	int32_pl i162;

	int32_pl i161;

	int32_pl i160;

	int32_pl i159;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J30, 1, 56, 56, 64) *)
	i159 = 0;
	i160 = 0;
	i161 = 0;
	i162 = 0;
	for i163 = [0: 1]{
 		for i166 = [0: 64]{
 			for i164 = [0: 56]{
 				for i165 = [0: 56]{
 					tmp111[i163][i164][i165][i166] = tmp109[i159][i160][i161][i162];
					i162 = (i162 + 1);
					if ((i162 == 56)) {
						i162 = 0;
						i161 = (i161 + 1);
						if ((i161 == 56)) {
							i161 = 0;
							i160 = (i160 + 1);
							if ((i160 == 64)) {
								i160 = 0;
								i159 = (i159 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp109);

	int32_al[1][56][56][64] tmp113;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 56, 56, 64, tmp111, tmp113, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp111);

	int32_al[1][64][56][56] tmp115;

	int32_pl i174;

	int32_pl i173;

	int32_pl i172;

	int32_pl i171;

	int32_pl i170;

	int32_pl i169;

	int32_pl i168;

	int32_pl i167;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J32, 1, 64, 56, 56) *)
	i167 = 0;
	i168 = 0;
	i169 = 0;
	i170 = 0;
	for i171 = [0: 1]{
 		for i173 = [0: 56]{
 			for i174 = [0: 56]{
 				for i172 = [0: 64]{
 					tmp115[i171][i172][i173][i174] = tmp113[i167][i168][i169][i170];
					i170 = (i170 + 1);
					if ((i170 == 64)) {
						i170 = 0;
						i169 = (i169 + 1);
						if ((i169 == 56)) {
							i169 = 0;
							i168 = (i168 + 1);
							if ((i168 == 56)) {
								i168 = 0;
								i167 = (i167 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp113);

	int32_al[1][56][56][64] tmp117;

	int32_pl i182;

	int32_pl i181;

	int32_pl i180;

	int32_pl i179;

	int32_pl i178;

	int32_pl i177;

	int32_pl i176;

	int32_pl i175;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J33, 1, 56, 56, 64) *)
	i175 = 0;
	i176 = 0;
	i177 = 0;
	i178 = 0;
	for i179 = [0: 1]{
 		for i182 = [0: 64]{
 			for i180 = [0: 56]{
 				for i181 = [0: 56]{
 					tmp117[i179][i180][i181][i182] = tmp115[i175][i176][i177][i178];
					i178 = (i178 + 1);
					if ((i178 == 56)) {
						i178 = 0;
						i177 = (i177 + 1);
						if ((i177 == 56)) {
							i177 = 0;
							i176 = (i176 + 1);
							if ((i176 == 64)) {
								i176 = 0;
								i175 = (i175 + 1);
							}
						}
					}
				};
			};
		};
	};
	int32_al[3][3][64][64] tmp118;

	int32_pl i190;

	int32_pl i189;

	int32_pl i188;

	int32_pl i187;

	int32_pl i186;

	int32_pl i185;

	int32_pl i184;

	int32_pl i183;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(202, 3, 3, 64, 64) *)
	i183 = 0;
	i184 = 0;
	i185 = 0;
	i186 = 0;
	for i190 = [0: 64]{
 		for i189 = [0: 64]{
 			for i187 = [0: 3]{
 				for i188 = [0: 3]{
 					tmp118[i187][i188][i189][i190] = tmp9[i183][i184][i185][i186];
					i186 = (i186 + 1);
					if ((i186 == 3)) {
						i186 = 0;
						i185 = (i185 + 1);
						if ((i185 == 3)) {
							i185 = 0;
							i184 = (i184 + 1);
							if ((i184 == 64)) {
								i184 = 0;
								i183 = (i183 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 3, 3, tmp9);

	int32_al[1][56][56][64] tmp120;

	(* J34 # J35, convDim = 2 *)
	Conv2DGroupWrapper(1, 56, 56, 64, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp117, tmp118, tmp120);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp117);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 64, tmp118);

	int32_al[1][1][1][64] tmp123;

	int32_pl i195;

	int32_pl i194;

	int32_pl i193;

	int32_pl i192;

	int32_pl i191;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(203, 1, 1, 1, 64) *)
	i191 = 0;
	for i192 = [0: 1]{
 		for i193 = [0: 1]{
 			for i194 = [0: 1]{
 				for i195 = [0: 64]{
 					tmp123[i192][i193][i194][i195] = tmp10[i191];
					i191 = (i191 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp10);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp123, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J36 + J37 *)
	int32_al[1][56][56][64] tmp125;

	for i0 = [0: 1]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 64]{
 					tmp125[i0][i1][i2][i3] = (tmp120[i0][i1][i2][i3] + tmp123[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp120);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp123);

	int32_al[1][64][56][56] tmp128;

	int32_pl i203;

	int32_pl i202;

	int32_pl i201;

	int32_pl i200;

	int32_pl i199;

	int32_pl i198;

	int32_pl i197;

	int32_pl i196;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J38, 1, 64, 56, 56) *)
	i196 = 0;
	i197 = 0;
	i198 = 0;
	i199 = 0;
	for i200 = [0: 1]{
 		for i202 = [0: 56]{
 			for i203 = [0: 56]{
 				for i201 = [0: 64]{
 					tmp128[i200][i201][i202][i203] = tmp125[i196][i197][i198][i199];
					i199 = (i199 + 1);
					if ((i199 == 64)) {
						i199 = 0;
						i198 = (i198 + 1);
						if ((i198 == 56)) {
							i198 = 0;
							i197 = (i197 + 1);
							if ((i197 == 56)) {
								i197 = 0;
								i196 = (i196 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp125);

	int32_al[1][56][56][64] tmp130;

	int32_pl i211;

	int32_pl i210;

	int32_pl i209;

	int32_pl i208;

	int32_pl i207;

	int32_pl i206;

	int32_pl i205;

	int32_pl i204;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J39, 1, 56, 56, 64) *)
	i204 = 0;
	i205 = 0;
	i206 = 0;
	i207 = 0;
	for i208 = [0: 1]{
 		for i211 = [0: 64]{
 			for i209 = [0: 56]{
 				for i210 = [0: 56]{
 					tmp130[i208][i209][i210][i211] = tmp128[i204][i205][i206][i207];
					i207 = (i207 + 1);
					if ((i207 == 56)) {
						i207 = 0;
						i206 = (i206 + 1);
						if ((i206 == 56)) {
							i206 = 0;
							i205 = (i205 + 1);
							if ((i205 == 64)) {
								i205 = 0;
								i204 = (i204 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp128);

	int32_al[1][56][56][64] tmp132;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 56, 56, 64, tmp130, tmp132, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp130);

	int32_al[1][64][56][56] tmp134;

	int32_pl i219;

	int32_pl i218;

	int32_pl i217;

	int32_pl i216;

	int32_pl i215;

	int32_pl i214;

	int32_pl i213;

	int32_pl i212;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J41, 1, 64, 56, 56) *)
	i212 = 0;
	i213 = 0;
	i214 = 0;
	i215 = 0;
	for i216 = [0: 1]{
 		for i218 = [0: 56]{
 			for i219 = [0: 56]{
 				for i217 = [0: 64]{
 					tmp134[i216][i217][i218][i219] = tmp132[i212][i213][i214][i215];
					i215 = (i215 + 1);
					if ((i215 == 64)) {
						i215 = 0;
						i214 = (i214 + 1);
						if ((i214 == 56)) {
							i214 = 0;
							i213 = (i213 + 1);
							if ((i213 == 56)) {
								i213 = 0;
								i212 = (i212 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp132);

	int32_al[1][56][56][64] tmp136;

	int32_pl i227;

	int32_pl i226;

	int32_pl i225;

	int32_pl i224;

	int32_pl i223;

	int32_pl i222;

	int32_pl i221;

	int32_pl i220;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J42, 1, 56, 56, 64) *)
	i220 = 0;
	i221 = 0;
	i222 = 0;
	i223 = 0;
	for i224 = [0: 1]{
 		for i227 = [0: 64]{
 			for i225 = [0: 56]{
 				for i226 = [0: 56]{
 					tmp136[i224][i225][i226][i227] = tmp134[i220][i221][i222][i223];
					i223 = (i223 + 1);
					if ((i223 == 56)) {
						i223 = 0;
						i222 = (i222 + 1);
						if ((i222 == 56)) {
							i222 = 0;
							i221 = (i221 + 1);
							if ((i221 == 64)) {
								i221 = 0;
								i220 = (i220 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp134);

	int32_al[3][3][64][64] tmp138;

	int32_pl i235;

	int32_pl i234;

	int32_pl i233;

	int32_pl i232;

	int32_pl i231;

	int32_pl i230;

	int32_pl i229;

	int32_pl i228;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(205, 3, 3, 64, 64) *)
	i228 = 0;
	i229 = 0;
	i230 = 0;
	i231 = 0;
	for i235 = [0: 64]{
 		for i234 = [0: 64]{
 			for i232 = [0: 3]{
 				for i233 = [0: 3]{
 					tmp138[i232][i233][i234][i235] = tmp11[i228][i229][i230][i231];
					i231 = (i231 + 1);
					if ((i231 == 3)) {
						i231 = 0;
						i230 = (i230 + 1);
						if ((i230 == 3)) {
							i230 = 0;
							i229 = (i229 + 1);
							if ((i229 == 64)) {
								i229 = 0;
								i228 = (i228 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(64, 64, 3, 3, tmp11);

	int32_al[1][56][56][64] tmp140;

	(* J43 # J44, convDim = 2 *)
	Conv2DGroupWrapper(1, 56, 56, 64, 3, 3, 64, 1, 1, 1, 1, 1, 1, 1, tmp136, tmp138, tmp140);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 64, tmp138);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp136);

	int32_al[1][1][1][64] tmp143;

	int32_pl i240;

	int32_pl i239;

	int32_pl i238;

	int32_pl i237;

	int32_pl i236;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(206, 1, 1, 1, 64) *)
	i236 = 0;
	for i237 = [0: 1]{
 		for i238 = [0: 1]{
 			for i239 = [0: 1]{
 				for i240 = [0: 64]{
 					tmp143[i237][i238][i239][i240] = tmp12[i236];
					i236 = (i236 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(64, tmp12);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 64, tmp143, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J45 + J46 *)
	int32_al[1][56][56][64] tmp145;

	for i0 = [0: 1]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 64]{
 					tmp145[i0][i1][i2][i3] = (tmp140[i0][i1][i2][i3] + tmp143[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp140);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 64, tmp143);

	int32_al[1][64][56][56] tmp148;

	int32_pl i248;

	int32_pl i247;

	int32_pl i246;

	int32_pl i245;

	int32_pl i244;

	int32_pl i243;

	int32_pl i242;

	int32_pl i241;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J47, 1, 64, 56, 56) *)
	i241 = 0;
	i242 = 0;
	i243 = 0;
	i244 = 0;
	for i245 = [0: 1]{
 		for i247 = [0: 56]{
 			for i248 = [0: 56]{
 				for i246 = [0: 64]{
 					tmp148[i245][i246][i247][i248] = tmp145[i241][i242][i243][i244];
					i244 = (i244 + 1);
					if ((i244 == 64)) {
						i244 = 0;
						i243 = (i243 + 1);
						if ((i243 == 56)) {
							i243 = 0;
							i242 = (i242 + 1);
							if ((i242 == 56)) {
								i242 = 0;
								i241 = (i241 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp145);

	int32_al[1][56][56][64] tmp150;

	int32_pl i256;

	int32_pl i255;

	int32_pl i254;

	int32_pl i253;

	int32_pl i252;

	int32_pl i251;

	int32_pl i250;

	int32_pl i249;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J48, 1, 56, 56, 64) *)
	i249 = 0;
	i250 = 0;
	i251 = 0;
	i252 = 0;
	for i253 = [0: 1]{
 		for i256 = [0: 64]{
 			for i254 = [0: 56]{
 				for i255 = [0: 56]{
 					tmp150[i253][i254][i255][i256] = tmp148[i249][i250][i251][i252];
					i252 = (i252 + 1);
					if ((i252 == 56)) {
						i252 = 0;
						i251 = (i251 + 1);
						if ((i251 == 56)) {
							i251 = 0;
							i250 = (i250 + 1);
							if ((i250 == 64)) {
								i250 = 0;
								i249 = (i249 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp148);

	int32_al[1][56][56][64] tmp152;

	int32_pl i264;

	int32_pl i263;

	int32_pl i262;

	int32_pl i261;

	int32_pl i260;

	int32_pl i259;

	int32_pl i258;

	int32_pl i257;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J33, 1, 56, 56, 64) *)
	i257 = 0;
	i258 = 0;
	i259 = 0;
	i260 = 0;
	for i261 = [0: 1]{
 		for i264 = [0: 64]{
 			for i262 = [0: 56]{
 				for i263 = [0: 56]{
 					tmp152[i261][i262][i263][i264] = tmp115[i257][i258][i259][i260];
					i260 = (i260 + 1);
					if ((i260 == 56)) {
						i260 = 0;
						i259 = (i259 + 1);
						if ((i259 == 56)) {
							i259 = 0;
							i258 = (i258 + 1);
							if ((i258 == 64)) {
								i258 = 0;
								i257 = (i257 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp115);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 56, 56, 64, tmp152, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J49 + J50 *)
	int32_al[1][56][56][64] tmp154;

	for i0 = [0: 1]{
 		for i1 = [0: 56]{
 			for i2 = [0: 56]{
 				for i3 = [0: 64]{
 					tmp154[i0][i1][i2][i3] = (tmp150[i0][i1][i2][i3] + tmp152[i0][i1][i2][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp150);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp152);

	int32_al[1][64][56][56] tmp157;

	int32_pl i272;

	int32_pl i271;

	int32_pl i270;

	int32_pl i269;

	int32_pl i268;

	int32_pl i267;

	int32_pl i266;

	int32_pl i265;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J51, 1, 64, 56, 56) *)
	i265 = 0;
	i266 = 0;
	i267 = 0;
	i268 = 0;
	for i269 = [0: 1]{
 		for i271 = [0: 56]{
 			for i272 = [0: 56]{
 				for i270 = [0: 64]{
 					tmp157[i269][i270][i271][i272] = tmp154[i265][i266][i267][i268];
					i268 = (i268 + 1);
					if ((i268 == 64)) {
						i268 = 0;
						i267 = (i267 + 1);
						if ((i267 == 56)) {
							i267 = 0;
							i266 = (i266 + 1);
							if ((i266 == 56)) {
								i266 = 0;
								i265 = (i265 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp154);

	int32_al[1][56][56][64] tmp159;

	int32_pl i280;

	int32_pl i279;

	int32_pl i278;

	int32_pl i277;

	int32_pl i276;

	int32_pl i275;

	int32_pl i274;

	int32_pl i273;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J52, 1, 56, 56, 64) *)
	i273 = 0;
	i274 = 0;
	i275 = 0;
	i276 = 0;
	for i277 = [0: 1]{
 		for i280 = [0: 64]{
 			for i278 = [0: 56]{
 				for i279 = [0: 56]{
 					tmp159[i277][i278][i279][i280] = tmp157[i273][i274][i275][i276];
					i276 = (i276 + 1);
					if ((i276 == 56)) {
						i276 = 0;
						i275 = (i275 + 1);
						if ((i275 == 56)) {
							i275 = 0;
							i274 = (i274 + 1);
							if ((i274 == 64)) {
								i274 = 0;
								i273 = (i273 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp157);

	int32_al[1][56][56][64] tmp161;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 56, 56, 64, tmp159, tmp161, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp159);

	int32_al[1][64][56][56] tmp163;

	int32_pl i288;

	int32_pl i287;

	int32_pl i286;

	int32_pl i285;

	int32_pl i284;

	int32_pl i283;

	int32_pl i282;

	int32_pl i281;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J54, 1, 64, 56, 56) *)
	i281 = 0;
	i282 = 0;
	i283 = 0;
	i284 = 0;
	for i285 = [0: 1]{
 		for i287 = [0: 56]{
 			for i288 = [0: 56]{
 				for i286 = [0: 64]{
 					tmp163[i285][i286][i287][i288] = tmp161[i281][i282][i283][i284];
					i284 = (i284 + 1);
					if ((i284 == 64)) {
						i284 = 0;
						i283 = (i283 + 1);
						if ((i283 == 56)) {
							i283 = 0;
							i282 = (i282 + 1);
							if ((i282 == 56)) {
								i282 = 0;
								i281 = (i281 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp161);

	int32_al[1][56][56][64] tmp165;

	int32_pl i296;

	int32_pl i295;

	int32_pl i294;

	int32_pl i293;

	int32_pl i292;

	int32_pl i291;

	int32_pl i290;

	int32_pl i289;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J55, 1, 56, 56, 64) *)
	i289 = 0;
	i290 = 0;
	i291 = 0;
	i292 = 0;
	for i293 = [0: 1]{
 		for i296 = [0: 64]{
 			for i294 = [0: 56]{
 				for i295 = [0: 56]{
 					tmp165[i293][i294][i295][i296] = tmp163[i289][i290][i291][i292];
					i292 = (i292 + 1);
					if ((i292 == 56)) {
						i292 = 0;
						i291 = (i291 + 1);
						if ((i291 == 56)) {
							i291 = 0;
							i290 = (i290 + 1);
							if ((i290 == 64)) {
								i290 = 0;
								i289 = (i289 + 1);
							}
						}
					}
				};
			};
		};
	};
	int32_al[3][3][64][128] tmp166;

	int32_pl i304;

	int32_pl i303;

	int32_pl i302;

	int32_pl i301;

	int32_pl i300;

	int32_pl i299;

	int32_pl i298;

	int32_pl i297;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(208, 3, 3, 64, 128) *)
	i297 = 0;
	i298 = 0;
	i299 = 0;
	i300 = 0;
	for i304 = [0: 128]{
 		for i303 = [0: 64]{
 			for i301 = [0: 3]{
 				for i302 = [0: 3]{
 					tmp166[i301][i302][i303][i304] = tmp13[i297][i298][i299][i300];
					i300 = (i300 + 1);
					if ((i300 == 3)) {
						i300 = 0;
						i299 = (i299 + 1);
						if ((i299 == 3)) {
							i299 = 0;
							i298 = (i298 + 1);
							if ((i298 == 64)) {
								i298 = 0;
								i297 = (i297 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 64, 3, 3, tmp13);

	int32_al[1][28][28][128] tmp168;

	(* J56 # J57, convDim = 2 *)
	Conv2DGroupWrapper(1, 56, 56, 64, 3, 3, 128, 1, 1, 1, 1, 2, 2, 1, tmp165, tmp166, tmp168);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 64, 128, tmp166);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp165);

	int32_al[1][1][1][128] tmp171;

	int32_pl i309;

	int32_pl i308;

	int32_pl i307;

	int32_pl i306;

	int32_pl i305;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(209, 1, 1, 1, 128) *)
	i305 = 0;
	for i306 = [0: 1]{
 		for i307 = [0: 1]{
 			for i308 = [0: 1]{
 				for i309 = [0: 128]{
 					tmp171[i306][i307][i308][i309] = tmp14[i305];
					i305 = (i305 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp14);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp171, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J58 + J59 *)
	int32_al[1][28][28][128] tmp173;

	for i0 = [0: 1]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 128]{
 					tmp173[i0][i1][i2][i3] = (tmp168[i0][i1][i2][i3] + tmp171[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp168);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp171);

	int32_al[1][128][28][28] tmp176;

	int32_pl i317;

	int32_pl i316;

	int32_pl i315;

	int32_pl i314;

	int32_pl i313;

	int32_pl i312;

	int32_pl i311;

	int32_pl i310;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J60, 1, 128, 28, 28) *)
	i310 = 0;
	i311 = 0;
	i312 = 0;
	i313 = 0;
	for i314 = [0: 1]{
 		for i316 = [0: 28]{
 			for i317 = [0: 28]{
 				for i315 = [0: 128]{
 					tmp176[i314][i315][i316][i317] = tmp173[i310][i311][i312][i313];
					i313 = (i313 + 1);
					if ((i313 == 128)) {
						i313 = 0;
						i312 = (i312 + 1);
						if ((i312 == 28)) {
							i312 = 0;
							i311 = (i311 + 1);
							if ((i311 == 28)) {
								i311 = 0;
								i310 = (i310 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp173);

	int32_al[1][28][28][128] tmp178;

	int32_pl i325;

	int32_pl i324;

	int32_pl i323;

	int32_pl i322;

	int32_pl i321;

	int32_pl i320;

	int32_pl i319;

	int32_pl i318;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J61, 1, 28, 28, 128) *)
	i318 = 0;
	i319 = 0;
	i320 = 0;
	i321 = 0;
	for i322 = [0: 1]{
 		for i325 = [0: 128]{
 			for i323 = [0: 28]{
 				for i324 = [0: 28]{
 					tmp178[i322][i323][i324][i325] = tmp176[i318][i319][i320][i321];
					i321 = (i321 + 1);
					if ((i321 == 28)) {
						i321 = 0;
						i320 = (i320 + 1);
						if ((i320 == 28)) {
							i320 = 0;
							i319 = (i319 + 1);
							if ((i319 == 128)) {
								i319 = 0;
								i318 = (i318 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp176);

	int32_al[1][28][28][128] tmp180;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 28, 28, 128, tmp178, tmp180, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp178);

	int32_al[1][128][28][28] tmp182;

	int32_pl i333;

	int32_pl i332;

	int32_pl i331;

	int32_pl i330;

	int32_pl i329;

	int32_pl i328;

	int32_pl i327;

	int32_pl i326;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J63, 1, 128, 28, 28) *)
	i326 = 0;
	i327 = 0;
	i328 = 0;
	i329 = 0;
	for i330 = [0: 1]{
 		for i332 = [0: 28]{
 			for i333 = [0: 28]{
 				for i331 = [0: 128]{
 					tmp182[i330][i331][i332][i333] = tmp180[i326][i327][i328][i329];
					i329 = (i329 + 1);
					if ((i329 == 128)) {
						i329 = 0;
						i328 = (i328 + 1);
						if ((i328 == 28)) {
							i328 = 0;
							i327 = (i327 + 1);
							if ((i327 == 28)) {
								i327 = 0;
								i326 = (i326 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp180);

	int32_al[1][28][28][128] tmp184;

	int32_pl i341;

	int32_pl i340;

	int32_pl i339;

	int32_pl i338;

	int32_pl i337;

	int32_pl i336;

	int32_pl i335;

	int32_pl i334;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J64, 1, 28, 28, 128) *)
	i334 = 0;
	i335 = 0;
	i336 = 0;
	i337 = 0;
	for i338 = [0: 1]{
 		for i341 = [0: 128]{
 			for i339 = [0: 28]{
 				for i340 = [0: 28]{
 					tmp184[i338][i339][i340][i341] = tmp182[i334][i335][i336][i337];
					i337 = (i337 + 1);
					if ((i337 == 28)) {
						i337 = 0;
						i336 = (i336 + 1);
						if ((i336 == 28)) {
							i336 = 0;
							i335 = (i335 + 1);
							if ((i335 == 128)) {
								i335 = 0;
								i334 = (i334 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp182);

	int32_al[3][3][128][128] tmp186;

	int32_pl i349;

	int32_pl i348;

	int32_pl i347;

	int32_pl i346;

	int32_pl i345;

	int32_pl i344;

	int32_pl i343;

	int32_pl i342;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(211, 3, 3, 128, 128) *)
	i342 = 0;
	i343 = 0;
	i344 = 0;
	i345 = 0;
	for i349 = [0: 128]{
 		for i348 = [0: 128]{
 			for i346 = [0: 3]{
 				for i347 = [0: 3]{
 					tmp186[i346][i347][i348][i349] = tmp15[i342][i343][i344][i345];
					i345 = (i345 + 1);
					if ((i345 == 3)) {
						i345 = 0;
						i344 = (i344 + 1);
						if ((i344 == 3)) {
							i344 = 0;
							i343 = (i343 + 1);
							if ((i343 == 128)) {
								i343 = 0;
								i342 = (i342 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 128, 3, 3, tmp15);

	int32_al[1][28][28][128] tmp188;

	(* J65 # J66, convDim = 2 *)
	Conv2DGroupWrapper(1, 28, 28, 128, 3, 3, 128, 1, 1, 1, 1, 1, 1, 1, tmp184, tmp186, tmp188);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp184);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 128, 128, tmp186);

	int32_al[1][1][1][128] tmp191;

	int32_pl i354;

	int32_pl i353;

	int32_pl i352;

	int32_pl i351;

	int32_pl i350;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(212, 1, 1, 1, 128) *)
	i350 = 0;
	for i351 = [0: 1]{
 		for i352 = [0: 1]{
 			for i353 = [0: 1]{
 				for i354 = [0: 128]{
 					tmp191[i351][i352][i353][i354] = tmp16[i350];
					i350 = (i350 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp16);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp191, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J67 + J68 *)
	int32_al[1][28][28][128] tmp193;

	for i0 = [0: 1]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 128]{
 					tmp193[i0][i1][i2][i3] = (tmp188[i0][i1][i2][i3] + tmp191[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp188);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp191);

	int32_al[1][128][28][28] tmp196;

	int32_pl i362;

	int32_pl i361;

	int32_pl i360;

	int32_pl i359;

	int32_pl i358;

	int32_pl i357;

	int32_pl i356;

	int32_pl i355;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J69, 1, 128, 28, 28) *)
	i355 = 0;
	i356 = 0;
	i357 = 0;
	i358 = 0;
	for i359 = [0: 1]{
 		for i361 = [0: 28]{
 			for i362 = [0: 28]{
 				for i360 = [0: 128]{
 					tmp196[i359][i360][i361][i362] = tmp193[i355][i356][i357][i358];
					i358 = (i358 + 1);
					if ((i358 == 128)) {
						i358 = 0;
						i357 = (i357 + 1);
						if ((i357 == 28)) {
							i357 = 0;
							i356 = (i356 + 1);
							if ((i356 == 28)) {
								i356 = 0;
								i355 = (i355 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp193);

	int32_al[1][56][56][64] tmp198;

	int32_pl i370;

	int32_pl i369;

	int32_pl i368;

	int32_pl i367;

	int32_pl i366;

	int32_pl i365;

	int32_pl i364;

	int32_pl i363;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J55, 1, 56, 56, 64) *)
	i363 = 0;
	i364 = 0;
	i365 = 0;
	i366 = 0;
	for i367 = [0: 1]{
 		for i370 = [0: 64]{
 			for i368 = [0: 56]{
 				for i369 = [0: 56]{
 					tmp198[i367][i368][i369][i370] = tmp163[i363][i364][i365][i366];
					i366 = (i366 + 1);
					if ((i366 == 56)) {
						i366 = 0;
						i365 = (i365 + 1);
						if ((i365 == 56)) {
							i365 = 0;
							i364 = (i364 + 1);
							if ((i364 == 64)) {
								i364 = 0;
								i363 = (i363 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 64, 56, 56, tmp163);

	int32_al[1][1][64][128] tmp200;

	int32_pl i378;

	int32_pl i377;

	int32_pl i376;

	int32_pl i375;

	int32_pl i374;

	int32_pl i373;

	int32_pl i372;

	int32_pl i371;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(214, 1, 1, 64, 128) *)
	i371 = 0;
	i372 = 0;
	i373 = 0;
	i374 = 0;
	for i378 = [0: 128]{
 		for i377 = [0: 64]{
 			for i375 = [0: 1]{
 				for i376 = [0: 1]{
 					tmp200[i375][i376][i377][i378] = tmp17[i371][i372][i373][i374];
					i374 = (i374 + 1);
					if ((i374 == 1)) {
						i374 = 0;
						i373 = (i373 + 1);
						if ((i373 == 1)) {
							i373 = 0;
							i372 = (i372 + 1);
							if ((i372 == 64)) {
								i372 = 0;
								i371 = (i371 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 64, 1, 1, tmp17);

	int32_al[1][28][28][128] tmp202;

	(* J71 # J72, convDim = 2 *)
	Conv2DGroupWrapper(1, 56, 56, 64, 1, 1, 128, 0, 0, 0, 0, 2, 2, 1, tmp198, tmp200, tmp202);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 56, 56, 64, tmp198);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 64, 128, tmp200);

	int32_al[1][1][1][128] tmp205;

	int32_pl i383;

	int32_pl i382;

	int32_pl i381;

	int32_pl i380;

	int32_pl i379;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(215, 1, 1, 1, 128) *)
	i379 = 0;
	for i380 = [0: 1]{
 		for i381 = [0: 1]{
 			for i382 = [0: 1]{
 				for i383 = [0: 128]{
 					tmp205[i380][i381][i382][i383] = tmp18[i379];
					i379 = (i379 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp18);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp205, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J73 + J74 *)
	int32_al[1][28][28][128] tmp207;

	for i0 = [0: 1]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 128]{
 					tmp207[i0][i1][i2][i3] = (tmp202[i0][i1][i2][i3] + tmp205[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp202);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp205);

	int32_al[1][128][28][28] tmp210;

	int32_pl i391;

	int32_pl i390;

	int32_pl i389;

	int32_pl i388;

	int32_pl i387;

	int32_pl i386;

	int32_pl i385;

	int32_pl i384;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J75, 1, 128, 28, 28) *)
	i384 = 0;
	i385 = 0;
	i386 = 0;
	i387 = 0;
	for i388 = [0: 1]{
 		for i390 = [0: 28]{
 			for i391 = [0: 28]{
 				for i389 = [0: 128]{
 					tmp210[i388][i389][i390][i391] = tmp207[i384][i385][i386][i387];
					i387 = (i387 + 1);
					if ((i387 == 128)) {
						i387 = 0;
						i386 = (i386 + 1);
						if ((i386 == 28)) {
							i386 = 0;
							i385 = (i385 + 1);
							if ((i385 == 28)) {
								i385 = 0;
								i384 = (i384 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp207);

	int32_al[1][28][28][128] tmp212;

	int32_pl i399;

	int32_pl i398;

	int32_pl i397;

	int32_pl i396;

	int32_pl i395;

	int32_pl i394;

	int32_pl i393;

	int32_pl i392;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J70, 1, 28, 28, 128) *)
	i392 = 0;
	i393 = 0;
	i394 = 0;
	i395 = 0;
	for i396 = [0: 1]{
 		for i399 = [0: 128]{
 			for i397 = [0: 28]{
 				for i398 = [0: 28]{
 					tmp212[i396][i397][i398][i399] = tmp196[i392][i393][i394][i395];
					i395 = (i395 + 1);
					if ((i395 == 28)) {
						i395 = 0;
						i394 = (i394 + 1);
						if ((i394 == 28)) {
							i394 = 0;
							i393 = (i393 + 1);
							if ((i393 == 128)) {
								i393 = 0;
								i392 = (i392 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp196);

	int32_al[1][28][28][128] tmp214;

	int32_pl i407;

	int32_pl i406;

	int32_pl i405;

	int32_pl i404;

	int32_pl i403;

	int32_pl i402;

	int32_pl i401;

	int32_pl i400;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J76, 1, 28, 28, 128) *)
	i400 = 0;
	i401 = 0;
	i402 = 0;
	i403 = 0;
	for i404 = [0: 1]{
 		for i407 = [0: 128]{
 			for i405 = [0: 28]{
 				for i406 = [0: 28]{
 					tmp214[i404][i405][i406][i407] = tmp210[i400][i401][i402][i403];
					i403 = (i403 + 1);
					if ((i403 == 28)) {
						i403 = 0;
						i402 = (i402 + 1);
						if ((i402 == 28)) {
							i402 = 0;
							i401 = (i401 + 1);
							if ((i401 == 128)) {
								i401 = 0;
								i400 = (i400 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp210);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J77 + J78 *)
	int32_al[1][28][28][128] tmp216;

	for i0 = [0: 1]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 128]{
 					tmp216[i0][i1][i2][i3] = (tmp212[i0][i1][i2][i3] + tmp214[i0][i1][i2][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp214);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp212);

	int32_al[1][128][28][28] tmp219;

	int32_pl i415;

	int32_pl i414;

	int32_pl i413;

	int32_pl i412;

	int32_pl i411;

	int32_pl i410;

	int32_pl i409;

	int32_pl i408;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J79, 1, 128, 28, 28) *)
	i408 = 0;
	i409 = 0;
	i410 = 0;
	i411 = 0;
	for i412 = [0: 1]{
 		for i414 = [0: 28]{
 			for i415 = [0: 28]{
 				for i413 = [0: 128]{
 					tmp219[i412][i413][i414][i415] = tmp216[i408][i409][i410][i411];
					i411 = (i411 + 1);
					if ((i411 == 128)) {
						i411 = 0;
						i410 = (i410 + 1);
						if ((i410 == 28)) {
							i410 = 0;
							i409 = (i409 + 1);
							if ((i409 == 28)) {
								i409 = 0;
								i408 = (i408 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp216);

	int32_al[1][28][28][128] tmp221;

	int32_pl i423;

	int32_pl i422;

	int32_pl i421;

	int32_pl i420;

	int32_pl i419;

	int32_pl i418;

	int32_pl i417;

	int32_pl i416;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J80, 1, 28, 28, 128) *)
	i416 = 0;
	i417 = 0;
	i418 = 0;
	i419 = 0;
	for i420 = [0: 1]{
 		for i423 = [0: 128]{
 			for i421 = [0: 28]{
 				for i422 = [0: 28]{
 					tmp221[i420][i421][i422][i423] = tmp219[i416][i417][i418][i419];
					i419 = (i419 + 1);
					if ((i419 == 28)) {
						i419 = 0;
						i418 = (i418 + 1);
						if ((i418 == 28)) {
							i418 = 0;
							i417 = (i417 + 1);
							if ((i417 == 128)) {
								i417 = 0;
								i416 = (i416 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp219);

	int32_al[1][28][28][128] tmp223;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 28, 28, 128, tmp221, tmp223, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp221);

	int32_al[1][128][28][28] tmp225;

	int32_pl i431;

	int32_pl i430;

	int32_pl i429;

	int32_pl i428;

	int32_pl i427;

	int32_pl i426;

	int32_pl i425;

	int32_pl i424;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J82, 1, 128, 28, 28) *)
	i424 = 0;
	i425 = 0;
	i426 = 0;
	i427 = 0;
	for i428 = [0: 1]{
 		for i430 = [0: 28]{
 			for i431 = [0: 28]{
 				for i429 = [0: 128]{
 					tmp225[i428][i429][i430][i431] = tmp223[i424][i425][i426][i427];
					i427 = (i427 + 1);
					if ((i427 == 128)) {
						i427 = 0;
						i426 = (i426 + 1);
						if ((i426 == 28)) {
							i426 = 0;
							i425 = (i425 + 1);
							if ((i425 == 28)) {
								i425 = 0;
								i424 = (i424 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp223);

	int32_al[1][28][28][128] tmp227;

	int32_pl i439;

	int32_pl i438;

	int32_pl i437;

	int32_pl i436;

	int32_pl i435;

	int32_pl i434;

	int32_pl i433;

	int32_pl i432;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J83, 1, 28, 28, 128) *)
	i432 = 0;
	i433 = 0;
	i434 = 0;
	i435 = 0;
	for i436 = [0: 1]{
 		for i439 = [0: 128]{
 			for i437 = [0: 28]{
 				for i438 = [0: 28]{
 					tmp227[i436][i437][i438][i439] = tmp225[i432][i433][i434][i435];
					i435 = (i435 + 1);
					if ((i435 == 28)) {
						i435 = 0;
						i434 = (i434 + 1);
						if ((i434 == 28)) {
							i434 = 0;
							i433 = (i433 + 1);
							if ((i433 == 128)) {
								i433 = 0;
								i432 = (i432 + 1);
							}
						}
					}
				};
			};
		};
	};
	int32_al[3][3][128][128] tmp228;

	int32_pl i447;

	int32_pl i446;

	int32_pl i445;

	int32_pl i444;

	int32_pl i443;

	int32_pl i442;

	int32_pl i441;

	int32_pl i440;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(217, 3, 3, 128, 128) *)
	i440 = 0;
	i441 = 0;
	i442 = 0;
	i443 = 0;
	for i447 = [0: 128]{
 		for i446 = [0: 128]{
 			for i444 = [0: 3]{
 				for i445 = [0: 3]{
 					tmp228[i444][i445][i446][i447] = tmp19[i440][i441][i442][i443];
					i443 = (i443 + 1);
					if ((i443 == 3)) {
						i443 = 0;
						i442 = (i442 + 1);
						if ((i442 == 3)) {
							i442 = 0;
							i441 = (i441 + 1);
							if ((i441 == 128)) {
								i441 = 0;
								i440 = (i440 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 128, 3, 3, tmp19);

	int32_al[1][28][28][128] tmp230;

	(* J84 # J85, convDim = 2 *)
	Conv2DGroupWrapper(1, 28, 28, 128, 3, 3, 128, 1, 1, 1, 1, 1, 1, 1, tmp227, tmp228, tmp230);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp227);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 128, 128, tmp228);

	int32_al[1][1][1][128] tmp233;

	int32_pl i452;

	int32_pl i451;

	int32_pl i450;

	int32_pl i449;

	int32_pl i448;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(218, 1, 1, 1, 128) *)
	i448 = 0;
	for i449 = [0: 1]{
 		for i450 = [0: 1]{
 			for i451 = [0: 1]{
 				for i452 = [0: 128]{
 					tmp233[i449][i450][i451][i452] = tmp20[i448];
					i448 = (i448 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp20);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp233, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J86 + J87 *)
	int32_al[1][28][28][128] tmp235;

	for i0 = [0: 1]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 128]{
 					tmp235[i0][i1][i2][i3] = (tmp230[i0][i1][i2][i3] + tmp233[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp230);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp233);

	int32_al[1][128][28][28] tmp238;

	int32_pl i460;

	int32_pl i459;

	int32_pl i458;

	int32_pl i457;

	int32_pl i456;

	int32_pl i455;

	int32_pl i454;

	int32_pl i453;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J88, 1, 128, 28, 28) *)
	i453 = 0;
	i454 = 0;
	i455 = 0;
	i456 = 0;
	for i457 = [0: 1]{
 		for i459 = [0: 28]{
 			for i460 = [0: 28]{
 				for i458 = [0: 128]{
 					tmp238[i457][i458][i459][i460] = tmp235[i453][i454][i455][i456];
					i456 = (i456 + 1);
					if ((i456 == 128)) {
						i456 = 0;
						i455 = (i455 + 1);
						if ((i455 == 28)) {
							i455 = 0;
							i454 = (i454 + 1);
							if ((i454 == 28)) {
								i454 = 0;
								i453 = (i453 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp235);

	int32_al[1][28][28][128] tmp240;

	int32_pl i468;

	int32_pl i467;

	int32_pl i466;

	int32_pl i465;

	int32_pl i464;

	int32_pl i463;

	int32_pl i462;

	int32_pl i461;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J89, 1, 28, 28, 128) *)
	i461 = 0;
	i462 = 0;
	i463 = 0;
	i464 = 0;
	for i465 = [0: 1]{
 		for i468 = [0: 128]{
 			for i466 = [0: 28]{
 				for i467 = [0: 28]{
 					tmp240[i465][i466][i467][i468] = tmp238[i461][i462][i463][i464];
					i464 = (i464 + 1);
					if ((i464 == 28)) {
						i464 = 0;
						i463 = (i463 + 1);
						if ((i463 == 28)) {
							i463 = 0;
							i462 = (i462 + 1);
							if ((i462 == 128)) {
								i462 = 0;
								i461 = (i461 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp238);

	int32_al[1][28][28][128] tmp242;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 28, 28, 128, tmp240, tmp242, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp240);

	int32_al[1][128][28][28] tmp244;

	int32_pl i476;

	int32_pl i475;

	int32_pl i474;

	int32_pl i473;

	int32_pl i472;

	int32_pl i471;

	int32_pl i470;

	int32_pl i469;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J91, 1, 128, 28, 28) *)
	i469 = 0;
	i470 = 0;
	i471 = 0;
	i472 = 0;
	for i473 = [0: 1]{
 		for i475 = [0: 28]{
 			for i476 = [0: 28]{
 				for i474 = [0: 128]{
 					tmp244[i473][i474][i475][i476] = tmp242[i469][i470][i471][i472];
					i472 = (i472 + 1);
					if ((i472 == 128)) {
						i472 = 0;
						i471 = (i471 + 1);
						if ((i471 == 28)) {
							i471 = 0;
							i470 = (i470 + 1);
							if ((i470 == 28)) {
								i470 = 0;
								i469 = (i469 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp242);

	int32_al[1][28][28][128] tmp246;

	int32_pl i484;

	int32_pl i483;

	int32_pl i482;

	int32_pl i481;

	int32_pl i480;

	int32_pl i479;

	int32_pl i478;

	int32_pl i477;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J92, 1, 28, 28, 128) *)
	i477 = 0;
	i478 = 0;
	i479 = 0;
	i480 = 0;
	for i481 = [0: 1]{
 		for i484 = [0: 128]{
 			for i482 = [0: 28]{
 				for i483 = [0: 28]{
 					tmp246[i481][i482][i483][i484] = tmp244[i477][i478][i479][i480];
					i480 = (i480 + 1);
					if ((i480 == 28)) {
						i480 = 0;
						i479 = (i479 + 1);
						if ((i479 == 28)) {
							i479 = 0;
							i478 = (i478 + 1);
							if ((i478 == 128)) {
								i478 = 0;
								i477 = (i477 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp244);

	int32_al[3][3][128][128] tmp248;

	int32_pl i492;

	int32_pl i491;

	int32_pl i490;

	int32_pl i489;

	int32_pl i488;

	int32_pl i487;

	int32_pl i486;

	int32_pl i485;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(220, 3, 3, 128, 128) *)
	i485 = 0;
	i486 = 0;
	i487 = 0;
	i488 = 0;
	for i492 = [0: 128]{
 		for i491 = [0: 128]{
 			for i489 = [0: 3]{
 				for i490 = [0: 3]{
 					tmp248[i489][i490][i491][i492] = tmp21[i485][i486][i487][i488];
					i488 = (i488 + 1);
					if ((i488 == 3)) {
						i488 = 0;
						i487 = (i487 + 1);
						if ((i487 == 3)) {
							i487 = 0;
							i486 = (i486 + 1);
							if ((i486 == 128)) {
								i486 = 0;
								i485 = (i485 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(128, 128, 3, 3, tmp21);

	int32_al[1][28][28][128] tmp250;

	(* J93 # J94, convDim = 2 *)
	Conv2DGroupWrapper(1, 28, 28, 128, 3, 3, 128, 1, 1, 1, 1, 1, 1, 1, tmp246, tmp248, tmp250);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 128, 128, tmp248);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp246);

	int32_al[1][1][1][128] tmp253;

	int32_pl i497;

	int32_pl i496;

	int32_pl i495;

	int32_pl i494;

	int32_pl i493;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(221, 1, 1, 1, 128) *)
	i493 = 0;
	for i494 = [0: 1]{
 		for i495 = [0: 1]{
 			for i496 = [0: 1]{
 				for i497 = [0: 128]{
 					tmp253[i494][i495][i496][i497] = tmp22[i493];
					i493 = (i493 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(128, tmp22);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 128, tmp253, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J95 + J96 *)
	int32_al[1][28][28][128] tmp255;

	for i0 = [0: 1]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 128]{
 					tmp255[i0][i1][i2][i3] = (tmp250[i0][i1][i2][i3] + tmp253[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp250);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 128, tmp253);

	int32_al[1][128][28][28] tmp258;

	int32_pl i505;

	int32_pl i504;

	int32_pl i503;

	int32_pl i502;

	int32_pl i501;

	int32_pl i500;

	int32_pl i499;

	int32_pl i498;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J97, 1, 128, 28, 28) *)
	i498 = 0;
	i499 = 0;
	i500 = 0;
	i501 = 0;
	for i502 = [0: 1]{
 		for i504 = [0: 28]{
 			for i505 = [0: 28]{
 				for i503 = [0: 128]{
 					tmp258[i502][i503][i504][i505] = tmp255[i498][i499][i500][i501];
					i501 = (i501 + 1);
					if ((i501 == 128)) {
						i501 = 0;
						i500 = (i500 + 1);
						if ((i500 == 28)) {
							i500 = 0;
							i499 = (i499 + 1);
							if ((i499 == 28)) {
								i499 = 0;
								i498 = (i498 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp255);

	int32_al[1][28][28][128] tmp260;

	int32_pl i513;

	int32_pl i512;

	int32_pl i511;

	int32_pl i510;

	int32_pl i509;

	int32_pl i508;

	int32_pl i507;

	int32_pl i506;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J98, 1, 28, 28, 128) *)
	i506 = 0;
	i507 = 0;
	i508 = 0;
	i509 = 0;
	for i510 = [0: 1]{
 		for i513 = [0: 128]{
 			for i511 = [0: 28]{
 				for i512 = [0: 28]{
 					tmp260[i510][i511][i512][i513] = tmp258[i506][i507][i508][i509];
					i509 = (i509 + 1);
					if ((i509 == 28)) {
						i509 = 0;
						i508 = (i508 + 1);
						if ((i508 == 28)) {
							i508 = 0;
							i507 = (i507 + 1);
							if ((i507 == 128)) {
								i507 = 0;
								i506 = (i506 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp258);

	int32_al[1][28][28][128] tmp262;

	int32_pl i521;

	int32_pl i520;

	int32_pl i519;

	int32_pl i518;

	int32_pl i517;

	int32_pl i516;

	int32_pl i515;

	int32_pl i514;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J83, 1, 28, 28, 128) *)
	i514 = 0;
	i515 = 0;
	i516 = 0;
	i517 = 0;
	for i518 = [0: 1]{
 		for i521 = [0: 128]{
 			for i519 = [0: 28]{
 				for i520 = [0: 28]{
 					tmp262[i518][i519][i520][i521] = tmp225[i514][i515][i516][i517];
					i517 = (i517 + 1);
					if ((i517 == 28)) {
						i517 = 0;
						i516 = (i516 + 1);
						if ((i516 == 28)) {
							i516 = 0;
							i515 = (i515 + 1);
							if ((i515 == 128)) {
								i515 = 0;
								i514 = (i514 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp225);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 28, 28, 128, tmp262, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J99 + J100 *)
	int32_al[1][28][28][128] tmp264;

	for i0 = [0: 1]{
 		for i1 = [0: 28]{
 			for i2 = [0: 28]{
 				for i3 = [0: 128]{
 					tmp264[i0][i1][i2][i3] = (tmp260[i0][i1][i2][i3] + tmp262[i0][i1][i2][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp262);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp260);

	int32_al[1][128][28][28] tmp267;

	int32_pl i529;

	int32_pl i528;

	int32_pl i527;

	int32_pl i526;

	int32_pl i525;

	int32_pl i524;

	int32_pl i523;

	int32_pl i522;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J101, 1, 128, 28, 28) *)
	i522 = 0;
	i523 = 0;
	i524 = 0;
	i525 = 0;
	for i526 = [0: 1]{
 		for i528 = [0: 28]{
 			for i529 = [0: 28]{
 				for i527 = [0: 128]{
 					tmp267[i526][i527][i528][i529] = tmp264[i522][i523][i524][i525];
					i525 = (i525 + 1);
					if ((i525 == 128)) {
						i525 = 0;
						i524 = (i524 + 1);
						if ((i524 == 28)) {
							i524 = 0;
							i523 = (i523 + 1);
							if ((i523 == 28)) {
								i523 = 0;
								i522 = (i522 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp264);

	int32_al[1][28][28][128] tmp269;

	int32_pl i537;

	int32_pl i536;

	int32_pl i535;

	int32_pl i534;

	int32_pl i533;

	int32_pl i532;

	int32_pl i531;

	int32_pl i530;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J102, 1, 28, 28, 128) *)
	i530 = 0;
	i531 = 0;
	i532 = 0;
	i533 = 0;
	for i534 = [0: 1]{
 		for i537 = [0: 128]{
 			for i535 = [0: 28]{
 				for i536 = [0: 28]{
 					tmp269[i534][i535][i536][i537] = tmp267[i530][i531][i532][i533];
					i533 = (i533 + 1);
					if ((i533 == 28)) {
						i533 = 0;
						i532 = (i532 + 1);
						if ((i532 == 28)) {
							i532 = 0;
							i531 = (i531 + 1);
							if ((i531 == 128)) {
								i531 = 0;
								i530 = (i530 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp267);

	int32_al[1][28][28][128] tmp271;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 28, 28, 128, tmp269, tmp271, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp269);

	int32_al[1][128][28][28] tmp273;

	int32_pl i545;

	int32_pl i544;

	int32_pl i543;

	int32_pl i542;

	int32_pl i541;

	int32_pl i540;

	int32_pl i539;

	int32_pl i538;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J104, 1, 128, 28, 28) *)
	i538 = 0;
	i539 = 0;
	i540 = 0;
	i541 = 0;
	for i542 = [0: 1]{
 		for i544 = [0: 28]{
 			for i545 = [0: 28]{
 				for i543 = [0: 128]{
 					tmp273[i542][i543][i544][i545] = tmp271[i538][i539][i540][i541];
					i541 = (i541 + 1);
					if ((i541 == 128)) {
						i541 = 0;
						i540 = (i540 + 1);
						if ((i540 == 28)) {
							i540 = 0;
							i539 = (i539 + 1);
							if ((i539 == 28)) {
								i539 = 0;
								i538 = (i538 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp271);

	int32_al[1][28][28][128] tmp275;

	int32_pl i553;

	int32_pl i552;

	int32_pl i551;

	int32_pl i550;

	int32_pl i549;

	int32_pl i548;

	int32_pl i547;

	int32_pl i546;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J105, 1, 28, 28, 128) *)
	i546 = 0;
	i547 = 0;
	i548 = 0;
	i549 = 0;
	for i550 = [0: 1]{
 		for i553 = [0: 128]{
 			for i551 = [0: 28]{
 				for i552 = [0: 28]{
 					tmp275[i550][i551][i552][i553] = tmp273[i546][i547][i548][i549];
					i549 = (i549 + 1);
					if ((i549 == 28)) {
						i549 = 0;
						i548 = (i548 + 1);
						if ((i548 == 28)) {
							i548 = 0;
							i547 = (i547 + 1);
							if ((i547 == 128)) {
								i547 = 0;
								i546 = (i546 + 1);
							}
						}
					}
				};
			};
		};
	};
	int32_al[3][3][128][256] tmp276;

	int32_pl i561;

	int32_pl i560;

	int32_pl i559;

	int32_pl i558;

	int32_pl i557;

	int32_pl i556;

	int32_pl i555;

	int32_pl i554;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(223, 3, 3, 128, 256) *)
	i554 = 0;
	i555 = 0;
	i556 = 0;
	i557 = 0;
	for i561 = [0: 256]{
 		for i560 = [0: 128]{
 			for i558 = [0: 3]{
 				for i559 = [0: 3]{
 					tmp276[i558][i559][i560][i561] = tmp23[i554][i555][i556][i557];
					i557 = (i557 + 1);
					if ((i557 == 3)) {
						i557 = 0;
						i556 = (i556 + 1);
						if ((i556 == 3)) {
							i556 = 0;
							i555 = (i555 + 1);
							if ((i555 == 128)) {
								i555 = 0;
								i554 = (i554 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 128, 3, 3, tmp23);

	int32_al[1][14][14][256] tmp278;

	(* J106 # J107, convDim = 2 *)
	Conv2DGroupWrapper(1, 28, 28, 128, 3, 3, 256, 1, 1, 1, 1, 2, 2, 1, tmp275, tmp276, tmp278);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 128, 256, tmp276);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp275);

	int32_al[1][1][1][256] tmp281;

	int32_pl i566;

	int32_pl i565;

	int32_pl i564;

	int32_pl i563;

	int32_pl i562;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(224, 1, 1, 1, 256) *)
	i562 = 0;
	for i563 = [0: 1]{
 		for i564 = [0: 1]{
 			for i565 = [0: 1]{
 				for i566 = [0: 256]{
 					tmp281[i563][i564][i565][i566] = tmp24[i562];
					i562 = (i562 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp24);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp281, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J108 + J109 *)
	int32_al[1][14][14][256] tmp283;

	for i0 = [0: 1]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 256]{
 					tmp283[i0][i1][i2][i3] = (tmp278[i0][i1][i2][i3] + tmp281[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp278);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp281);

	int32_al[1][256][14][14] tmp286;

	int32_pl i574;

	int32_pl i573;

	int32_pl i572;

	int32_pl i571;

	int32_pl i570;

	int32_pl i569;

	int32_pl i568;

	int32_pl i567;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J110, 1, 256, 14, 14) *)
	i567 = 0;
	i568 = 0;
	i569 = 0;
	i570 = 0;
	for i571 = [0: 1]{
 		for i573 = [0: 14]{
 			for i574 = [0: 14]{
 				for i572 = [0: 256]{
 					tmp286[i571][i572][i573][i574] = tmp283[i567][i568][i569][i570];
					i570 = (i570 + 1);
					if ((i570 == 256)) {
						i570 = 0;
						i569 = (i569 + 1);
						if ((i569 == 14)) {
							i569 = 0;
							i568 = (i568 + 1);
							if ((i568 == 14)) {
								i568 = 0;
								i567 = (i567 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp283);

	int32_al[1][14][14][256] tmp288;

	int32_pl i582;

	int32_pl i581;

	int32_pl i580;

	int32_pl i579;

	int32_pl i578;

	int32_pl i577;

	int32_pl i576;

	int32_pl i575;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J111, 1, 14, 14, 256) *)
	i575 = 0;
	i576 = 0;
	i577 = 0;
	i578 = 0;
	for i579 = [0: 1]{
 		for i582 = [0: 256]{
 			for i580 = [0: 14]{
 				for i581 = [0: 14]{
 					tmp288[i579][i580][i581][i582] = tmp286[i575][i576][i577][i578];
					i578 = (i578 + 1);
					if ((i578 == 14)) {
						i578 = 0;
						i577 = (i577 + 1);
						if ((i577 == 14)) {
							i577 = 0;
							i576 = (i576 + 1);
							if ((i576 == 256)) {
								i576 = 0;
								i575 = (i575 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp286);

	int32_al[1][14][14][256] tmp290;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 14, 14, 256, tmp288, tmp290, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp288);

	int32_al[1][256][14][14] tmp292;

	int32_pl i590;

	int32_pl i589;

	int32_pl i588;

	int32_pl i587;

	int32_pl i586;

	int32_pl i585;

	int32_pl i584;

	int32_pl i583;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J113, 1, 256, 14, 14) *)
	i583 = 0;
	i584 = 0;
	i585 = 0;
	i586 = 0;
	for i587 = [0: 1]{
 		for i589 = [0: 14]{
 			for i590 = [0: 14]{
 				for i588 = [0: 256]{
 					tmp292[i587][i588][i589][i590] = tmp290[i583][i584][i585][i586];
					i586 = (i586 + 1);
					if ((i586 == 256)) {
						i586 = 0;
						i585 = (i585 + 1);
						if ((i585 == 14)) {
							i585 = 0;
							i584 = (i584 + 1);
							if ((i584 == 14)) {
								i584 = 0;
								i583 = (i583 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp290);

	int32_al[1][14][14][256] tmp294;

	int32_pl i598;

	int32_pl i597;

	int32_pl i596;

	int32_pl i595;

	int32_pl i594;

	int32_pl i593;

	int32_pl i592;

	int32_pl i591;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J114, 1, 14, 14, 256) *)
	i591 = 0;
	i592 = 0;
	i593 = 0;
	i594 = 0;
	for i595 = [0: 1]{
 		for i598 = [0: 256]{
 			for i596 = [0: 14]{
 				for i597 = [0: 14]{
 					tmp294[i595][i596][i597][i598] = tmp292[i591][i592][i593][i594];
					i594 = (i594 + 1);
					if ((i594 == 14)) {
						i594 = 0;
						i593 = (i593 + 1);
						if ((i593 == 14)) {
							i593 = 0;
							i592 = (i592 + 1);
							if ((i592 == 256)) {
								i592 = 0;
								i591 = (i591 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp292);

	int32_al[3][3][256][256] tmp296;

	int32_pl i606;

	int32_pl i605;

	int32_pl i604;

	int32_pl i603;

	int32_pl i602;

	int32_pl i601;

	int32_pl i600;

	int32_pl i599;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(226, 3, 3, 256, 256) *)
	i599 = 0;
	i600 = 0;
	i601 = 0;
	i602 = 0;
	for i606 = [0: 256]{
 		for i605 = [0: 256]{
 			for i603 = [0: 3]{
 				for i604 = [0: 3]{
 					tmp296[i603][i604][i605][i606] = tmp25[i599][i600][i601][i602];
					i602 = (i602 + 1);
					if ((i602 == 3)) {
						i602 = 0;
						i601 = (i601 + 1);
						if ((i601 == 3)) {
							i601 = 0;
							i600 = (i600 + 1);
							if ((i600 == 256)) {
								i600 = 0;
								i599 = (i599 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 256, 3, 3, tmp25);

	int32_al[1][14][14][256] tmp298;

	(* J115 # J116, convDim = 2 *)
	Conv2DGroupWrapper(1, 14, 14, 256, 3, 3, 256, 1, 1, 1, 1, 1, 1, 1, tmp294, tmp296, tmp298);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp294);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 256, 256, tmp296);

	int32_al[1][1][1][256] tmp301;

	int32_pl i611;

	int32_pl i610;

	int32_pl i609;

	int32_pl i608;

	int32_pl i607;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(227, 1, 1, 1, 256) *)
	i607 = 0;
	for i608 = [0: 1]{
 		for i609 = [0: 1]{
 			for i610 = [0: 1]{
 				for i611 = [0: 256]{
 					tmp301[i608][i609][i610][i611] = tmp26[i607];
					i607 = (i607 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp26);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp301, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J117 + J118 *)
	int32_al[1][14][14][256] tmp303;

	for i0 = [0: 1]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 256]{
 					tmp303[i0][i1][i2][i3] = (tmp298[i0][i1][i2][i3] + tmp301[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp301);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp298);

	int32_al[1][256][14][14] tmp306;

	int32_pl i619;

	int32_pl i618;

	int32_pl i617;

	int32_pl i616;

	int32_pl i615;

	int32_pl i614;

	int32_pl i613;

	int32_pl i612;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J119, 1, 256, 14, 14) *)
	i612 = 0;
	i613 = 0;
	i614 = 0;
	i615 = 0;
	for i616 = [0: 1]{
 		for i618 = [0: 14]{
 			for i619 = [0: 14]{
 				for i617 = [0: 256]{
 					tmp306[i616][i617][i618][i619] = tmp303[i612][i613][i614][i615];
					i615 = (i615 + 1);
					if ((i615 == 256)) {
						i615 = 0;
						i614 = (i614 + 1);
						if ((i614 == 14)) {
							i614 = 0;
							i613 = (i613 + 1);
							if ((i613 == 14)) {
								i613 = 0;
								i612 = (i612 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp303);

	int32_al[1][28][28][128] tmp308;

	int32_pl i627;

	int32_pl i626;

	int32_pl i625;

	int32_pl i624;

	int32_pl i623;

	int32_pl i622;

	int32_pl i621;

	int32_pl i620;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J105, 1, 28, 28, 128) *)
	i620 = 0;
	i621 = 0;
	i622 = 0;
	i623 = 0;
	for i624 = [0: 1]{
 		for i627 = [0: 128]{
 			for i625 = [0: 28]{
 				for i626 = [0: 28]{
 					tmp308[i624][i625][i626][i627] = tmp273[i620][i621][i622][i623];
					i623 = (i623 + 1);
					if ((i623 == 28)) {
						i623 = 0;
						i622 = (i622 + 1);
						if ((i622 == 28)) {
							i622 = 0;
							i621 = (i621 + 1);
							if ((i621 == 128)) {
								i621 = 0;
								i620 = (i620 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 128, 28, 28, tmp273);

	int32_al[1][1][128][256] tmp310;

	int32_pl i635;

	int32_pl i634;

	int32_pl i633;

	int32_pl i632;

	int32_pl i631;

	int32_pl i630;

	int32_pl i629;

	int32_pl i628;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(229, 1, 1, 128, 256) *)
	i628 = 0;
	i629 = 0;
	i630 = 0;
	i631 = 0;
	for i635 = [0: 256]{
 		for i634 = [0: 128]{
 			for i632 = [0: 1]{
 				for i633 = [0: 1]{
 					tmp310[i632][i633][i634][i635] = tmp27[i628][i629][i630][i631];
					i631 = (i631 + 1);
					if ((i631 == 1)) {
						i631 = 0;
						i630 = (i630 + 1);
						if ((i630 == 1)) {
							i630 = 0;
							i629 = (i629 + 1);
							if ((i629 == 128)) {
								i629 = 0;
								i628 = (i628 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 128, 1, 1, tmp27);

	int32_al[1][14][14][256] tmp312;

	(* J121 # J122, convDim = 2 *)
	Conv2DGroupWrapper(1, 28, 28, 128, 1, 1, 256, 0, 0, 0, 0, 2, 2, 1, tmp308, tmp310, tmp312);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 128, 256, tmp310);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 28, 28, 128, tmp308);

	int32_al[1][1][1][256] tmp315;

	int32_pl i640;

	int32_pl i639;

	int32_pl i638;

	int32_pl i637;

	int32_pl i636;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(230, 1, 1, 1, 256) *)
	i636 = 0;
	for i637 = [0: 1]{
 		for i638 = [0: 1]{
 			for i639 = [0: 1]{
 				for i640 = [0: 256]{
 					tmp315[i637][i638][i639][i640] = tmp28[i636];
					i636 = (i636 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp28);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp315, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J123 + J124 *)
	int32_al[1][14][14][256] tmp317;

	for i0 = [0: 1]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 256]{
 					tmp317[i0][i1][i2][i3] = (tmp312[i0][i1][i2][i3] + tmp315[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp312);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp315);

	int32_al[1][256][14][14] tmp320;

	int32_pl i648;

	int32_pl i647;

	int32_pl i646;

	int32_pl i645;

	int32_pl i644;

	int32_pl i643;

	int32_pl i642;

	int32_pl i641;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J125, 1, 256, 14, 14) *)
	i641 = 0;
	i642 = 0;
	i643 = 0;
	i644 = 0;
	for i645 = [0: 1]{
 		for i647 = [0: 14]{
 			for i648 = [0: 14]{
 				for i646 = [0: 256]{
 					tmp320[i645][i646][i647][i648] = tmp317[i641][i642][i643][i644];
					i644 = (i644 + 1);
					if ((i644 == 256)) {
						i644 = 0;
						i643 = (i643 + 1);
						if ((i643 == 14)) {
							i643 = 0;
							i642 = (i642 + 1);
							if ((i642 == 14)) {
								i642 = 0;
								i641 = (i641 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp317);

	int32_al[1][14][14][256] tmp322;

	int32_pl i656;

	int32_pl i655;

	int32_pl i654;

	int32_pl i653;

	int32_pl i652;

	int32_pl i651;

	int32_pl i650;

	int32_pl i649;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J120, 1, 14, 14, 256) *)
	i649 = 0;
	i650 = 0;
	i651 = 0;
	i652 = 0;
	for i653 = [0: 1]{
 		for i656 = [0: 256]{
 			for i654 = [0: 14]{
 				for i655 = [0: 14]{
 					tmp322[i653][i654][i655][i656] = tmp306[i649][i650][i651][i652];
					i652 = (i652 + 1);
					if ((i652 == 14)) {
						i652 = 0;
						i651 = (i651 + 1);
						if ((i651 == 14)) {
							i651 = 0;
							i650 = (i650 + 1);
							if ((i650 == 256)) {
								i650 = 0;
								i649 = (i649 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp306);

	int32_al[1][14][14][256] tmp324;

	int32_pl i664;

	int32_pl i663;

	int32_pl i662;

	int32_pl i661;

	int32_pl i660;

	int32_pl i659;

	int32_pl i658;

	int32_pl i657;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J126, 1, 14, 14, 256) *)
	i657 = 0;
	i658 = 0;
	i659 = 0;
	i660 = 0;
	for i661 = [0: 1]{
 		for i664 = [0: 256]{
 			for i662 = [0: 14]{
 				for i663 = [0: 14]{
 					tmp324[i661][i662][i663][i664] = tmp320[i657][i658][i659][i660];
					i660 = (i660 + 1);
					if ((i660 == 14)) {
						i660 = 0;
						i659 = (i659 + 1);
						if ((i659 == 14)) {
							i659 = 0;
							i658 = (i658 + 1);
							if ((i658 == 256)) {
								i658 = 0;
								i657 = (i657 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp320);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J127 + J128 *)
	int32_al[1][14][14][256] tmp326;

	for i0 = [0: 1]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 256]{
 					tmp326[i0][i1][i2][i3] = (tmp322[i0][i1][i2][i3] + tmp324[i0][i1][i2][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp324);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp322);

	int32_al[1][256][14][14] tmp329;

	int32_pl i672;

	int32_pl i671;

	int32_pl i670;

	int32_pl i669;

	int32_pl i668;

	int32_pl i667;

	int32_pl i666;

	int32_pl i665;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J129, 1, 256, 14, 14) *)
	i665 = 0;
	i666 = 0;
	i667 = 0;
	i668 = 0;
	for i669 = [0: 1]{
 		for i671 = [0: 14]{
 			for i672 = [0: 14]{
 				for i670 = [0: 256]{
 					tmp329[i669][i670][i671][i672] = tmp326[i665][i666][i667][i668];
					i668 = (i668 + 1);
					if ((i668 == 256)) {
						i668 = 0;
						i667 = (i667 + 1);
						if ((i667 == 14)) {
							i667 = 0;
							i666 = (i666 + 1);
							if ((i666 == 14)) {
								i666 = 0;
								i665 = (i665 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp326);

	int32_al[1][14][14][256] tmp331;

	int32_pl i680;

	int32_pl i679;

	int32_pl i678;

	int32_pl i677;

	int32_pl i676;

	int32_pl i675;

	int32_pl i674;

	int32_pl i673;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J130, 1, 14, 14, 256) *)
	i673 = 0;
	i674 = 0;
	i675 = 0;
	i676 = 0;
	for i677 = [0: 1]{
 		for i680 = [0: 256]{
 			for i678 = [0: 14]{
 				for i679 = [0: 14]{
 					tmp331[i677][i678][i679][i680] = tmp329[i673][i674][i675][i676];
					i676 = (i676 + 1);
					if ((i676 == 14)) {
						i676 = 0;
						i675 = (i675 + 1);
						if ((i675 == 14)) {
							i675 = 0;
							i674 = (i674 + 1);
							if ((i674 == 256)) {
								i674 = 0;
								i673 = (i673 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp329);

	int32_al[1][14][14][256] tmp333;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 14, 14, 256, tmp331, tmp333, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp331);

	int32_al[1][256][14][14] tmp335;

	int32_pl i688;

	int32_pl i687;

	int32_pl i686;

	int32_pl i685;

	int32_pl i684;

	int32_pl i683;

	int32_pl i682;

	int32_pl i681;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J132, 1, 256, 14, 14) *)
	i681 = 0;
	i682 = 0;
	i683 = 0;
	i684 = 0;
	for i685 = [0: 1]{
 		for i687 = [0: 14]{
 			for i688 = [0: 14]{
 				for i686 = [0: 256]{
 					tmp335[i685][i686][i687][i688] = tmp333[i681][i682][i683][i684];
					i684 = (i684 + 1);
					if ((i684 == 256)) {
						i684 = 0;
						i683 = (i683 + 1);
						if ((i683 == 14)) {
							i683 = 0;
							i682 = (i682 + 1);
							if ((i682 == 14)) {
								i682 = 0;
								i681 = (i681 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp333);

	int32_al[1][14][14][256] tmp337;

	int32_pl i696;

	int32_pl i695;

	int32_pl i694;

	int32_pl i693;

	int32_pl i692;

	int32_pl i691;

	int32_pl i690;

	int32_pl i689;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J133, 1, 14, 14, 256) *)
	i689 = 0;
	i690 = 0;
	i691 = 0;
	i692 = 0;
	for i693 = [0: 1]{
 		for i696 = [0: 256]{
 			for i694 = [0: 14]{
 				for i695 = [0: 14]{
 					tmp337[i693][i694][i695][i696] = tmp335[i689][i690][i691][i692];
					i692 = (i692 + 1);
					if ((i692 == 14)) {
						i692 = 0;
						i691 = (i691 + 1);
						if ((i691 == 14)) {
							i691 = 0;
							i690 = (i690 + 1);
							if ((i690 == 256)) {
								i690 = 0;
								i689 = (i689 + 1);
							}
						}
					}
				};
			};
		};
	};
	int32_al[3][3][256][256] tmp338;

	int32_pl i704;

	int32_pl i703;

	int32_pl i702;

	int32_pl i701;

	int32_pl i700;

	int32_pl i699;

	int32_pl i698;

	int32_pl i697;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(232, 3, 3, 256, 256) *)
	i697 = 0;
	i698 = 0;
	i699 = 0;
	i700 = 0;
	for i704 = [0: 256]{
 		for i703 = [0: 256]{
 			for i701 = [0: 3]{
 				for i702 = [0: 3]{
 					tmp338[i701][i702][i703][i704] = tmp29[i697][i698][i699][i700];
					i700 = (i700 + 1);
					if ((i700 == 3)) {
						i700 = 0;
						i699 = (i699 + 1);
						if ((i699 == 3)) {
							i699 = 0;
							i698 = (i698 + 1);
							if ((i698 == 256)) {
								i698 = 0;
								i697 = (i697 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 256, 3, 3, tmp29);

	int32_al[1][14][14][256] tmp340;

	(* J134 # J135, convDim = 2 *)
	Conv2DGroupWrapper(1, 14, 14, 256, 3, 3, 256, 1, 1, 1, 1, 1, 1, 1, tmp337, tmp338, tmp340);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp337);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 256, 256, tmp338);

	int32_al[1][1][1][256] tmp343;

	int32_pl i709;

	int32_pl i708;

	int32_pl i707;

	int32_pl i706;

	int32_pl i705;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(233, 1, 1, 1, 256) *)
	i705 = 0;
	for i706 = [0: 1]{
 		for i707 = [0: 1]{
 			for i708 = [0: 1]{
 				for i709 = [0: 256]{
 					tmp343[i706][i707][i708][i709] = tmp30[i705];
					i705 = (i705 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp30);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp343, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J136 + J137 *)
	int32_al[1][14][14][256] tmp345;

	for i0 = [0: 1]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 256]{
 					tmp345[i0][i1][i2][i3] = (tmp340[i0][i1][i2][i3] + tmp343[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp343);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp340);

	int32_al[1][256][14][14] tmp348;

	int32_pl i717;

	int32_pl i716;

	int32_pl i715;

	int32_pl i714;

	int32_pl i713;

	int32_pl i712;

	int32_pl i711;

	int32_pl i710;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J138, 1, 256, 14, 14) *)
	i710 = 0;
	i711 = 0;
	i712 = 0;
	i713 = 0;
	for i714 = [0: 1]{
 		for i716 = [0: 14]{
 			for i717 = [0: 14]{
 				for i715 = [0: 256]{
 					tmp348[i714][i715][i716][i717] = tmp345[i710][i711][i712][i713];
					i713 = (i713 + 1);
					if ((i713 == 256)) {
						i713 = 0;
						i712 = (i712 + 1);
						if ((i712 == 14)) {
							i712 = 0;
							i711 = (i711 + 1);
							if ((i711 == 14)) {
								i711 = 0;
								i710 = (i710 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp345);

	int32_al[1][14][14][256] tmp350;

	int32_pl i725;

	int32_pl i724;

	int32_pl i723;

	int32_pl i722;

	int32_pl i721;

	int32_pl i720;

	int32_pl i719;

	int32_pl i718;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J139, 1, 14, 14, 256) *)
	i718 = 0;
	i719 = 0;
	i720 = 0;
	i721 = 0;
	for i722 = [0: 1]{
 		for i725 = [0: 256]{
 			for i723 = [0: 14]{
 				for i724 = [0: 14]{
 					tmp350[i722][i723][i724][i725] = tmp348[i718][i719][i720][i721];
					i721 = (i721 + 1);
					if ((i721 == 14)) {
						i721 = 0;
						i720 = (i720 + 1);
						if ((i720 == 14)) {
							i720 = 0;
							i719 = (i719 + 1);
							if ((i719 == 256)) {
								i719 = 0;
								i718 = (i718 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp348);

	int32_al[1][14][14][256] tmp352;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 14, 14, 256, tmp350, tmp352, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp350);

	int32_al[1][256][14][14] tmp354;

	int32_pl i733;

	int32_pl i732;

	int32_pl i731;

	int32_pl i730;

	int32_pl i729;

	int32_pl i728;

	int32_pl i727;

	int32_pl i726;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J141, 1, 256, 14, 14) *)
	i726 = 0;
	i727 = 0;
	i728 = 0;
	i729 = 0;
	for i730 = [0: 1]{
 		for i732 = [0: 14]{
 			for i733 = [0: 14]{
 				for i731 = [0: 256]{
 					tmp354[i730][i731][i732][i733] = tmp352[i726][i727][i728][i729];
					i729 = (i729 + 1);
					if ((i729 == 256)) {
						i729 = 0;
						i728 = (i728 + 1);
						if ((i728 == 14)) {
							i728 = 0;
							i727 = (i727 + 1);
							if ((i727 == 14)) {
								i727 = 0;
								i726 = (i726 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp352);

	int32_al[1][14][14][256] tmp356;

	int32_pl i741;

	int32_pl i740;

	int32_pl i739;

	int32_pl i738;

	int32_pl i737;

	int32_pl i736;

	int32_pl i735;

	int32_pl i734;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J142, 1, 14, 14, 256) *)
	i734 = 0;
	i735 = 0;
	i736 = 0;
	i737 = 0;
	for i738 = [0: 1]{
 		for i741 = [0: 256]{
 			for i739 = [0: 14]{
 				for i740 = [0: 14]{
 					tmp356[i738][i739][i740][i741] = tmp354[i734][i735][i736][i737];
					i737 = (i737 + 1);
					if ((i737 == 14)) {
						i737 = 0;
						i736 = (i736 + 1);
						if ((i736 == 14)) {
							i736 = 0;
							i735 = (i735 + 1);
							if ((i735 == 256)) {
								i735 = 0;
								i734 = (i734 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp354);

	int32_al[3][3][256][256] tmp358;

	int32_pl i749;

	int32_pl i748;

	int32_pl i747;

	int32_pl i746;

	int32_pl i745;

	int32_pl i744;

	int32_pl i743;

	int32_pl i742;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(235, 3, 3, 256, 256) *)
	i742 = 0;
	i743 = 0;
	i744 = 0;
	i745 = 0;
	for i749 = [0: 256]{
 		for i748 = [0: 256]{
 			for i746 = [0: 3]{
 				for i747 = [0: 3]{
 					tmp358[i746][i747][i748][i749] = tmp31[i742][i743][i744][i745];
					i745 = (i745 + 1);
					if ((i745 == 3)) {
						i745 = 0;
						i744 = (i744 + 1);
						if ((i744 == 3)) {
							i744 = 0;
							i743 = (i743 + 1);
							if ((i743 == 256)) {
								i743 = 0;
								i742 = (i742 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 256, 3, 3, tmp31);

	int32_al[1][14][14][256] tmp360;

	(* J143 # J144, convDim = 2 *)
	Conv2DGroupWrapper(1, 14, 14, 256, 3, 3, 256, 1, 1, 1, 1, 1, 1, 1, tmp356, tmp358, tmp360);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 256, 256, tmp358);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp356);

	int32_al[1][1][1][256] tmp363;

	int32_pl i754;

	int32_pl i753;

	int32_pl i752;

	int32_pl i751;

	int32_pl i750;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(236, 1, 1, 1, 256) *)
	i750 = 0;
	for i751 = [0: 1]{
 		for i752 = [0: 1]{
 			for i753 = [0: 1]{
 				for i754 = [0: 256]{
 					tmp363[i751][i752][i753][i754] = tmp32[i750];
					i750 = (i750 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp32);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 256, tmp363, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J145 + J146 *)
	int32_al[1][14][14][256] tmp365;

	for i0 = [0: 1]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 256]{
 					tmp365[i0][i1][i2][i3] = (tmp360[i0][i1][i2][i3] + tmp363[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp360);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 256, tmp363);

	int32_al[1][256][14][14] tmp368;

	int32_pl i762;

	int32_pl i761;

	int32_pl i760;

	int32_pl i759;

	int32_pl i758;

	int32_pl i757;

	int32_pl i756;

	int32_pl i755;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J147, 1, 256, 14, 14) *)
	i755 = 0;
	i756 = 0;
	i757 = 0;
	i758 = 0;
	for i759 = [0: 1]{
 		for i761 = [0: 14]{
 			for i762 = [0: 14]{
 				for i760 = [0: 256]{
 					tmp368[i759][i760][i761][i762] = tmp365[i755][i756][i757][i758];
					i758 = (i758 + 1);
					if ((i758 == 256)) {
						i758 = 0;
						i757 = (i757 + 1);
						if ((i757 == 14)) {
							i757 = 0;
							i756 = (i756 + 1);
							if ((i756 == 14)) {
								i756 = 0;
								i755 = (i755 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp365);

	int32_al[1][14][14][256] tmp370;

	int32_pl i770;

	int32_pl i769;

	int32_pl i768;

	int32_pl i767;

	int32_pl i766;

	int32_pl i765;

	int32_pl i764;

	int32_pl i763;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J148, 1, 14, 14, 256) *)
	i763 = 0;
	i764 = 0;
	i765 = 0;
	i766 = 0;
	for i767 = [0: 1]{
 		for i770 = [0: 256]{
 			for i768 = [0: 14]{
 				for i769 = [0: 14]{
 					tmp370[i767][i768][i769][i770] = tmp368[i763][i764][i765][i766];
					i766 = (i766 + 1);
					if ((i766 == 14)) {
						i766 = 0;
						i765 = (i765 + 1);
						if ((i765 == 14)) {
							i765 = 0;
							i764 = (i764 + 1);
							if ((i764 == 256)) {
								i764 = 0;
								i763 = (i763 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp368);

	int32_al[1][14][14][256] tmp372;

	int32_pl i778;

	int32_pl i777;

	int32_pl i776;

	int32_pl i775;

	int32_pl i774;

	int32_pl i773;

	int32_pl i772;

	int32_pl i771;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J133, 1, 14, 14, 256) *)
	i771 = 0;
	i772 = 0;
	i773 = 0;
	i774 = 0;
	for i775 = [0: 1]{
 		for i778 = [0: 256]{
 			for i776 = [0: 14]{
 				for i777 = [0: 14]{
 					tmp372[i775][i776][i777][i778] = tmp335[i771][i772][i773][i774];
					i774 = (i774 + 1);
					if ((i774 == 14)) {
						i774 = 0;
						i773 = (i773 + 1);
						if ((i773 == 14)) {
							i773 = 0;
							i772 = (i772 + 1);
							if ((i772 == 256)) {
								i772 = 0;
								i771 = (i771 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp335);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 14, 14, 256, tmp372, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J149 + J150 *)
	int32_al[1][14][14][256] tmp374;

	for i0 = [0: 1]{
 		for i1 = [0: 14]{
 			for i2 = [0: 14]{
 				for i3 = [0: 256]{
 					tmp374[i0][i1][i2][i3] = (tmp370[i0][i1][i2][i3] + tmp372[i0][i1][i2][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp370);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp372);

	int32_al[1][256][14][14] tmp377;

	int32_pl i786;

	int32_pl i785;

	int32_pl i784;

	int32_pl i783;

	int32_pl i782;

	int32_pl i781;

	int32_pl i780;

	int32_pl i779;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J151, 1, 256, 14, 14) *)
	i779 = 0;
	i780 = 0;
	i781 = 0;
	i782 = 0;
	for i783 = [0: 1]{
 		for i785 = [0: 14]{
 			for i786 = [0: 14]{
 				for i784 = [0: 256]{
 					tmp377[i783][i784][i785][i786] = tmp374[i779][i780][i781][i782];
					i782 = (i782 + 1);
					if ((i782 == 256)) {
						i782 = 0;
						i781 = (i781 + 1);
						if ((i781 == 14)) {
							i781 = 0;
							i780 = (i780 + 1);
							if ((i780 == 14)) {
								i780 = 0;
								i779 = (i779 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp374);

	int32_al[1][14][14][256] tmp379;

	int32_pl i794;

	int32_pl i793;

	int32_pl i792;

	int32_pl i791;

	int32_pl i790;

	int32_pl i789;

	int32_pl i788;

	int32_pl i787;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J152, 1, 14, 14, 256) *)
	i787 = 0;
	i788 = 0;
	i789 = 0;
	i790 = 0;
	for i791 = [0: 1]{
 		for i794 = [0: 256]{
 			for i792 = [0: 14]{
 				for i793 = [0: 14]{
 					tmp379[i791][i792][i793][i794] = tmp377[i787][i788][i789][i790];
					i790 = (i790 + 1);
					if ((i790 == 14)) {
						i790 = 0;
						i789 = (i789 + 1);
						if ((i789 == 14)) {
							i789 = 0;
							i788 = (i788 + 1);
							if ((i788 == 256)) {
								i788 = 0;
								i787 = (i787 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp377);

	int32_al[1][14][14][256] tmp381;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 14, 14, 256, tmp379, tmp381, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp379);

	int32_al[1][256][14][14] tmp383;

	int32_pl i802;

	int32_pl i801;

	int32_pl i800;

	int32_pl i799;

	int32_pl i798;

	int32_pl i797;

	int32_pl i796;

	int32_pl i795;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J154, 1, 256, 14, 14) *)
	i795 = 0;
	i796 = 0;
	i797 = 0;
	i798 = 0;
	for i799 = [0: 1]{
 		for i801 = [0: 14]{
 			for i802 = [0: 14]{
 				for i800 = [0: 256]{
 					tmp383[i799][i800][i801][i802] = tmp381[i795][i796][i797][i798];
					i798 = (i798 + 1);
					if ((i798 == 256)) {
						i798 = 0;
						i797 = (i797 + 1);
						if ((i797 == 14)) {
							i797 = 0;
							i796 = (i796 + 1);
							if ((i796 == 14)) {
								i796 = 0;
								i795 = (i795 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp381);

	int32_al[1][14][14][256] tmp385;

	int32_pl i810;

	int32_pl i809;

	int32_pl i808;

	int32_pl i807;

	int32_pl i806;

	int32_pl i805;

	int32_pl i804;

	int32_pl i803;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J155, 1, 14, 14, 256) *)
	i803 = 0;
	i804 = 0;
	i805 = 0;
	i806 = 0;
	for i807 = [0: 1]{
 		for i810 = [0: 256]{
 			for i808 = [0: 14]{
 				for i809 = [0: 14]{
 					tmp385[i807][i808][i809][i810] = tmp383[i803][i804][i805][i806];
					i806 = (i806 + 1);
					if ((i806 == 14)) {
						i806 = 0;
						i805 = (i805 + 1);
						if ((i805 == 14)) {
							i805 = 0;
							i804 = (i804 + 1);
							if ((i804 == 256)) {
								i804 = 0;
								i803 = (i803 + 1);
							}
						}
					}
				};
			};
		};
	};
	int32_al[3][3][256][512] tmp386;

	int32_pl i818;

	int32_pl i817;

	int32_pl i816;

	int32_pl i815;

	int32_pl i814;

	int32_pl i813;

	int32_pl i812;

	int32_pl i811;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(238, 3, 3, 256, 512) *)
	i811 = 0;
	i812 = 0;
	i813 = 0;
	i814 = 0;
	for i818 = [0: 512]{
 		for i817 = [0: 256]{
 			for i815 = [0: 3]{
 				for i816 = [0: 3]{
 					tmp386[i815][i816][i817][i818] = tmp33[i811][i812][i813][i814];
					i814 = (i814 + 1);
					if ((i814 == 3)) {
						i814 = 0;
						i813 = (i813 + 1);
						if ((i813 == 3)) {
							i813 = 0;
							i812 = (i812 + 1);
							if ((i812 == 256)) {
								i812 = 0;
								i811 = (i811 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 256, 3, 3, tmp33);

	int32_al[1][7][7][512] tmp388;

	(* J156 # J157, convDim = 2 *)
	Conv2DGroupWrapper(1, 14, 14, 256, 3, 3, 512, 1, 1, 1, 1, 2, 2, 1, tmp385, tmp386, tmp388);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp385);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 256, 512, tmp386);

	int32_al[1][1][1][512] tmp391;

	int32_pl i823;

	int32_pl i822;

	int32_pl i821;

	int32_pl i820;

	int32_pl i819;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(239, 1, 1, 1, 512) *)
	i819 = 0;
	for i820 = [0: 1]{
 		for i821 = [0: 1]{
 			for i822 = [0: 1]{
 				for i823 = [0: 512]{
 					tmp391[i820][i821][i822][i823] = tmp34[i819];
					i819 = (i819 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp34);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp391, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J158 + J159 *)
	int32_al[1][7][7][512] tmp393;

	for i0 = [0: 1]{
 		for i1 = [0: 7]{
 			for i2 = [0: 7]{
 				for i3 = [0: 512]{
 					tmp393[i0][i1][i2][i3] = (tmp388[i0][i1][i2][i3] + tmp391[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp391);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp388);

	int32_al[1][512][7][7] tmp396;

	int32_pl i831;

	int32_pl i830;

	int32_pl i829;

	int32_pl i828;

	int32_pl i827;

	int32_pl i826;

	int32_pl i825;

	int32_pl i824;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J160, 1, 512, 7, 7) *)
	i824 = 0;
	i825 = 0;
	i826 = 0;
	i827 = 0;
	for i828 = [0: 1]{
 		for i830 = [0: 7]{
 			for i831 = [0: 7]{
 				for i829 = [0: 512]{
 					tmp396[i828][i829][i830][i831] = tmp393[i824][i825][i826][i827];
					i827 = (i827 + 1);
					if ((i827 == 512)) {
						i827 = 0;
						i826 = (i826 + 1);
						if ((i826 == 7)) {
							i826 = 0;
							i825 = (i825 + 1);
							if ((i825 == 7)) {
								i825 = 0;
								i824 = (i824 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp393);

	int32_al[1][7][7][512] tmp398;

	int32_pl i839;

	int32_pl i838;

	int32_pl i837;

	int32_pl i836;

	int32_pl i835;

	int32_pl i834;

	int32_pl i833;

	int32_pl i832;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J161, 1, 7, 7, 512) *)
	i832 = 0;
	i833 = 0;
	i834 = 0;
	i835 = 0;
	for i836 = [0: 1]{
 		for i839 = [0: 512]{
 			for i837 = [0: 7]{
 				for i838 = [0: 7]{
 					tmp398[i836][i837][i838][i839] = tmp396[i832][i833][i834][i835];
					i835 = (i835 + 1);
					if ((i835 == 7)) {
						i835 = 0;
						i834 = (i834 + 1);
						if ((i834 == 7)) {
							i834 = 0;
							i833 = (i833 + 1);
							if ((i833 == 512)) {
								i833 = 0;
								i832 = (i832 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp396);

	int32_al[1][7][7][512] tmp400;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 7, 7, 512, tmp398, tmp400, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp398);

	int32_al[1][512][7][7] tmp402;

	int32_pl i847;

	int32_pl i846;

	int32_pl i845;

	int32_pl i844;

	int32_pl i843;

	int32_pl i842;

	int32_pl i841;

	int32_pl i840;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J163, 1, 512, 7, 7) *)
	i840 = 0;
	i841 = 0;
	i842 = 0;
	i843 = 0;
	for i844 = [0: 1]{
 		for i846 = [0: 7]{
 			for i847 = [0: 7]{
 				for i845 = [0: 512]{
 					tmp402[i844][i845][i846][i847] = tmp400[i840][i841][i842][i843];
					i843 = (i843 + 1);
					if ((i843 == 512)) {
						i843 = 0;
						i842 = (i842 + 1);
						if ((i842 == 7)) {
							i842 = 0;
							i841 = (i841 + 1);
							if ((i841 == 7)) {
								i841 = 0;
								i840 = (i840 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp400);

	int32_al[1][7][7][512] tmp404;

	int32_pl i855;

	int32_pl i854;

	int32_pl i853;

	int32_pl i852;

	int32_pl i851;

	int32_pl i850;

	int32_pl i849;

	int32_pl i848;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J164, 1, 7, 7, 512) *)
	i848 = 0;
	i849 = 0;
	i850 = 0;
	i851 = 0;
	for i852 = [0: 1]{
 		for i855 = [0: 512]{
 			for i853 = [0: 7]{
 				for i854 = [0: 7]{
 					tmp404[i852][i853][i854][i855] = tmp402[i848][i849][i850][i851];
					i851 = (i851 + 1);
					if ((i851 == 7)) {
						i851 = 0;
						i850 = (i850 + 1);
						if ((i850 == 7)) {
							i850 = 0;
							i849 = (i849 + 1);
							if ((i849 == 512)) {
								i849 = 0;
								i848 = (i848 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp402);

	int32_al[3][3][512][512] tmp406;

	int32_pl i863;

	int32_pl i862;

	int32_pl i861;

	int32_pl i860;

	int32_pl i859;

	int32_pl i858;

	int32_pl i857;

	int32_pl i856;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(241, 3, 3, 512, 512) *)
	i856 = 0;
	i857 = 0;
	i858 = 0;
	i859 = 0;
	for i863 = [0: 512]{
 		for i862 = [0: 512]{
 			for i860 = [0: 3]{
 				for i861 = [0: 3]{
 					tmp406[i860][i861][i862][i863] = tmp35[i856][i857][i858][i859];
					i859 = (i859 + 1);
					if ((i859 == 3)) {
						i859 = 0;
						i858 = (i858 + 1);
						if ((i858 == 3)) {
							i858 = 0;
							i857 = (i857 + 1);
							if ((i857 == 512)) {
								i857 = 0;
								i856 = (i856 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 512, 3, 3, tmp35);

	int32_al[1][7][7][512] tmp408;

	(* J165 # J166, convDim = 2 *)
	Conv2DGroupWrapper(1, 7, 7, 512, 3, 3, 512, 1, 1, 1, 1, 1, 1, 1, tmp404, tmp406, tmp408);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp404);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 512, 512, tmp406);

	int32_al[1][1][1][512] tmp411;

	int32_pl i868;

	int32_pl i867;

	int32_pl i866;

	int32_pl i865;

	int32_pl i864;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(242, 1, 1, 1, 512) *)
	i864 = 0;
	for i865 = [0: 1]{
 		for i866 = [0: 1]{
 			for i867 = [0: 1]{
 				for i868 = [0: 512]{
 					tmp411[i865][i866][i867][i868] = tmp36[i864];
					i864 = (i864 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp36);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp411, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J167 + J168 *)
	int32_al[1][7][7][512] tmp413;

	for i0 = [0: 1]{
 		for i1 = [0: 7]{
 			for i2 = [0: 7]{
 				for i3 = [0: 512]{
 					tmp413[i0][i1][i2][i3] = (tmp408[i0][i1][i2][i3] + tmp411[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp411);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp408);

	int32_al[1][512][7][7] tmp416;

	int32_pl i876;

	int32_pl i875;

	int32_pl i874;

	int32_pl i873;

	int32_pl i872;

	int32_pl i871;

	int32_pl i870;

	int32_pl i869;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J169, 1, 512, 7, 7) *)
	i869 = 0;
	i870 = 0;
	i871 = 0;
	i872 = 0;
	for i873 = [0: 1]{
 		for i875 = [0: 7]{
 			for i876 = [0: 7]{
 				for i874 = [0: 512]{
 					tmp416[i873][i874][i875][i876] = tmp413[i869][i870][i871][i872];
					i872 = (i872 + 1);
					if ((i872 == 512)) {
						i872 = 0;
						i871 = (i871 + 1);
						if ((i871 == 7)) {
							i871 = 0;
							i870 = (i870 + 1);
							if ((i870 == 7)) {
								i870 = 0;
								i869 = (i869 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp413);

	int32_al[1][14][14][256] tmp418;

	int32_pl i884;

	int32_pl i883;

	int32_pl i882;

	int32_pl i881;

	int32_pl i880;

	int32_pl i879;

	int32_pl i878;

	int32_pl i877;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J155, 1, 14, 14, 256) *)
	i877 = 0;
	i878 = 0;
	i879 = 0;
	i880 = 0;
	for i881 = [0: 1]{
 		for i884 = [0: 256]{
 			for i882 = [0: 14]{
 				for i883 = [0: 14]{
 					tmp418[i881][i882][i883][i884] = tmp383[i877][i878][i879][i880];
					i880 = (i880 + 1);
					if ((i880 == 14)) {
						i880 = 0;
						i879 = (i879 + 1);
						if ((i879 == 14)) {
							i879 = 0;
							i878 = (i878 + 1);
							if ((i878 == 256)) {
								i878 = 0;
								i877 = (i877 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 14, 14, tmp383);

	int32_al[1][1][256][512] tmp420;

	int32_pl i892;

	int32_pl i891;

	int32_pl i890;

	int32_pl i889;

	int32_pl i888;

	int32_pl i887;

	int32_pl i886;

	int32_pl i885;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(244, 1, 1, 256, 512) *)
	i885 = 0;
	i886 = 0;
	i887 = 0;
	i888 = 0;
	for i892 = [0: 512]{
 		for i891 = [0: 256]{
 			for i889 = [0: 1]{
 				for i890 = [0: 1]{
 					tmp420[i889][i890][i891][i892] = tmp37[i885][i886][i887][i888];
					i888 = (i888 + 1);
					if ((i888 == 1)) {
						i888 = 0;
						i887 = (i887 + 1);
						if ((i887 == 1)) {
							i887 = 0;
							i886 = (i886 + 1);
							if ((i886 == 256)) {
								i886 = 0;
								i885 = (i885 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 256, 1, 1, tmp37);

	int32_al[1][7][7][512] tmp422;

	(* J171 # J172, convDim = 2 *)
	Conv2DGroupWrapper(1, 14, 14, 256, 1, 1, 512, 0, 0, 0, 0, 2, 2, 1, tmp418, tmp420, tmp422);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 14, 14, 256, tmp418);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 512, tmp420);

	int32_al[1][1][1][512] tmp425;

	int32_pl i897;

	int32_pl i896;

	int32_pl i895;

	int32_pl i894;

	int32_pl i893;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(245, 1, 1, 1, 512) *)
	i893 = 0;
	for i894 = [0: 1]{
 		for i895 = [0: 1]{
 			for i896 = [0: 1]{
 				for i897 = [0: 512]{
 					tmp425[i894][i895][i896][i897] = tmp38[i893];
					i893 = (i893 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp38);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp425, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J173 + J174 *)
	int32_al[1][7][7][512] tmp427;

	for i0 = [0: 1]{
 		for i1 = [0: 7]{
 			for i2 = [0: 7]{
 				for i3 = [0: 512]{
 					tmp427[i0][i1][i2][i3] = (tmp422[i0][i1][i2][i3] + tmp425[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp422);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp425);

	int32_al[1][512][7][7] tmp430;

	int32_pl i905;

	int32_pl i904;

	int32_pl i903;

	int32_pl i902;

	int32_pl i901;

	int32_pl i900;

	int32_pl i899;

	int32_pl i898;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J175, 1, 512, 7, 7) *)
	i898 = 0;
	i899 = 0;
	i900 = 0;
	i901 = 0;
	for i902 = [0: 1]{
 		for i904 = [0: 7]{
 			for i905 = [0: 7]{
 				for i903 = [0: 512]{
 					tmp430[i902][i903][i904][i905] = tmp427[i898][i899][i900][i901];
					i901 = (i901 + 1);
					if ((i901 == 512)) {
						i901 = 0;
						i900 = (i900 + 1);
						if ((i900 == 7)) {
							i900 = 0;
							i899 = (i899 + 1);
							if ((i899 == 7)) {
								i899 = 0;
								i898 = (i898 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp427);

	int32_al[1][7][7][512] tmp432;

	int32_pl i913;

	int32_pl i912;

	int32_pl i911;

	int32_pl i910;

	int32_pl i909;

	int32_pl i908;

	int32_pl i907;

	int32_pl i906;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J170, 1, 7, 7, 512) *)
	i906 = 0;
	i907 = 0;
	i908 = 0;
	i909 = 0;
	for i910 = [0: 1]{
 		for i913 = [0: 512]{
 			for i911 = [0: 7]{
 				for i912 = [0: 7]{
 					tmp432[i910][i911][i912][i913] = tmp416[i906][i907][i908][i909];
					i909 = (i909 + 1);
					if ((i909 == 7)) {
						i909 = 0;
						i908 = (i908 + 1);
						if ((i908 == 7)) {
							i908 = 0;
							i907 = (i907 + 1);
							if ((i907 == 512)) {
								i907 = 0;
								i906 = (i906 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp416);

	int32_al[1][7][7][512] tmp434;

	int32_pl i921;

	int32_pl i920;

	int32_pl i919;

	int32_pl i918;

	int32_pl i917;

	int32_pl i916;

	int32_pl i915;

	int32_pl i914;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J176, 1, 7, 7, 512) *)
	i914 = 0;
	i915 = 0;
	i916 = 0;
	i917 = 0;
	for i918 = [0: 1]{
 		for i921 = [0: 512]{
 			for i919 = [0: 7]{
 				for i920 = [0: 7]{
 					tmp434[i918][i919][i920][i921] = tmp430[i914][i915][i916][i917];
					i917 = (i917 + 1);
					if ((i917 == 7)) {
						i917 = 0;
						i916 = (i916 + 1);
						if ((i916 == 7)) {
							i916 = 0;
							i915 = (i915 + 1);
							if ((i915 == 512)) {
								i915 = 0;
								i914 = (i914 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp430);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J177 + J178 *)
	int32_al[1][7][7][512] tmp436;

	for i0 = [0: 1]{
 		for i1 = [0: 7]{
 			for i2 = [0: 7]{
 				for i3 = [0: 512]{
 					tmp436[i0][i1][i2][i3] = (tmp432[i0][i1][i2][i3] + tmp434[i0][i1][i2][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp432);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp434);

	int32_al[1][512][7][7] tmp439;

	int32_pl i929;

	int32_pl i928;

	int32_pl i927;

	int32_pl i926;

	int32_pl i925;

	int32_pl i924;

	int32_pl i923;

	int32_pl i922;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J179, 1, 512, 7, 7) *)
	i922 = 0;
	i923 = 0;
	i924 = 0;
	i925 = 0;
	for i926 = [0: 1]{
 		for i928 = [0: 7]{
 			for i929 = [0: 7]{
 				for i927 = [0: 512]{
 					tmp439[i926][i927][i928][i929] = tmp436[i922][i923][i924][i925];
					i925 = (i925 + 1);
					if ((i925 == 512)) {
						i925 = 0;
						i924 = (i924 + 1);
						if ((i924 == 7)) {
							i924 = 0;
							i923 = (i923 + 1);
							if ((i923 == 7)) {
								i923 = 0;
								i922 = (i922 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp436);

	int32_al[1][7][7][512] tmp441;

	int32_pl i937;

	int32_pl i936;

	int32_pl i935;

	int32_pl i934;

	int32_pl i933;

	int32_pl i932;

	int32_pl i931;

	int32_pl i930;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J180, 1, 7, 7, 512) *)
	i930 = 0;
	i931 = 0;
	i932 = 0;
	i933 = 0;
	for i934 = [0: 1]{
 		for i937 = [0: 512]{
 			for i935 = [0: 7]{
 				for i936 = [0: 7]{
 					tmp441[i934][i935][i936][i937] = tmp439[i930][i931][i932][i933];
					i933 = (i933 + 1);
					if ((i933 == 7)) {
						i933 = 0;
						i932 = (i932 + 1);
						if ((i932 == 7)) {
							i932 = 0;
							i931 = (i931 + 1);
							if ((i931 == 512)) {
								i931 = 0;
								i930 = (i930 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp439);

	int32_al[1][7][7][512] tmp443;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 7, 7, 512, tmp441, tmp443, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp441);

	int32_al[1][512][7][7] tmp445;

	int32_pl i945;

	int32_pl i944;

	int32_pl i943;

	int32_pl i942;

	int32_pl i941;

	int32_pl i940;

	int32_pl i939;

	int32_pl i938;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J182, 1, 512, 7, 7) *)
	i938 = 0;
	i939 = 0;
	i940 = 0;
	i941 = 0;
	for i942 = [0: 1]{
 		for i944 = [0: 7]{
 			for i945 = [0: 7]{
 				for i943 = [0: 512]{
 					tmp445[i942][i943][i944][i945] = tmp443[i938][i939][i940][i941];
					i941 = (i941 + 1);
					if ((i941 == 512)) {
						i941 = 0;
						i940 = (i940 + 1);
						if ((i940 == 7)) {
							i940 = 0;
							i939 = (i939 + 1);
							if ((i939 == 7)) {
								i939 = 0;
								i938 = (i938 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp443);

	int32_al[1][7][7][512] tmp447;

	int32_pl i953;

	int32_pl i952;

	int32_pl i951;

	int32_pl i950;

	int32_pl i949;

	int32_pl i948;

	int32_pl i947;

	int32_pl i946;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J183, 1, 7, 7, 512) *)
	i946 = 0;
	i947 = 0;
	i948 = 0;
	i949 = 0;
	for i950 = [0: 1]{
 		for i953 = [0: 512]{
 			for i951 = [0: 7]{
 				for i952 = [0: 7]{
 					tmp447[i950][i951][i952][i953] = tmp445[i946][i947][i948][i949];
					i949 = (i949 + 1);
					if ((i949 == 7)) {
						i949 = 0;
						i948 = (i948 + 1);
						if ((i948 == 7)) {
							i948 = 0;
							i947 = (i947 + 1);
							if ((i947 == 512)) {
								i947 = 0;
								i946 = (i946 + 1);
							}
						}
					}
				};
			};
		};
	};
	int32_al[3][3][512][512] tmp448;

	int32_pl i961;

	int32_pl i960;

	int32_pl i959;

	int32_pl i958;

	int32_pl i957;

	int32_pl i956;

	int32_pl i955;

	int32_pl i954;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(247, 3, 3, 512, 512) *)
	i954 = 0;
	i955 = 0;
	i956 = 0;
	i957 = 0;
	for i961 = [0: 512]{
 		for i960 = [0: 512]{
 			for i958 = [0: 3]{
 				for i959 = [0: 3]{
 					tmp448[i958][i959][i960][i961] = tmp39[i954][i955][i956][i957];
					i957 = (i957 + 1);
					if ((i957 == 3)) {
						i957 = 0;
						i956 = (i956 + 1);
						if ((i956 == 3)) {
							i956 = 0;
							i955 = (i955 + 1);
							if ((i955 == 512)) {
								i955 = 0;
								i954 = (i954 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 512, 3, 3, tmp39);

	int32_al[1][7][7][512] tmp450;

	(* J184 # J185, convDim = 2 *)
	Conv2DGroupWrapper(1, 7, 7, 512, 3, 3, 512, 1, 1, 1, 1, 1, 1, 1, tmp447, tmp448, tmp450);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp447);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 512, 512, tmp448);

	int32_al[1][1][1][512] tmp453;

	int32_pl i966;

	int32_pl i965;

	int32_pl i964;

	int32_pl i963;

	int32_pl i962;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(248, 1, 1, 1, 512) *)
	i962 = 0;
	for i963 = [0: 1]{
 		for i964 = [0: 1]{
 			for i965 = [0: 1]{
 				for i966 = [0: 512]{
 					tmp453[i963][i964][i965][i966] = tmp40[i962];
					i962 = (i962 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp40);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp453, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J186 + J187 *)
	int32_al[1][7][7][512] tmp455;

	for i0 = [0: 1]{
 		for i1 = [0: 7]{
 			for i2 = [0: 7]{
 				for i3 = [0: 512]{
 					tmp455[i0][i1][i2][i3] = (tmp450[i0][i1][i2][i3] + tmp453[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp453);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp450);

	int32_al[1][512][7][7] tmp458;

	int32_pl i974;

	int32_pl i973;

	int32_pl i972;

	int32_pl i971;

	int32_pl i970;

	int32_pl i969;

	int32_pl i968;

	int32_pl i967;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J188, 1, 512, 7, 7) *)
	i967 = 0;
	i968 = 0;
	i969 = 0;
	i970 = 0;
	for i971 = [0: 1]{
 		for i973 = [0: 7]{
 			for i974 = [0: 7]{
 				for i972 = [0: 512]{
 					tmp458[i971][i972][i973][i974] = tmp455[i967][i968][i969][i970];
					i970 = (i970 + 1);
					if ((i970 == 512)) {
						i970 = 0;
						i969 = (i969 + 1);
						if ((i969 == 7)) {
							i969 = 0;
							i968 = (i968 + 1);
							if ((i968 == 7)) {
								i968 = 0;
								i967 = (i967 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp455);

	int32_al[1][7][7][512] tmp460;

	int32_pl i982;

	int32_pl i981;

	int32_pl i980;

	int32_pl i979;

	int32_pl i978;

	int32_pl i977;

	int32_pl i976;

	int32_pl i975;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J189, 1, 7, 7, 512) *)
	i975 = 0;
	i976 = 0;
	i977 = 0;
	i978 = 0;
	for i979 = [0: 1]{
 		for i982 = [0: 512]{
 			for i980 = [0: 7]{
 				for i981 = [0: 7]{
 					tmp460[i979][i980][i981][i982] = tmp458[i975][i976][i977][i978];
					i978 = (i978 + 1);
					if ((i978 == 7)) {
						i978 = 0;
						i977 = (i977 + 1);
						if ((i977 == 7)) {
							i977 = 0;
							i976 = (i976 + 1);
							if ((i976 == 512)) {
								i976 = 0;
								i975 = (i975 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp458);

	int32_al[1][7][7][512] tmp462;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 7, 7, 512, tmp460, tmp462, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp460);

	int32_al[1][512][7][7] tmp464;

	int32_pl i990;

	int32_pl i989;

	int32_pl i988;

	int32_pl i987;

	int32_pl i986;

	int32_pl i985;

	int32_pl i984;

	int32_pl i983;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J191, 1, 512, 7, 7) *)
	i983 = 0;
	i984 = 0;
	i985 = 0;
	i986 = 0;
	for i987 = [0: 1]{
 		for i989 = [0: 7]{
 			for i990 = [0: 7]{
 				for i988 = [0: 512]{
 					tmp464[i987][i988][i989][i990] = tmp462[i983][i984][i985][i986];
					i986 = (i986 + 1);
					if ((i986 == 512)) {
						i986 = 0;
						i985 = (i985 + 1);
						if ((i985 == 7)) {
							i985 = 0;
							i984 = (i984 + 1);
							if ((i984 == 7)) {
								i984 = 0;
								i983 = (i983 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp462);

	int32_al[1][7][7][512] tmp466;

	int32_pl i998;

	int32_pl i997;

	int32_pl i996;

	int32_pl i995;

	int32_pl i994;

	int32_pl i993;

	int32_pl i992;

	int32_pl i991;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J192, 1, 7, 7, 512) *)
	i991 = 0;
	i992 = 0;
	i993 = 0;
	i994 = 0;
	for i995 = [0: 1]{
 		for i998 = [0: 512]{
 			for i996 = [0: 7]{
 				for i997 = [0: 7]{
 					tmp466[i995][i996][i997][i998] = tmp464[i991][i992][i993][i994];
					i994 = (i994 + 1);
					if ((i994 == 7)) {
						i994 = 0;
						i993 = (i993 + 1);
						if ((i993 == 7)) {
							i993 = 0;
							i992 = (i992 + 1);
							if ((i992 == 512)) {
								i992 = 0;
								i991 = (i991 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp464);

	int32_al[3][3][512][512] tmp468;

	int32_pl i1006;

	int32_pl i1005;

	int32_pl i1004;

	int32_pl i1003;

	int32_pl i1002;

	int32_pl i1001;

	int32_pl i1000;

	int32_pl i999;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(250, 3, 3, 512, 512) *)
	i999 = 0;
	i1000 = 0;
	i1001 = 0;
	i1002 = 0;
	for i1006 = [0: 512]{
 		for i1005 = [0: 512]{
 			for i1003 = [0: 3]{
 				for i1004 = [0: 3]{
 					tmp468[i1003][i1004][i1005][i1006] = tmp41[i999][i1000][i1001][i1002];
					i1002 = (i1002 + 1);
					if ((i1002 == 3)) {
						i1002 = 0;
						i1001 = (i1001 + 1);
						if ((i1001 == 3)) {
							i1001 = 0;
							i1000 = (i1000 + 1);
							if ((i1000 == 512)) {
								i1000 = 0;
								i999 = (i999 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(512, 512, 3, 3, tmp41);

	int32_al[1][7][7][512] tmp470;

	(* J193 # J194, convDim = 2 *)
	Conv2DGroupWrapper(1, 7, 7, 512, 3, 3, 512, 1, 1, 1, 1, 1, 1, 1, tmp466, tmp468, tmp470);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp466);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 3, 512, 512, tmp468);

	int32_al[1][1][1][512] tmp473;

	int32_pl i1011;

	int32_pl i1010;

	int32_pl i1009;

	int32_pl i1008;

	int32_pl i1007;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(251, 1, 1, 1, 512) *)
	i1007 = 0;
	for i1008 = [0: 1]{
 		for i1009 = [0: 1]{
 			for i1010 = [0: 1]{
 				for i1011 = [0: 512]{
 					tmp473[i1008][i1009][i1010][i1011] = tmp42[i1007];
					i1007 = (i1007 + 1);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp42);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 1, 1, 512, tmp473, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J195 + J196 *)
	int32_al[1][7][7][512] tmp475;

	for i0 = [0: 1]{
 		for i1 = [0: 7]{
 			for i2 = [0: 7]{
 				for i3 = [0: 512]{
 					tmp475[i0][i1][i2][i3] = (tmp470[i0][i1][i2][i3] + tmp473[i0][0][0][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp470);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp473);

	int32_al[1][512][7][7] tmp478;

	int32_pl i1019;

	int32_pl i1018;

	int32_pl i1017;

	int32_pl i1016;

	int32_pl i1015;

	int32_pl i1014;

	int32_pl i1013;

	int32_pl i1012;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J197, 1, 512, 7, 7) *)
	i1012 = 0;
	i1013 = 0;
	i1014 = 0;
	i1015 = 0;
	for i1016 = [0: 1]{
 		for i1018 = [0: 7]{
 			for i1019 = [0: 7]{
 				for i1017 = [0: 512]{
 					tmp478[i1016][i1017][i1018][i1019] = tmp475[i1012][i1013][i1014][i1015];
					i1015 = (i1015 + 1);
					if ((i1015 == 512)) {
						i1015 = 0;
						i1014 = (i1014 + 1);
						if ((i1014 == 7)) {
							i1014 = 0;
							i1013 = (i1013 + 1);
							if ((i1013 == 7)) {
								i1013 = 0;
								i1012 = (i1012 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp475);

	int32_al[1][7][7][512] tmp480;

	int32_pl i1027;

	int32_pl i1026;

	int32_pl i1025;

	int32_pl i1024;

	int32_pl i1023;

	int32_pl i1022;

	int32_pl i1021;

	int32_pl i1020;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J198, 1, 7, 7, 512) *)
	i1020 = 0;
	i1021 = 0;
	i1022 = 0;
	i1023 = 0;
	for i1024 = [0: 1]{
 		for i1027 = [0: 512]{
 			for i1025 = [0: 7]{
 				for i1026 = [0: 7]{
 					tmp480[i1024][i1025][i1026][i1027] = tmp478[i1020][i1021][i1022][i1023];
					i1023 = (i1023 + 1);
					if ((i1023 == 7)) {
						i1023 = 0;
						i1022 = (i1022 + 1);
						if ((i1022 == 7)) {
							i1022 = 0;
							i1021 = (i1021 + 1);
							if ((i1021 == 512)) {
								i1021 = 0;
								i1020 = (i1020 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp478);

	int32_al[1][7][7][512] tmp482;

	int32_pl i1035;

	int32_pl i1034;

	int32_pl i1033;

	int32_pl i1032;

	int32_pl i1031;

	int32_pl i1030;

	int32_pl i1029;

	int32_pl i1028;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J183, 1, 7, 7, 512) *)
	i1028 = 0;
	i1029 = 0;
	i1030 = 0;
	i1031 = 0;
	for i1032 = [0: 1]{
 		for i1035 = [0: 512]{
 			for i1033 = [0: 7]{
 				for i1034 = [0: 7]{
 					tmp482[i1032][i1033][i1034][i1035] = tmp445[i1028][i1029][i1030][i1031];
					i1031 = (i1031 + 1);
					if ((i1031 == 7)) {
						i1031 = 0;
						i1030 = (i1030 + 1);
						if ((i1030 == 7)) {
							i1030 = 0;
							i1029 = (i1029 + 1);
							if ((i1029 == 512)) {
								i1029 = 0;
								i1028 = (i1028 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp445);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp4(1, 7, 7, 512, tmp482, 10);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J199 + J200 *)
	int32_al[1][7][7][512] tmp484;

	for i0 = [0: 1]{
 		for i1 = [0: 7]{
 			for i2 = [0: 7]{
 				for i3 = [0: 512]{
 					tmp484[i0][i1][i2][i3] = (tmp480[i0][i1][i2][i3] + tmp482[i0][i1][i2][i3]);
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp480);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp482);

	int32_al[1][512][7][7] tmp487;

	int32_pl i1043;

	int32_pl i1042;

	int32_pl i1041;

	int32_pl i1040;

	int32_pl i1039;

	int32_pl i1038;

	int32_pl i1037;

	int32_pl i1036;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J201, 1, 512, 7, 7) *)
	i1036 = 0;
	i1037 = 0;
	i1038 = 0;
	i1039 = 0;
	for i1040 = [0: 1]{
 		for i1042 = [0: 7]{
 			for i1043 = [0: 7]{
 				for i1041 = [0: 512]{
 					tmp487[i1040][i1041][i1042][i1043] = tmp484[i1036][i1037][i1038][i1039];
					i1039 = (i1039 + 1);
					if ((i1039 == 512)) {
						i1039 = 0;
						i1038 = (i1038 + 1);
						if ((i1038 == 7)) {
							i1038 = 0;
							i1037 = (i1037 + 1);
							if ((i1037 == 7)) {
								i1037 = 0;
								i1036 = (i1036 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp484);

	int32_al[1][7][7][512] tmp489;

	int32_pl i1051;

	int32_pl i1050;

	int32_pl i1049;

	int32_pl i1048;

	int32_pl i1047;

	int32_pl i1046;

	int32_pl i1045;

	int32_pl i1044;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J202, 1, 7, 7, 512) *)
	i1044 = 0;
	i1045 = 0;
	i1046 = 0;
	i1047 = 0;
	for i1048 = [0: 1]{
 		for i1051 = [0: 512]{
 			for i1049 = [0: 7]{
 				for i1050 = [0: 7]{
 					tmp489[i1048][i1049][i1050][i1051] = tmp487[i1044][i1045][i1046][i1047];
					i1047 = (i1047 + 1);
					if ((i1047 == 7)) {
						i1047 = 0;
						i1046 = (i1046 + 1);
						if ((i1046 == 7)) {
							i1046 = 0;
							i1045 = (i1045 + 1);
							if ((i1045 == 512)) {
								i1045 = 0;
								i1044 = (i1044 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp487);

	int32_al[1][7][7][512] tmp491;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	Relu4(1, 7, 7, 512, tmp489, tmp491, 10, true);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp489);

	int32_al[1][512][7][7] tmp493;

	int32_pl i1059;

	int32_pl i1058;

	int32_pl i1057;

	int32_pl i1056;

	int32_pl i1055;

	int32_pl i1054;

	int32_pl i1053;

	int32_pl i1052;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J204, 1, 512, 7, 7) *)
	i1052 = 0;
	i1053 = 0;
	i1054 = 0;
	i1055 = 0;
	for i1056 = [0: 1]{
 		for i1058 = [0: 7]{
 			for i1059 = [0: 7]{
 				for i1057 = [0: 512]{
 					tmp493[i1056][i1057][i1058][i1059] = tmp491[i1052][i1053][i1054][i1055];
					i1055 = (i1055 + 1);
					if ((i1055 == 512)) {
						i1055 = 0;
						i1054 = (i1054 + 1);
						if ((i1054 == 7)) {
							i1054 = 0;
							i1053 = (i1053 + 1);
							if ((i1053 == 7)) {
								i1053 = 0;
								i1052 = (i1052 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp491);

	int32_al[1][7][7][512] tmp495;

	int32_pl i1067;

	int32_pl i1066;

	int32_pl i1065;

	int32_pl i1064;

	int32_pl i1063;

	int32_pl i1062;

	int32_pl i1061;

	int32_pl i1060;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J205, 1, 7, 7, 512) *)
	i1060 = 0;
	i1061 = 0;
	i1062 = 0;
	i1063 = 0;
	for i1064 = [0: 1]{
 		for i1067 = [0: 512]{
 			for i1065 = [0: 7]{
 				for i1066 = [0: 7]{
 					tmp495[i1064][i1065][i1066][i1067] = tmp493[i1060][i1061][i1062][i1063];
					i1063 = (i1063 + 1);
					if ((i1063 == 7)) {
						i1063 = 0;
						i1062 = (i1062 + 1);
						if ((i1062 == 7)) {
							i1062 = 0;
							i1061 = (i1061 + 1);
							if ((i1061 == 512)) {
								i1061 = 0;
								i1060 = (i1060 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 7, 7, tmp493);

	int32_al[1][1][1][512] tmp497;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	AvgPool(1, 1, 1, 512, 7, 7, 0, 0, 0, 0, 1, 1, 1, 7, 7, 512, tmp495, tmp497);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 7, 7, 512, tmp495);

	int32_al[1][512][1][1] tmp499;

	int32_pl i1075;

	int32_pl i1074;

	int32_pl i1073;

	int32_pl i1072;

	int32_pl i1071;

	int32_pl i1070;

	int32_pl i1069;

	int32_pl i1068;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J207, 1, 512, 1, 1) *)
	i1068 = 0;
	i1069 = 0;
	i1070 = 0;
	i1071 = 0;
	for i1072 = [0: 1]{
 		for i1074 = [0: 1]{
 			for i1075 = [0: 1]{
 				for i1073 = [0: 512]{
 					tmp499[i1072][i1073][i1074][i1075] = tmp497[i1068][i1069][i1070][i1071];
					i1071 = (i1071 + 1);
					if ((i1071 == 512)) {
						i1071 = 0;
						i1070 = (i1070 + 1);
						if ((i1070 == 1)) {
							i1070 = 0;
							i1069 = (i1069 + 1);
							if ((i1069 == 1)) {
								i1069 = 0;
								i1068 = (i1068 + 1);
							}
						}
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 1, 512, tmp497);

	int32_al[1][512] tmp501;

	int32_pl i1081;

	int32_pl i1080;

	int32_pl i1079;

	int32_pl i1078;

	int32_pl i1077;

	int32_pl i1076;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* reshape(J208, 1, 512) *)
	i1076 = 0;
	i1077 = 0;
	i1078 = 0;
	i1079 = 0;
	for i1080 = [0: 1]{
 		for i1081 = [0: 512]{
 			tmp501[i1080][i1081] = tmp499[i1076][i1077][i1078][i1079];
			i1079 = (i1079 + 1);
			if ((i1079 == 1)) {
				i1079 = 0;
				i1078 = (i1078 + 1);
				if ((i1078 == 1)) {
					i1078 = 0;
					i1077 = (i1077 + 1);
					if ((i1077 == 512)) {
						i1077 = 0;
						i1076 = (i1076 + 1);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 512, 1, 1, tmp499);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(1000, tmp2, 10);

	int32_al[1][1000] tmp504;

	int32_al[512][1000] tmp503;

	int32_pl i1083;

	int32_pl i1082;

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* transpose(fc.weight, [1000, 512] --> [512, 1000]) *)
	for i1082 = [0: 1000]{
 		for i1083 = [0: 512]{
 			tmp503[i1083][i1082] = tmp1[i1082][i1083];
		};
	};
	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* J209 * tmp503 *)
	MatMul2D(1, 512, 1000, tmp501, tmp503, tmp504, false);

	(* {'TFOpName': 'no', 'TFNodeName': 'no'} *)
	(* tmp504 + fc.bias *)
	int32_al[1][1000] tmp505;

	for i0 = [0: 1]{
 		for i1 = [0: 1000]{
 			tmp505[i0][i1] = (tmp504[i0][i1] + tmp2[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(1000, tmp2);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(1000, 512, tmp1);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(1, 512, tmp501);

	ScaleDown2(1, 1000, tmp505, 10);

	EndComputation();

	output(CLIENT, tmp505);

}
