/*
This is an autogenerated file, generated using the EzPC compiler.
*/
#include "globals.h"

#include<vector>
#include<math.h>
#include<cstdlib>
#include<iostream>
#include<fstream>
#include "EzPCFunctionalities.h"

using namespace std;
uint32_t FLOAT_PRECISION = 12;
uint32_t public_lrshift(uint32_t x, uint32_t y){
return (x >> y);
}

int32_t public_lrshift(int32_t x, uint32_t y){
return ((int32_t)(((uint32_t)x) >> y));
}

uint64_t public_lrshift(uint64_t x, uint64_t y){
return (x >> y);
}

int64_t public_lrshift(int64_t x, uint64_t y){
return ((int64_t)(((uint64_t)x) >> y));
}

template<typename T>
vector<T> make_vector(size_t size) {
return std::vector<T>(size);
}

template <typename T, typename... Args>
auto make_vector(size_t first, Args... sizes)
{
auto inner = make_vector<T>(sizes...);
return vector<decltype(inner)>(first, inner);
}

template<typename T>
ostream& operator<< (ostream &os, const vector<T> &v)
{
for(auto it = v.begin (); it != v.end (); ++it) {
os << *it << endl;
}
return os;
}


#include "ezpc.h"

extern int partyNum;
extern string key_directory;
vector<uint64_t*> toFreeMemoryLaterArr;
int NUM_OF_PARTIES;

AESObject* aes_common;
AESObject* aes_indep;
AESObject* aes_a_1;
AESObject* aes_a_2;
AESObject* aes_b_1;
AESObject* aes_b_2;
AESObject* aes_c_1;
AESObject* aes_share_conv_bit_shares_p0_p2;
AESObject* aes_share_conv_bit_shares_p1_p2;
AESObject* aes_share_conv_shares_mod_odd_p0_p2;
AESObject* aes_share_conv_shares_mod_odd_p1_p2;
AESObject* aes_comp_msb_shares_lsb_p0_p2;
AESObject* aes_comp_msb_shares_lsb_p1_p2;
AESObject* aes_comp_msb_shares_bit_vec_p0_p2;
AESObject* aes_comp_msb_shares_bit_vec_p1_p2;
AESObject* aes_conv_opti_a_1;
AESObject* aes_conv_opti_a_2;
AESObject* aes_conv_opti_b_1;
AESObject* aes_conv_opti_b_2;
AESObject* aes_conv_opti_c_1;
ParallelAESObject* aes_parallel;































void MatAddBroadCast2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& A, vector < uint64_t >& B, vector < vector < uint64_t > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
outArr[i1][i2] = A[i1][i2]+B[i2];
}
}
}

void MatAdd2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& A, vector < vector < uint64_t > >& B, vector < vector < uint64_t > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
outArr[i1][i2] = A[i1][i2]+B[i1][i2];
}
}
}

void MatAddBroadCast4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& A, vector < uint64_t >& B, vector < vector < vector < vector < uint64_t > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
outArr[i1][i2][i3][i4] = A[i1][i2][i3][i4]+B[i4];
}
}
}
}
}

void MatAdd4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& A, vector < vector < vector < vector < uint64_t > > > >& B, vector < vector < vector < vector < uint64_t > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
outArr[i1][i2][i3][i4] = A[i1][i2][i3][i4]+B[i1][i2][i3][i4];
}
}
}
}
}

void MatAddBroadCast5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& A, vector < uint64_t >& B, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
outArr[i1][i2][i3][i4][i5] = A[i1][i2][i3][i4][i5]+B[i5];
}
}
}
}
}
}

void MatAdd5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& A, vector < vector < vector < vector < vector < uint64_t > > > > >& B, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
outArr[i1][i2][i3][i4][i5] = A[i1][i2][i3][i4][i5]+B[i1][i2][i3][i4][i5];
}
}
}
}
}
}

void CreateTensor1(int32_t s1, int32_t val, vector < int32_t >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
arr[i1] = val;
}
}

void CreateTensor2(int32_t s1, int32_t s2, int32_t val, vector < vector < int32_t > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
arr[i1][i2] = val;
}
}
}

void CreateTensor3(int32_t s1, int32_t s2, int32_t s3, int32_t val, vector < vector < vector < int32_t > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
arr[i1][i2][i3] = val;
}
}
}
}

void CreateTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t val, vector < vector < vector < vector < int32_t > > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
arr[i1][i2][i3][i4] = val;
}
}
}
}
}

void CreateTensor5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t val, vector < vector < vector < vector < vector < int32_t > > > > >& arr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){
arr[i1][i2][i3][i4][i5] = val;
}
}
}
}
}
}

void CopyTensor1(int32_t s1, vector < uint64_t >& targetArr, vector < uint64_t >& fromArr, vector < uint64_t >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
targetArr[i1] = fromArr[i1];
}
}

void CopyTensor2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& targetArr, vector < vector < uint64_t > >& fromArr, vector < vector < uint64_t > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
targetArr[i1][i2] = fromArr[i1][i2];
}
}
}

void CopyTensor3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& targetArr, vector < vector < vector < uint64_t > > >& fromArr, vector < vector < vector < uint64_t > > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
targetArr[i1][i2][i3] = fromArr[i1][i2][i3];
}
}
}
}

void CopyTensor4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& targetArr, vector < vector < vector < vector < uint64_t > > > >& fromArr, vector < vector < vector < vector < uint64_t > > > >& ignore){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
targetArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
}
}
}
}
}

void CreateIdentity11(int32_t s1, vector < uint64_t >& fromArr, vector < uint64_t >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
newArr[i1] = fromArr[i1];
}
}

void CreateIdentity22(int32_t s1, int32_t s2, vector < vector < uint64_t > >& fromArr, vector < vector < uint64_t > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
newArr[i1][i2] = fromArr[i1][i2];
}
}
}

void CreateIdentity33(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& fromArr, vector < vector < vector < uint64_t > > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
newArr[i1][i2][i3] = fromArr[i1][i2][i3];
}
}
}
}

void CreateIdentity44(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& fromArr, vector < vector < vector < vector < uint64_t > > > >& newArr){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
newArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
}
}
}
}
}

void CreateCopy2211(int32_t s1, int32_t s2, int32_t inps1, int32_t inps2, vector < vector < uint64_t > >& inArr, int32_t perDimSize, vector < int32_t >& beginIdx, vector < int32_t >& sizeIdx, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
outArr[i][j] = inArr[(beginIdx[ (int32_t)0] + i)][(beginIdx[ (int32_t)1] + j)];
}
}
}

void CreateCopy5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, int32_t perDimSize, vector < int32_t >& beginIdx, vector < int32_t >& sizeIdx, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
outArr[i][j][k][l][m] = inArr[(beginIdx[ (int32_t)0] + i)][(beginIdx[ (int32_t)1] + j)][(beginIdx[ (int32_t)2] + k)][(beginIdx[ (int32_t)3] + l)][(beginIdx[ (int32_t)4] + m)];
}
}
}
}
}
}

void Concat2T222(int32_t s1, int32_t s2, int32_t inp1s1, int32_t inp1s2, vector < vector < uint64_t > >& inp1, int32_t inp2s1, int32_t inp2s2, vector < vector < uint64_t > >& inp2, int32_t axis, vector < vector < uint64_t > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2] = inp1[i1][i2];
} else {
outp[i1][i2] = inp2[(i1 - inp1s1)][i2];
}
} else {
if ((i2 < inp1s2)) {
outp[i1][i2] = inp1[i1][i2];
} else {
outp[i1][i2] = inp2[i1][(i2 - inp1s2)];
}
}
}
}
}

void Concat2T444(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inp1s1, int32_t inp1s2, int32_t inp1s3, int32_t inp1s4, vector < vector < vector < vector < uint64_t > > > >& inp1, int32_t inp2s1, int32_t inp2s2, int32_t inp2s3, int32_t inp2s4, vector < vector < vector < vector < uint64_t > > > >& inp2, int32_t axis, vector < vector < vector < vector < uint64_t > > > >& outp){
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
if ((axis ==  (int32_t)0)) {
if ((i1 < inp1s1)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[(i1 - inp1s1)][i2][i3][i4];
}
} else {
if ((axis ==  (int32_t)1)) {
if ((i2 < inp1s2)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][(i2 - inp1s2)][i3][i4];
}
} else {
if ((axis ==  (int32_t)2)) {
if ((i3 < inp1s3)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][i2][(i3 - inp1s3)][i4];
}
} else {
if ((i4 < inp1s4)) {
outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
} else {
outp[i1][i2][i3][i4] = inp2[i1][i2][i3][(i4 - inp1s4)];
}
}
}
}
}
}
}
}
}

void Split44(int32_t O1, int32_t O2, int32_t O3, int32_t O4, int32_t I1, int32_t I2, int32_t I3, int32_t I4, vector < vector < vector < vector < uint64_t > > > >& inp, int32_t axis, int32_t curCount, int32_t total, vector < vector < vector < vector < uint64_t > > > >& out){
for (uint32_t o1 =  (int32_t)0; o1 < O1; o1++){
for (uint32_t o2 =  (int32_t)0; o2 < O2; o2++){
for (uint32_t o3 =  (int32_t)0; o3 < O3; o3++){
for (uint32_t o4 =  (int32_t)0; o4 < O4; o4++){

int32_t i1 = o1;

int32_t i2 = o2;

int32_t i3 = o3;

int32_t i4 = o4;
if ((axis ==  (int32_t)0)) {
i1 = (((I1 / total) * curCount) + o1);
}
if ((axis ==  (int32_t)1)) {
i2 = (((I2 / total) * curCount) + o2);
}
if ((axis ==  (int32_t)2)) {
i3 = (((I3 / total) * curCount) + o3);
}
if ((axis ==  (int32_t)3)) {
i4 = (((I4 / total) * curCount) + o4);
}
out[o1][o2][o3][o4] = inp[i1][i2][i3][i4];
}
}
}
}
}

void Conv2DReshapeFilter(int32_t FH, int32_t FW, int32_t CI, int32_t CO, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[fh][fw][ci][co];
}
}
}
}
}

void Conv2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][co] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void Conv2DReshapeInput(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosH][curPosW][ci];
}
outputArr[((((fh * FW) * CI) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2D(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * newH) * newW);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv2DLoopInner(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t outH, int32_t outW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t GIS = (CI / G);

int32_t GOS = (CO / G);
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t cog =  (int32_t)0; cog < GOS; cog++){
for (uint32_t cig =  (int32_t)0; cig < GIS; cig++){
for (uint32_t g =  (int32_t)0; g < G; g++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){

uint64_t val = funcSSCons( (int64_t)0);

int32_t ci = ((GIS * g) + cig);

int32_t co = ((GOS * g) + cog);

int32_t curPosH = ((strideH * h) - zPadHLeft);
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){

int32_t curPosW = ((strideW * w) - zPadWLeft);
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
if (((((curPosH >=  (int32_t)0) && (curPosW >=  (int32_t)0)) && (curPosH < H)) && (curPosW < W))) {
val = val+funcMult(inputArr[n][curPosH][curPosW][ci], filterArr[fh][fw][(ci / G)][co]);
}
curPosW = (curPosW +  (int32_t)1);
}
curPosH = (curPosH +  (int32_t)1);
}
outArr[n][h][w][co] = outArr[n][h][w][co]+val;
}
}
}
}
}
}
}

void Conv2DLoop(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, outH, outW, G, inputArr, filterArr, outArr);
}

void Conv2DReshapeFilterGroup(int32_t FH, int32_t FW, int32_t CI, int32_t CO, int32_t g, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t CIG = (CI / G);

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){

int32_t linIdx = ((((fh * FW) * CIG) + (fw * CIG)) + ci);
outputArr[co][linIdx] = inputArr[fh][fw][ci][(co + startCO)];
}
}
}
}
}

void Conv2DReshapeMatMulOPGroup(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, int32_t g, int32_t G, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){

int32_t COG = (CO / G);

int32_t startCO = (g * COG);
for (uint32_t co =  (int32_t)0; co < COG; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][(co + startCO)] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void Conv2DReshapeInputGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t g, int32_t G, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;

int32_t CIG = (CI / G);
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);

int32_t startCI = (g * CIG);
for (uint32_t ci =  (int32_t)0; ci < CIG; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= H)) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosH][curPosW][(ci + startCI)];
}
outputArr[((((fh * FW) * CIG) + (fw * CIG)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

}
}

void Conv2DGroup(int32_t N, int32_t H, int32_t W, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideH, int32_t strideW, int32_t G, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t CIG = (CI / G);

int32_t reshapedFilterRows = (CO / G);

int32_t reshapedFilterCols = ((FH * FW) * CIG);

int32_t reshapedIPRows = ((FH * FW) * CIG);

int32_t outH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t outW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = ((N * outH) * outW);
for (uint32_t g =  (int32_t)0; g < G; g++){

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);
Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}
}

void Conv3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CI, int32_t CO, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[fd][fh][fw][ci][co];
}
}
}
}
}
}

void Conv3DReshapeMatMulOP(int32_t N, int32_t finalD, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t d =  (int32_t)0; d < finalD; d++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][d][h][w][co] = inputArr[co][((((((n * finalD) * finalH) * finalW) + ((d * finalH) * finalW)) + (h * finalW)) + w)];
}
}
}
}
}
}

void Conv3DReshapeInput(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadDLeft);

int32_t extremeRightBottomCornerD = ((D -  (int32_t)1) + zPadDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadHLeft);

int32_t extremeRightBottomCornerH = ((H -  (int32_t)1) + zPadHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadWLeft);

int32_t extremeRightBottomCornerW = ((W -  (int32_t)1) + zPadWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= D)) || ((curPosH <  (int32_t)0) || (curPosH >= H))) || ((curPosW <  (int32_t)0) || (curPosW >= W)))) {
val = funcSSCons( (int64_t)0);
} else {
val = inputArr[n][curPosD][curPosH][curPosW][ci];
}
outputArr[((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW + strideW);
}

leftTopCornerH = (leftTopCornerH + strideH);
}

leftTopCornerD = (leftTopCornerD + strideD);
}

}
}

void Conv3D(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t newD = ((((D + (zPadDLeft + zPadDRight)) - FD) / strideD) +  (int32_t)1);

int32_t newH = ((((H + (zPadHLeft + zPadHRight)) - FH) / strideH) +  (int32_t)1);

int32_t newW = ((((W + (zPadWLeft + zPadWRight)) - FW) / strideW) +  (int32_t)1);

int32_t reshapedIPCols = (((N * newD) * newH) * newW);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void Conv3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t fd = (d * strideD); fd < ((d * strideD) + FD); fd++){
for (uint32_t fh = (h * strideH); fh < ((h * strideH) + FH); fh++){
for (uint32_t fw = (w * strideW); fw < ((w * strideW) + FW); fw++){

int32_t curPosD = (fd - zPadDLeft);

int32_t curPosH = (fh - zPadHLeft);

int32_t curPosW = (fw - zPadWLeft);
if (((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W))) {

int32_t curFilterPosD = (fd - (d * strideD));

int32_t curFilterPosH = (fh - (h * strideH));

int32_t curFilterPosW = (fw - (w * strideW));
val = val+funcMult(inputArr[n][curPosD][curPosH][curPosW][ci], filterArr[curFilterPosD][curFilterPosH][curFilterPosW][ci][co]);
}
}
}
}
outArr[n][d][h][w][co] = outArr[n][d][h][w][co]+val;
}
}
}
}
}
}
}

void Conv3DLoop(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t outD = ((((D - FD) + (zPadDLeft + zPadDRight)) / strideD) +  (int32_t)1);

int32_t outH = ((((H - FH) + (zPadHLeft + zPadHRight)) / strideH) +  (int32_t)1);

int32_t outW = ((((W - FW) + (zPadWLeft + zPadWRight)) / strideW) +  (int32_t)1);
Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, outD, outH, outW, inputArr, filterArr, outArr);
}

void ConvTranspose2DReshapeMatMulOP(int32_t N, int32_t finalH, int32_t finalW, int32_t CO, vector < vector < uint64_t > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t h =  (int32_t)0; h < finalH; h++){
for (uint32_t w =  (int32_t)0; w < finalW; w++){
outputArr[n][h][w][co] = inputArr[co][((((n * finalH) * finalW) + (h * finalW)) + w)];
}
}
}
}
}

void ConvTranspose2DReshapeFilter(int32_t FH, int32_t FW, int32_t CO, int32_t CI, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((fh * FW) * CI) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[((FH -  (int32_t)1) - fh)][((FW -  (int32_t)1) - fw)][co][ci];
}
}
}
}
}

void ConvTranspose2DReshapeInput(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if ((((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde)) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if ((((curPosH % strideH) ==  (int32_t)0) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = inputArr[n][idxInputH][idxInputW][ci];
} else {
val = funcSSCons( (int64_t)0);
}
}
outputArr[((((fh * FW) * CI) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

}
}

void ConvTranspose2D(int32_t N, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FH, int32_t FW, int32_t CO, int32_t H, int32_t W, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideH, int32_t strideW, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < vector < vector < vector < uint64_t > > > >& filterArr, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = ((FH * FW) * CI);

int32_t reshapedIPRows = ((FH * FW) * CI);

int32_t reshapedIPCols = ((N * H) * W);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DReshapeFilter(int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t CI, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

int32_t linIdx = ((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci);
outputArr[co][linIdx] = inputArr[((FD -  (int32_t)1) - fd)][((FH -  (int32_t)1) - fh)][((FW -  (int32_t)1) - fw)][co][ci];
}
}
}
}
}
}

void ConvTranspose3DReshapeInput(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t RRows, int32_t RCols, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < uint64_t > >& outputArr){

int32_t linIdxFilterMult =  (int32_t)0;
for (uint32_t n =  (int32_t)0; n < N; n++){

int32_t leftTopCornerD = ( (int32_t)0 - zPadTrDLeft);

int32_t DPrimeTilde = (DPrime + ((DPrime -  (int32_t)1) * (strideD -  (int32_t)1)));

int32_t extremeRightBottomCornerD = ((DPrimeTilde -  (int32_t)1) + zPadTrDRight);
while ((((leftTopCornerD + FD) -  (int32_t)1) <= extremeRightBottomCornerD)) {

int32_t leftTopCornerH = ( (int32_t)0 - zPadTrHLeft);

int32_t HPrimeTilde = (HPrime + ((HPrime -  (int32_t)1) * (strideH -  (int32_t)1)));

int32_t extremeRightBottomCornerH = ((HPrimeTilde -  (int32_t)1) + zPadTrHRight);
while ((((leftTopCornerH + FH) -  (int32_t)1) <= extremeRightBottomCornerH)) {

int32_t leftTopCornerW = ( (int32_t)0 - zPadTrWLeft);

int32_t WPrimeTilde = (WPrime + ((WPrime -  (int32_t)1) * (strideW -  (int32_t)1)));

int32_t extremeRightBottomCornerW = ((WPrimeTilde -  (int32_t)1) + zPadTrWRight);
while ((((leftTopCornerW + FW) -  (int32_t)1) <= extremeRightBottomCornerW)) {
for (uint32_t fd =  (int32_t)0; fd < FD; fd++){
for (uint32_t fh =  (int32_t)0; fh < FH; fh++){
for (uint32_t fw =  (int32_t)0; fw < FW; fw++){

int32_t curPosD = (leftTopCornerD + fd);

int32_t curPosH = (leftTopCornerH + fh);

int32_t curPosW = (leftTopCornerW + fw);

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){
if (((((curPosD <  (int32_t)0) || (curPosD >= DPrimeTilde)) || ((curPosH <  (int32_t)0) || (curPosH >= HPrimeTilde))) || ((curPosW <  (int32_t)0) || (curPosW >= WPrimeTilde)))) {
val = funcSSCons( (int64_t)0);
} else {
if (((((curPosD % strideD) ==  (int32_t)0) && ((curPosH % strideH) ==  (int32_t)0)) && ((curPosW % strideW) ==  (int32_t)0))) {

int32_t idxInputD = (curPosD / strideD);

int32_t idxInputH = (curPosH / strideH);

int32_t idxInputW = (curPosW / strideW);
val = inputArr[n][idxInputD][idxInputH][idxInputW][ci];
} else {
val = funcSSCons( (int64_t)0);
}
}
outputArr[((((((fd * FH) * FW) * CI) + ((fh * FW) * CI)) + (fw * CI)) + ci)][linIdxFilterMult] = val;
}
}
}
}
linIdxFilterMult = (linIdxFilterMult +  (int32_t)1);
leftTopCornerW = (leftTopCornerW +  (int32_t)1);
}

leftTopCornerH = (leftTopCornerH +  (int32_t)1);
}

leftTopCornerD = (leftTopCornerD +  (int32_t)1);
}

}
}

void ConvTranspose3D(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t reshapedFilterRows = CO;

int32_t reshapedFilterCols = (((FD * FH) * FW) * CI);

int32_t reshapedIPRows = (((FD * FH) * FW) * CI);

int32_t reshapedIPCols = (((N * D) * H) * W);

vector < vector < uint64_t > > filterReshaped = make_vector<uint64_t>(reshapedFilterRows, reshapedFilterCols);

vector < vector < uint64_t > > inputReshaped = make_vector<uint64_t>(reshapedIPRows, reshapedIPCols);

vector < vector < uint64_t > > matmulOP = make_vector<uint64_t>(reshapedFilterRows, reshapedIPCols);
ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
ConvTranspose3DReshapeInput(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);
MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, 1);
Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);
ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

void ConvTranspose3DLoopInner(int32_t N, int32_t D, int32_t H, int32_t W, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t zPadDLeft, int32_t zPadDRight, int32_t zPadHLeft, int32_t zPadHRight, int32_t zPadWLeft, int32_t zPadWRight, int32_t strideD, int32_t strideH, int32_t strideW, int32_t outD, int32_t outH, int32_t outW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
for (uint32_t n =  (int32_t)0; n < N; n++){
for (uint32_t co =  (int32_t)0; co < CO; co++){
for (uint32_t d =  (int32_t)0; d < outD; d++){
for (uint32_t h =  (int32_t)0; h < outH; h++){
for (uint32_t w =  (int32_t)0; w < outW; w++){
for (uint32_t ci =  (int32_t)0; ci < CI; ci++){

uint64_t val = funcSSCons( (int64_t)0);
for (uint32_t fd = d; fd < (d + FD); fd++){
for (uint32_t fh = h; fh < (h + FH); fh++){
for (uint32_t fw = w; fw < (w + FW); fw++){

int32_t curPosD = ((fd - zPadDLeft) / strideD);

int32_t curPosH = ((fh - zPadHLeft) / strideH);

int32_t curPosW = ((fw - zPadWLeft) / strideW);
if ((((((((((curPosD >=  (int32_t)0) && (curPosH >=  (int32_t)0)) && (curPosW >=  (int32_t)0)) && (curPosD < D)) && (curPosH < H)) && (curPosW < W)) && (((fd - zPadDLeft) % strideD) ==  (int32_t)0)) && (((fh - zPadHLeft) % strideH) ==  (int32_t)0)) && (((fw - zPadWLeft) % strideW) ==  (int32_t)0))) {

int32_t curFilterPosD = (((FD + d) - fd) -  (int32_t)1);

int32_t curFilterPosH = (((FH + h) - fh) -  (int32_t)1);

int32_t curFilterPosW = (((FW + w) - fw) -  (int32_t)1);
val = val+funcMult(inputArr[n][curPosD][curPosH][curPosW][ci], filterArr[curFilterPosD][curFilterPosH][curFilterPosW][co][ci]);
}
}
}
}
outArr[n][d][h][w][co] = outArr[n][d][h][w][co]+val;
}
}
}
}
}
}
}

void ConvTranspose3DLoop(int32_t N, int32_t DPrime, int32_t HPrime, int32_t WPrime, int32_t CI, int32_t FD, int32_t FH, int32_t FW, int32_t CO, int32_t D, int32_t H, int32_t W, int32_t zPadTrDLeft, int32_t zPadTrDRight, int32_t zPadTrHLeft, int32_t zPadTrHRight, int32_t zPadTrWLeft, int32_t zPadTrWRight, int32_t strideD, int32_t strideH, int32_t strideW, vector < vector < vector < vector < vector < uint64_t > > > > >& inputArr, vector < vector < vector < vector < vector < uint64_t > > > > >& filterArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){
ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, D, H, W, inputArr, filterArr, outArr);
}

void Transpose2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
outArr[i][j] = inArr[j][i];
}
}
}

void Pad442(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, vector < vector < vector < vector < uint64_t > > > >& inpArr, int32_t pads1, int32_t pads2, vector < vector < int32_t > >& paddings, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0][ (int32_t)0];

int32_t rbounds1excl = (s1 - paddings[ (int32_t)0][ (int32_t)1]);

int32_t lbounds2 = paddings[ (int32_t)1][ (int32_t)0];

int32_t rbounds2excl = (s2 - paddings[ (int32_t)1][ (int32_t)1]);

int32_t lbounds3 = paddings[ (int32_t)2][ (int32_t)0];

int32_t rbounds3excl = (s3 - paddings[ (int32_t)2][ (int32_t)1]);

int32_t lbounds4 = paddings[ (int32_t)3][ (int32_t)0];

int32_t rbounds4excl = (s4 - paddings[ (int32_t)3][ (int32_t)1]);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
outArr[i][j][k][l] = inpArr[(i - paddings[ (int32_t)0][ (int32_t)0])][(j - paddings[ (int32_t)1][ (int32_t)0])][(k - paddings[ (int32_t)2][ (int32_t)0])][(l - paddings[ (int32_t)3][ (int32_t)0])];
} else {
outArr[i][j][k][l] = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Pad552(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, int32_t inps1, int32_t inps2, int32_t inps3, int32_t inps4, int32_t inps5, vector < vector < vector < vector < vector < uint64_t > > > > >& inpArr, int32_t pads1, int32_t pads2, vector < vector < int32_t > >& paddings, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0][ (int32_t)0];

int32_t rbounds1excl = (s1 - paddings[ (int32_t)0][ (int32_t)1]);

int32_t lbounds2 = paddings[ (int32_t)1][ (int32_t)0];

int32_t rbounds2excl = (s2 - paddings[ (int32_t)1][ (int32_t)1]);

int32_t lbounds3 = paddings[ (int32_t)2][ (int32_t)0];

int32_t rbounds3excl = (s3 - paddings[ (int32_t)2][ (int32_t)1]);

int32_t lbounds4 = paddings[ (int32_t)3][ (int32_t)0];

int32_t rbounds4excl = (s4 - paddings[ (int32_t)3][ (int32_t)1]);

int32_t lbounds5 = paddings[ (int32_t)4][ (int32_t)0];

int32_t rbounds5excl = (s5 - paddings[ (int32_t)4][ (int32_t)1]);
for (uint32_t i =  (int32_t)0; i < s1; i++){
for (uint32_t j =  (int32_t)0; j < s2; j++){
for (uint32_t k =  (int32_t)0; k < s3; k++){
for (uint32_t l =  (int32_t)0; l < s4; l++){
for (uint32_t m =  (int32_t)0; m < s5; m++){
if (((((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl)) && (m >= lbounds5)) && (m < rbounds5excl))) {
outArr[i][j][k][l][m] = inpArr[(i - paddings[ (int32_t)0][ (int32_t)0])][(j - paddings[ (int32_t)1][ (int32_t)0])][(k - paddings[ (int32_t)2][ (int32_t)0])][(l - paddings[ (int32_t)3][ (int32_t)0])][(m - paddings[ (int32_t)4][ (int32_t)0])];
} else {
outArr[i][j][k][l][m] = funcSSCons( (int64_t)0);
}
}
}
}
}
}
}

void PadONNX441(int32_t o1, int32_t o2, int32_t o3, int32_t o4, int32_t i1, int32_t i2, int32_t i3, int32_t i4, vector < vector < vector < vector < uint64_t > > > >& inpArr, int32_t pads, vector < int32_t >& paddings, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t lbounds1 = paddings[ (int32_t)0];

int32_t rbounds1excl = (o1 - paddings[ (int32_t)4]);

int32_t lbounds2 = paddings[ (int32_t)1];

int32_t rbounds2excl = (o2 - paddings[ (int32_t)5]);

int32_t lbounds3 = paddings[ (int32_t)2];

int32_t rbounds3excl = (o3 - paddings[ (int32_t)6]);

int32_t lbounds4 = paddings[ (int32_t)3];

int32_t rbounds4excl = (o4 - paddings[ (int32_t)7]);
for (uint32_t i =  (int32_t)0; i < o1; i++){
for (uint32_t j =  (int32_t)0; j < o2; j++){
for (uint32_t k =  (int32_t)0; k < o3; k++){
for (uint32_t l =  (int32_t)0; l < o4; l++){
if (((((((((i >= lbounds1) && (i < rbounds1excl)) && (j >= lbounds2)) && (j < rbounds2excl)) && (k >= lbounds3)) && (k < rbounds3excl)) && (l >= lbounds4)) && (l < rbounds4excl))) {
outArr[i][j][k][l] = inpArr[(i - paddings[ (int32_t)0])][(j - paddings[ (int32_t)1])][(k - paddings[ (int32_t)2])][(l - paddings[ (int32_t)3])];
} else {
outArr[i][j][k][l] = funcSSCons( (int64_t)0);
}
}
}
}
}
}

void Squeeze24(int32_t s1, int32_t s2, int32_t dim1, int32_t dim2, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < vector < uint64_t > >& outArr){
for (uint32_t i =  (int32_t)0; i < ins1; i++){
for (uint32_t j =  (int32_t)0; j < ins2; j++){
for (uint32_t k =  (int32_t)0; k < ins3; k++){
for (uint32_t l =  (int32_t)0; l < ins4; l++){

int32_t linIdx = ((((((i * ins2) * ins3) * ins4) + ((j * ins3) * ins4)) + (k * ins4)) + l);

int32_t outIdx1 = (linIdx / s2);

int32_t outIdx2 = (linIdx % s2);
outArr[outIdx1][outIdx2] = inArr[i][j][k][l];
}
}
}
}
}

void FusedBatchNorm4411(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < uint64_t >& multArr, vector < uint64_t >& biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, vector < vector < vector < vector < uint64_t > > > >& outputArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

vector < uint64_t > inArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multExprAns = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
inArrReshaped[linIdx] = inArr[i1][i2][i3][i4];
multArrReshaped[linIdx] = multArr[i4];
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

vector < uint64_t > biasArrScaledUp = make_vector<uint64_t>(s4);
for (uint32_t ii =  (int32_t)0; ii < s4; ii++){
biasArrScaledUp[ii] = biasArr[ii];
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outputArr[i1][i2][i3][i4] = multExprAns[linIdx]+biasArrScaledUp[i4];
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s4, biasArrScaledUp);
}

void FusedBatchNorm5511(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, vector < uint64_t >& multArr, vector < uint64_t >& biasArr, int32_t multExprScaleDownSf, int32_t biasExprScaleUpSf, vector < vector < vector < vector < vector < uint64_t > > > > >& outputArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > inArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multArrReshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > multExprAns = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
inArrReshaped[linIdx] = inArr[i1][i2][i3][i4][i5];
multArrReshaped[linIdx] = multArr[i5];
}
}
}
}
}
ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
if ((multExprScaleDownSf >  (int32_t)0)) {
ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
}

vector < uint64_t > biasArrScaledUp = make_vector<uint64_t>(s5);
for (uint32_t ii =  (int32_t)0; ii < s5; ii++){
biasArrScaledUp[ii] = biasArr[ii];
}
if ((biasExprScaleUpSf >  (int32_t)0)) {
ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
}
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outputArr[i1][i2][i3][i4][i5] = multExprAns[linIdx]+biasArrScaledUp[i5];
}
}
}
}
}
ClearMemSecret1(inpSize, inArrReshaped);
ClearMemSecret1(inpSize, multArrReshaped);
ClearMemSecret1(inpSize, multExprAns);
ClearMemSecret1(s5, biasArrScaledUp);
}

void ElemWiseMul2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr1, vector < vector < uint64_t > >& arr2, vector < vector < uint64_t > >& outArr){

int32_t inpSize = (s1 * s2);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr1Reshaped[linIdx] = arr1[i1][i2];
arr2Reshaped[linIdx] = arr2[i1][i2];
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = outArrReshaped[linIdx];
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr1, vector < vector < vector < vector < uint64_t > > > >& arr2, vector < vector < vector < vector < uint64_t > > > >& outArr){

int32_t inpSize = (((s1 * s2) * s3) * s4);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4];
arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4];
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outArr[i1][i2][i3][i4] = outArrReshaped[linIdx];
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ElemWiseMul5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& arr1, vector < vector < vector < vector < vector < uint64_t > > > > >& arr2, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr){

int32_t inpSize = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > arr1Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > arr2Reshaped = make_vector<uint64_t>(inpSize);

vector < uint64_t > outArrReshaped = make_vector<uint64_t>(inpSize);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4][i5];
arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4][i5];
}
}
}
}
}
ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outArr[i1][i2][i3][i4][i5] = outArrReshaped[linIdx];
}
}
}
}
}
ClearMemSecret1(inpSize, arr1Reshaped);
ClearMemSecret1(inpSize, arr2Reshaped);
ClearMemSecret1(inpSize, outArrReshaped);
}

void ReduceMean24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, vector < vector < vector < vector < uint64_t > > > >& inputArr, vector < int32_t >& axes, vector < vector < uint64_t > >& outputArr){

int32_t divisor = (inS2 * inS3);

int32_t outputSize = (outS1 * outS2);

vector < uint64_t > sumArr = make_vector<uint64_t>(outputSize);

vector < uint64_t > outputArrReshaped = make_vector<uint64_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint32_t i =  (int32_t)0; i < inS2; i++){
for (uint32_t j =  (int32_t)0; j < inS3; j++){
summ = summ+inputArr[i1][i][j][i2];
}
}
sumArr[((i1 * outS2) + i2)] = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
outputArr[i1][i2] = outputArrReshaped[((i1 * outS2) + i2)];
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ReduceMeanONNX24(int32_t outS1, int32_t outS2, int32_t inS1, int32_t inS2, int32_t inS3, int32_t inS4, vector < vector < vector < vector < uint64_t > > > >& inputArr, int32_t axis1, int32_t axis2, vector < vector < uint64_t > >& outputArr){

int32_t divisor = (inS3 * inS4);

int32_t outputSize = (outS1 * outS2);

vector < uint64_t > sumArr = make_vector<uint64_t>(outputSize);

vector < uint64_t > outputArrReshaped = make_vector<uint64_t>(outputSize);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){

uint64_t summ = funcSSCons( (int64_t)0);
for (uint32_t i =  (int32_t)0; i < inS3; i++){
for (uint32_t j =  (int32_t)0; j < inS4; j++){
summ = summ+inputArr[i1][i2][i][j];
}
}
sumArr[((i1 * outS2) + i2)] = summ;
}
}
ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);
for (uint32_t i1 =  (int32_t)0; i1 < outS1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < outS2; i2++){
outputArr[i1][i2] = outputArrReshaped[((i1 * outS2) + i2)];
}
}
ClearMemSecret1(outputSize, sumArr);
ClearMemSecret1(outputSize, outputArrReshaped);
}

void ArgMax1(int32_t outArrS1, int32_t inArrS1, int32_t inArrS2, vector < vector < uint64_t > >& inArr, int32_t dim, vector < uint64_t >& outArr){
ArgMax(inArrS1, inArrS2, inArr, outArr);
}

void ArgMax3(int32_t outs1, int32_t outs2, int32_t outs3, int32_t ins1, int32_t ins2, int32_t ins3, int32_t ins4, vector < vector < vector < vector < uint64_t > > > >& inArr, int32_t dim, vector < vector < vector < uint64_t > > >& outArr){

int32_t size = ((ins1 * ins2) * ins3);

vector < vector < uint64_t > > reshapedInArr = make_vector<uint64_t>(size, ins4);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < ins4; i4++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
reshapedInArr[linIdx][i4] = inArr[i1][i2][i3][i4];
}
}
}
}
ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
for (uint32_t i1 =  (int32_t)0; i1 < ins1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < ins2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < ins3; i3++){

int32_t linIdx = ((((i1 * ins2) * ins3) + (i2 * ins3)) + i3);
outArr[i1][i2][i3] = reshapedOutArr[linIdx];
}
}
}
ClearMemSecret2(size, ins4, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedInArr[linIdx] = inArr[i1][i2];
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = reshapedOutArr[linIdx];
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& inArr, vector < vector < vector < vector < uint64_t > > > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Relu5(int32_t s1, int32_t s2, int32_t s3, int32_t s4, int32_t s5, vector < vector < vector < vector < vector < uint64_t > > > > >& inArr, vector < vector < vector < vector < vector < uint64_t > > > > >& outArr, int32_t sf, uint32_t doTruncation){

int32_t size = ((((s1 * s2) * s3) * s4) * s5);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
reshapedInArr[linIdx] = inArr[i1][i2][i3][i4][i5];
}
}
}
}
}
Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){
for (uint32_t i5 =  (int32_t)0; i5 < s5; i5++){

int32_t linIdx = ((((((((i1 * s2) * s3) * s4) * s5) + (((i2 * s3) * s4) * s5)) + ((i3 * s4) * s5)) + (i4 * s5)) + i5);
outArr[i1][i2][i3][i4][i5] = reshapedOutArr[linIdx];
}
}
}
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void Floor2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& inArr, vector < vector < uint64_t > >& outArr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedInArr = make_vector<uint64_t>(size);

vector < uint64_t > reshapedOutArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedInArr[linIdx] = inArr[i1][i2];
}
}
Floor(size, reshapedInArr, reshapedOutArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
outArr[i1][i2] = reshapedOutArr[linIdx];
}
}
ClearMemSecret1(size, reshapedInArr);
ClearMemSecret1(size, reshapedOutArr);
}

void ScaleUp1(int32_t s1, vector < uint64_t >& arr, int32_t sf){
ScaleUp(s1, arr, sf);
}

void ScaleUp2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedArr[linIdx] = arr[i1][i2];
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr[i1][i2] = reshapedArr[linIdx];
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
reshapedArr[linIdx] = arr[i1][i2][i3];
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
arr[i1][i2][i3] = reshapedArr[linIdx];
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleUp4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedArr[linIdx] = arr[i1][i2][i3][i4];
}
}
}
}
ScaleUp(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr[i1][i2][i3][i4] = reshapedArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown1(int32_t s1, vector < uint64_t >& arr, int32_t sf){
ScaleDown(s1, arr, sf);
}

void ScaleDown2(int32_t s1, int32_t s2, vector < vector < uint64_t > >& arr, int32_t sf){

int32_t size = (s1 * s2);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
reshapedArr[linIdx] = arr[i1][i2];
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){

int32_t linIdx = ((i1 * s2) + i2);
arr[i1][i2] = reshapedArr[linIdx];
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown3(int32_t s1, int32_t s2, int32_t s3, vector < vector < vector < uint64_t > > >& arr, int32_t sf){

int32_t size = ((s1 * s2) * s3);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
reshapedArr[linIdx] = arr[i1][i2][i3];
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){

int32_t linIdx = ((((i1 * s2) * s3) + (i2 * s3)) + i3);
arr[i1][i2][i3] = reshapedArr[linIdx];
}
}
}
ClearMemSecret1(size, reshapedArr);
}

void ScaleDown4(int32_t s1, int32_t s2, int32_t s3, int32_t s4, vector < vector < vector < vector < uint64_t > > > >& arr, int32_t sf){

int32_t size = (((s1 * s2) * s3) * s4);

vector < uint64_t > reshapedArr = make_vector<uint64_t>(size);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
reshapedArr[linIdx] = arr[i1][i2][i3][i4];
}
}
}
}
ScaleDown(size, reshapedArr, sf);
for (uint32_t i1 =  (int32_t)0; i1 < s1; i1++){
for (uint32_t i2 =  (int32_t)0; i2 < s2; i2++){
for (uint32_t i3 =  (int32_t)0; i3 < s3; i3++){
for (uint32_t i4 =  (int32_t)0; i4 < s4; i4++){

int32_t linIdx = ((((((i1 * s2) * s3) * s4) + ((i2 * s3) * s4)) + (i3 * s4)) + i4);
arr[i1][i2][i3][i4] = reshapedArr[linIdx];
}
}
}
}
ClearMemSecret1(size, reshapedArr);
}


extern int instanceID;
int main(int argc, char** argv)
{
parseInputs(argc, argv);
string whichNetwork = "Your Network";
show_porthos_mode();
string indep_key_location, common_key_location;
if(partyNum == PARTY_A){
indep_key_location = key_directory + "/keyA";
common_key_location = key_directory + "/keyAB";
}
else if(partyNum == PARTY_B){
indep_key_location = key_directory + "/keyB";
common_key_location = key_directory + "/keyAB";
}
else{
indep_key_location = key_directory + "/keyB";
common_key_location = key_directory + "/keyAB";
}
aes_indep = new AESObject(indep_key_location);
aes_common = new AESObject(common_key_location);
aes_a_1 = new AESObject(key_directory + "/keyD");
aes_a_2 = new AESObject(key_directory + "/keyD");
aes_b_1 = new AESObject(key_directory + "/keyD");
aes_b_2 = new AESObject(key_directory + "/keyD");
aes_c_1 = new AESObject(key_directory + "/keyD");
aes_share_conv_bit_shares_p0_p2 = new AESObject(key_directory + "/keyD");
aes_share_conv_bit_shares_p1_p2 = new AESObject(key_directory + "/keyD");
aes_share_conv_shares_mod_odd_p0_p2 = new AESObject(key_directory + "/keyD");
aes_share_conv_shares_mod_odd_p1_p2 = new AESObject(key_directory + "/keyD");
aes_comp_msb_shares_lsb_p0_p2 = new AESObject(key_directory + "/keyD");
aes_comp_msb_shares_lsb_p1_p2 = new AESObject(key_directory + "/keyD");
aes_comp_msb_shares_bit_vec_p0_p2 = new AESObject(key_directory + "/keyD");
aes_comp_msb_shares_bit_vec_p1_p2 = new AESObject(key_directory + "/keyD");
aes_conv_opti_a_1 = new AESObject(key_directory + "/keyD");
aes_conv_opti_a_2 = new AESObject(key_directory + "/keyD");
aes_conv_opti_b_1 = new AESObject(key_directory + "/keyD");
aes_conv_opti_b_2 = new AESObject(key_directory + "/keyD");
aes_conv_opti_c_1 = new AESObject(key_directory + "/keyD");
aes_parallel = new ParallelAESObject(common_key_location);

if (MPC)
{
initializeMPC();
initializeCommunication(argv[2], partyNum);
synchronize(2000000); 
}

if (PARALLEL) aes_parallel->precompute();

e_role role = partyNum;


vector < vector < vector < vector < uint64_t > > > > tmp0 = make_vector<uint64_t>( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3);
/* Variable to read the clear value corresponding to the input variable tmp0 at (1931,1-1931,46) */
uint64_t __tmp_in_tmp0;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)224; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)224; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)3; i3++){
if ((role == CLIENT)) {
cin >> __tmp_in_tmp0;
}
tmp0[i0][i1][i2][i3] = (role == CLIENT) ? __tmp_in_tmp0 : 0;
}
}
}
}

vector < vector < vector < vector < uint64_t > > > > tmp1 = make_vector<uint64_t>( (int32_t)7,  (int32_t)7,  (int32_t)3,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp1 at (1934,1-1934,43) */
uint64_t __tmp_in_tmp1;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)7; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)7; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)3; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp1;
}
tmp1[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp1 : 0;
}
}
}
}

vector < uint64_t > tmp2 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp2 at (1937,1-1937,34) */
uint64_t __tmp_in_tmp2;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp2;
}
tmp2[i0] = (role == SERVER) ? __tmp_in_tmp2 : 0;
}

vector < uint64_t > tmp3 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp3 at (1940,1-1940,34) */
uint64_t __tmp_in_tmp3;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp3;
}
tmp3[i0] = (role == SERVER) ? __tmp_in_tmp3 : 0;
}

vector < uint64_t > tmp4 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp4 at (1943,1-1943,34) */
uint64_t __tmp_in_tmp4;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp4;
}
tmp4[i0] = (role == SERVER) ? __tmp_in_tmp4 : 0;
}

vector < uint64_t > tmp5 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp5 at (1946,1-1946,34) */
uint64_t __tmp_in_tmp5;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp5;
}
tmp5[i0] = (role == SERVER) ? __tmp_in_tmp5 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp6 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp6 at (1949,1-1949,45) */
uint64_t __tmp_in_tmp6;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp6;
}
tmp6[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp6 : 0;
}
}
}
}

vector < vector < vector < vector < uint64_t > > > > tmp7 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp7 at (1952,1-1952,44) */
uint64_t __tmp_in_tmp7;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp7;
}
tmp7[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp7 : 0;
}
}
}
}

vector < uint64_t > tmp8 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp8 at (1955,1-1955,34) */
uint64_t __tmp_in_tmp8;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp8;
}
tmp8[i0] = (role == SERVER) ? __tmp_in_tmp8 : 0;
}

vector < uint64_t > tmp9 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp9 at (1958,1-1958,34) */
uint64_t __tmp_in_tmp9;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp9;
}
tmp9[i0] = (role == SERVER) ? __tmp_in_tmp9 : 0;
}

vector < uint64_t > tmp10 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp10 at (1961,1-1961,35) */
uint64_t __tmp_in_tmp10;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp10;
}
tmp10[i0] = (role == SERVER) ? __tmp_in_tmp10 : 0;
}

vector < uint64_t > tmp11 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp11 at (1964,1-1964,35) */
uint64_t __tmp_in_tmp11;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp11;
}
tmp11[i0] = (role == SERVER) ? __tmp_in_tmp11 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp12 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp12 at (1967,1-1967,45) */
uint64_t __tmp_in_tmp12;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp12;
}
tmp12[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp12 : 0;
}
}
}
}

vector < uint64_t > tmp13 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp13 at (1970,1-1970,35) */
uint64_t __tmp_in_tmp13;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp13;
}
tmp13[i0] = (role == SERVER) ? __tmp_in_tmp13 : 0;
}

vector < uint64_t > tmp14 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp14 at (1973,1-1973,35) */
uint64_t __tmp_in_tmp14;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp14;
}
tmp14[i0] = (role == SERVER) ? __tmp_in_tmp14 : 0;
}

vector < uint64_t > tmp15 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp15 at (1976,1-1976,35) */
uint64_t __tmp_in_tmp15;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp15;
}
tmp15[i0] = (role == SERVER) ? __tmp_in_tmp15 : 0;
}

vector < uint64_t > tmp16 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp16 at (1979,1-1979,35) */
uint64_t __tmp_in_tmp16;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp16;
}
tmp16[i0] = (role == SERVER) ? __tmp_in_tmp16 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp17 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp17 at (1982,1-1982,46) */
uint64_t __tmp_in_tmp17;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp17;
}
tmp17[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp17 : 0;
}
}
}
}

vector < uint64_t > tmp18 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp18 at (1985,1-1985,36) */
uint64_t __tmp_in_tmp18;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp18;
}
tmp18[i0] = (role == SERVER) ? __tmp_in_tmp18 : 0;
}

vector < uint64_t > tmp19 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp19 at (1988,1-1988,36) */
uint64_t __tmp_in_tmp19;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp19;
}
tmp19[i0] = (role == SERVER) ? __tmp_in_tmp19 : 0;
}

vector < uint64_t > tmp20 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp20 at (1991,1-1991,36) */
uint64_t __tmp_in_tmp20;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp20;
}
tmp20[i0] = (role == SERVER) ? __tmp_in_tmp20 : 0;
}

vector < uint64_t > tmp21 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp21 at (1994,1-1994,36) */
uint64_t __tmp_in_tmp21;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp21;
}
tmp21[i0] = (role == SERVER) ? __tmp_in_tmp21 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp22 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp22 at (1997,1-1997,46) */
uint64_t __tmp_in_tmp22;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp22;
}
tmp22[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp22 : 0;
}
}
}
}

vector < uint64_t > tmp23 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp23 at (2000,1-2000,35) */
uint64_t __tmp_in_tmp23;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp23;
}
tmp23[i0] = (role == SERVER) ? __tmp_in_tmp23 : 0;
}

vector < uint64_t > tmp24 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp24 at (2003,1-2003,35) */
uint64_t __tmp_in_tmp24;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp24;
}
tmp24[i0] = (role == SERVER) ? __tmp_in_tmp24 : 0;
}

vector < uint64_t > tmp25 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp25 at (2006,1-2006,35) */
uint64_t __tmp_in_tmp25;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp25;
}
tmp25[i0] = (role == SERVER) ? __tmp_in_tmp25 : 0;
}

vector < uint64_t > tmp26 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp26 at (2009,1-2009,35) */
uint64_t __tmp_in_tmp26;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp26;
}
tmp26[i0] = (role == SERVER) ? __tmp_in_tmp26 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp27 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp27 at (2012,1-2012,45) */
uint64_t __tmp_in_tmp27;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp27;
}
tmp27[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp27 : 0;
}
}
}
}

vector < uint64_t > tmp28 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp28 at (2015,1-2015,35) */
uint64_t __tmp_in_tmp28;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp28;
}
tmp28[i0] = (role == SERVER) ? __tmp_in_tmp28 : 0;
}

vector < uint64_t > tmp29 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp29 at (2018,1-2018,35) */
uint64_t __tmp_in_tmp29;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp29;
}
tmp29[i0] = (role == SERVER) ? __tmp_in_tmp29 : 0;
}

vector < uint64_t > tmp30 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp30 at (2021,1-2021,35) */
uint64_t __tmp_in_tmp30;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp30;
}
tmp30[i0] = (role == SERVER) ? __tmp_in_tmp30 : 0;
}

vector < uint64_t > tmp31 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp31 at (2024,1-2024,35) */
uint64_t __tmp_in_tmp31;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp31;
}
tmp31[i0] = (role == SERVER) ? __tmp_in_tmp31 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp32 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp32 at (2027,1-2027,46) */
uint64_t __tmp_in_tmp32;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp32;
}
tmp32[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp32 : 0;
}
}
}
}

vector < uint64_t > tmp33 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp33 at (2030,1-2030,36) */
uint64_t __tmp_in_tmp33;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp33;
}
tmp33[i0] = (role == SERVER) ? __tmp_in_tmp33 : 0;
}

vector < uint64_t > tmp34 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp34 at (2033,1-2033,36) */
uint64_t __tmp_in_tmp34;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp34;
}
tmp34[i0] = (role == SERVER) ? __tmp_in_tmp34 : 0;
}

vector < uint64_t > tmp35 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp35 at (2036,1-2036,36) */
uint64_t __tmp_in_tmp35;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp35;
}
tmp35[i0] = (role == SERVER) ? __tmp_in_tmp35 : 0;
}

vector < uint64_t > tmp36 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp36 at (2039,1-2039,36) */
uint64_t __tmp_in_tmp36;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp36;
}
tmp36[i0] = (role == SERVER) ? __tmp_in_tmp36 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp37 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp37 at (2042,1-2042,46) */
uint64_t __tmp_in_tmp37;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp37;
}
tmp37[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp37 : 0;
}
}
}
}

vector < uint64_t > tmp38 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp38 at (2045,1-2045,35) */
uint64_t __tmp_in_tmp38;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp38;
}
tmp38[i0] = (role == SERVER) ? __tmp_in_tmp38 : 0;
}

vector < uint64_t > tmp39 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp39 at (2048,1-2048,35) */
uint64_t __tmp_in_tmp39;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp39;
}
tmp39[i0] = (role == SERVER) ? __tmp_in_tmp39 : 0;
}

vector < uint64_t > tmp40 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp40 at (2051,1-2051,35) */
uint64_t __tmp_in_tmp40;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp40;
}
tmp40[i0] = (role == SERVER) ? __tmp_in_tmp40 : 0;
}

vector < uint64_t > tmp41 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp41 at (2054,1-2054,35) */
uint64_t __tmp_in_tmp41;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp41;
}
tmp41[i0] = (role == SERVER) ? __tmp_in_tmp41 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp42 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp42 at (2057,1-2057,45) */
uint64_t __tmp_in_tmp42;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)64; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp42;
}
tmp42[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp42 : 0;
}
}
}
}

vector < uint64_t > tmp43 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp43 at (2060,1-2060,35) */
uint64_t __tmp_in_tmp43;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp43;
}
tmp43[i0] = (role == SERVER) ? __tmp_in_tmp43 : 0;
}

vector < uint64_t > tmp44 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp44 at (2063,1-2063,35) */
uint64_t __tmp_in_tmp44;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp44;
}
tmp44[i0] = (role == SERVER) ? __tmp_in_tmp44 : 0;
}

vector < uint64_t > tmp45 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp45 at (2066,1-2066,35) */
uint64_t __tmp_in_tmp45;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp45;
}
tmp45[i0] = (role == SERVER) ? __tmp_in_tmp45 : 0;
}

vector < uint64_t > tmp46 = make_vector<uint64_t>( (int32_t)64);
/* Variable to read the clear value corresponding to the input variable tmp46 at (2069,1-2069,35) */
uint64_t __tmp_in_tmp46;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)64; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp46;
}
tmp46[i0] = (role == SERVER) ? __tmp_in_tmp46 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp47 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp47 at (2072,1-2072,46) */
uint64_t __tmp_in_tmp47;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)64; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp47;
}
tmp47[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp47 : 0;
}
}
}
}

vector < uint64_t > tmp48 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp48 at (2075,1-2075,36) */
uint64_t __tmp_in_tmp48;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp48;
}
tmp48[i0] = (role == SERVER) ? __tmp_in_tmp48 : 0;
}

vector < uint64_t > tmp49 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp49 at (2078,1-2078,36) */
uint64_t __tmp_in_tmp49;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp49;
}
tmp49[i0] = (role == SERVER) ? __tmp_in_tmp49 : 0;
}

vector < uint64_t > tmp50 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp50 at (2081,1-2081,36) */
uint64_t __tmp_in_tmp50;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp50;
}
tmp50[i0] = (role == SERVER) ? __tmp_in_tmp50 : 0;
}

vector < uint64_t > tmp51 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp51 at (2084,1-2084,36) */
uint64_t __tmp_in_tmp51;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp51;
}
tmp51[i0] = (role == SERVER) ? __tmp_in_tmp51 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp52 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp52 at (2087,1-2087,47) */
uint64_t __tmp_in_tmp52;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp52;
}
tmp52[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp52 : 0;
}
}
}
}

vector < vector < vector < vector < uint64_t > > > > tmp53 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp53 at (2090,1-2090,47) */
uint64_t __tmp_in_tmp53;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp53;
}
tmp53[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp53 : 0;
}
}
}
}

vector < uint64_t > tmp54 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp54 at (2093,1-2093,36) */
uint64_t __tmp_in_tmp54;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp54;
}
tmp54[i0] = (role == SERVER) ? __tmp_in_tmp54 : 0;
}

vector < uint64_t > tmp55 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp55 at (2096,1-2096,36) */
uint64_t __tmp_in_tmp55;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp55;
}
tmp55[i0] = (role == SERVER) ? __tmp_in_tmp55 : 0;
}

vector < uint64_t > tmp56 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp56 at (2099,1-2099,36) */
uint64_t __tmp_in_tmp56;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp56;
}
tmp56[i0] = (role == SERVER) ? __tmp_in_tmp56 : 0;
}

vector < uint64_t > tmp57 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp57 at (2102,1-2102,36) */
uint64_t __tmp_in_tmp57;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp57;
}
tmp57[i0] = (role == SERVER) ? __tmp_in_tmp57 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp58 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp58 at (2105,1-2105,47) */
uint64_t __tmp_in_tmp58;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp58;
}
tmp58[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp58 : 0;
}
}
}
}

vector < uint64_t > tmp59 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp59 at (2108,1-2108,36) */
uint64_t __tmp_in_tmp59;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp59;
}
tmp59[i0] = (role == SERVER) ? __tmp_in_tmp59 : 0;
}

vector < uint64_t > tmp60 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp60 at (2111,1-2111,36) */
uint64_t __tmp_in_tmp60;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp60;
}
tmp60[i0] = (role == SERVER) ? __tmp_in_tmp60 : 0;
}

vector < uint64_t > tmp61 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp61 at (2114,1-2114,36) */
uint64_t __tmp_in_tmp61;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp61;
}
tmp61[i0] = (role == SERVER) ? __tmp_in_tmp61 : 0;
}

vector < uint64_t > tmp62 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp62 at (2117,1-2117,36) */
uint64_t __tmp_in_tmp62;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp62;
}
tmp62[i0] = (role == SERVER) ? __tmp_in_tmp62 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp63 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp63 at (2120,1-2120,47) */
uint64_t __tmp_in_tmp63;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp63;
}
tmp63[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp63 : 0;
}
}
}
}

vector < uint64_t > tmp64 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp64 at (2123,1-2123,36) */
uint64_t __tmp_in_tmp64;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp64;
}
tmp64[i0] = (role == SERVER) ? __tmp_in_tmp64 : 0;
}

vector < uint64_t > tmp65 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp65 at (2126,1-2126,36) */
uint64_t __tmp_in_tmp65;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp65;
}
tmp65[i0] = (role == SERVER) ? __tmp_in_tmp65 : 0;
}

vector < uint64_t > tmp66 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp66 at (2129,1-2129,36) */
uint64_t __tmp_in_tmp66;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp66;
}
tmp66[i0] = (role == SERVER) ? __tmp_in_tmp66 : 0;
}

vector < uint64_t > tmp67 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp67 at (2132,1-2132,36) */
uint64_t __tmp_in_tmp67;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp67;
}
tmp67[i0] = (role == SERVER) ? __tmp_in_tmp67 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp68 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp68 at (2135,1-2135,47) */
uint64_t __tmp_in_tmp68;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp68;
}
tmp68[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp68 : 0;
}
}
}
}

vector < uint64_t > tmp69 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp69 at (2138,1-2138,36) */
uint64_t __tmp_in_tmp69;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp69;
}
tmp69[i0] = (role == SERVER) ? __tmp_in_tmp69 : 0;
}

vector < uint64_t > tmp70 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp70 at (2141,1-2141,36) */
uint64_t __tmp_in_tmp70;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp70;
}
tmp70[i0] = (role == SERVER) ? __tmp_in_tmp70 : 0;
}

vector < uint64_t > tmp71 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp71 at (2144,1-2144,36) */
uint64_t __tmp_in_tmp71;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp71;
}
tmp71[i0] = (role == SERVER) ? __tmp_in_tmp71 : 0;
}

vector < uint64_t > tmp72 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp72 at (2147,1-2147,36) */
uint64_t __tmp_in_tmp72;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp72;
}
tmp72[i0] = (role == SERVER) ? __tmp_in_tmp72 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp73 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp73 at (2150,1-2150,47) */
uint64_t __tmp_in_tmp73;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp73;
}
tmp73[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp73 : 0;
}
}
}
}

vector < uint64_t > tmp74 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp74 at (2153,1-2153,36) */
uint64_t __tmp_in_tmp74;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp74;
}
tmp74[i0] = (role == SERVER) ? __tmp_in_tmp74 : 0;
}

vector < uint64_t > tmp75 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp75 at (2156,1-2156,36) */
uint64_t __tmp_in_tmp75;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp75;
}
tmp75[i0] = (role == SERVER) ? __tmp_in_tmp75 : 0;
}

vector < uint64_t > tmp76 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp76 at (2159,1-2159,36) */
uint64_t __tmp_in_tmp76;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp76;
}
tmp76[i0] = (role == SERVER) ? __tmp_in_tmp76 : 0;
}

vector < uint64_t > tmp77 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp77 at (2162,1-2162,36) */
uint64_t __tmp_in_tmp77;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp77;
}
tmp77[i0] = (role == SERVER) ? __tmp_in_tmp77 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp78 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp78 at (2165,1-2165,47) */
uint64_t __tmp_in_tmp78;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp78;
}
tmp78[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp78 : 0;
}
}
}
}

vector < uint64_t > tmp79 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp79 at (2168,1-2168,36) */
uint64_t __tmp_in_tmp79;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp79;
}
tmp79[i0] = (role == SERVER) ? __tmp_in_tmp79 : 0;
}

vector < uint64_t > tmp80 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp80 at (2171,1-2171,36) */
uint64_t __tmp_in_tmp80;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp80;
}
tmp80[i0] = (role == SERVER) ? __tmp_in_tmp80 : 0;
}

vector < uint64_t > tmp81 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp81 at (2174,1-2174,36) */
uint64_t __tmp_in_tmp81;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp81;
}
tmp81[i0] = (role == SERVER) ? __tmp_in_tmp81 : 0;
}

vector < uint64_t > tmp82 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp82 at (2177,1-2177,36) */
uint64_t __tmp_in_tmp82;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp82;
}
tmp82[i0] = (role == SERVER) ? __tmp_in_tmp82 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp83 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp83 at (2180,1-2180,47) */
uint64_t __tmp_in_tmp83;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp83;
}
tmp83[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp83 : 0;
}
}
}
}

vector < uint64_t > tmp84 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp84 at (2183,1-2183,36) */
uint64_t __tmp_in_tmp84;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp84;
}
tmp84[i0] = (role == SERVER) ? __tmp_in_tmp84 : 0;
}

vector < uint64_t > tmp85 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp85 at (2186,1-2186,36) */
uint64_t __tmp_in_tmp85;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp85;
}
tmp85[i0] = (role == SERVER) ? __tmp_in_tmp85 : 0;
}

vector < uint64_t > tmp86 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp86 at (2189,1-2189,36) */
uint64_t __tmp_in_tmp86;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp86;
}
tmp86[i0] = (role == SERVER) ? __tmp_in_tmp86 : 0;
}

vector < uint64_t > tmp87 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp87 at (2192,1-2192,36) */
uint64_t __tmp_in_tmp87;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp87;
}
tmp87[i0] = (role == SERVER) ? __tmp_in_tmp87 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp88 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp88 at (2195,1-2195,47) */
uint64_t __tmp_in_tmp88;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp88;
}
tmp88[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp88 : 0;
}
}
}
}

vector < uint64_t > tmp89 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp89 at (2198,1-2198,36) */
uint64_t __tmp_in_tmp89;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp89;
}
tmp89[i0] = (role == SERVER) ? __tmp_in_tmp89 : 0;
}

vector < uint64_t > tmp90 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp90 at (2201,1-2201,36) */
uint64_t __tmp_in_tmp90;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp90;
}
tmp90[i0] = (role == SERVER) ? __tmp_in_tmp90 : 0;
}

vector < uint64_t > tmp91 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp91 at (2204,1-2204,36) */
uint64_t __tmp_in_tmp91;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp91;
}
tmp91[i0] = (role == SERVER) ? __tmp_in_tmp91 : 0;
}

vector < uint64_t > tmp92 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp92 at (2207,1-2207,36) */
uint64_t __tmp_in_tmp92;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp92;
}
tmp92[i0] = (role == SERVER) ? __tmp_in_tmp92 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp93 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp93 at (2210,1-2210,47) */
uint64_t __tmp_in_tmp93;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp93;
}
tmp93[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp93 : 0;
}
}
}
}

vector < uint64_t > tmp94 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp94 at (2213,1-2213,36) */
uint64_t __tmp_in_tmp94;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp94;
}
tmp94[i0] = (role == SERVER) ? __tmp_in_tmp94 : 0;
}

vector < uint64_t > tmp95 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp95 at (2216,1-2216,36) */
uint64_t __tmp_in_tmp95;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp95;
}
tmp95[i0] = (role == SERVER) ? __tmp_in_tmp95 : 0;
}

vector < uint64_t > tmp96 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp96 at (2219,1-2219,36) */
uint64_t __tmp_in_tmp96;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp96;
}
tmp96[i0] = (role == SERVER) ? __tmp_in_tmp96 : 0;
}

vector < uint64_t > tmp97 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp97 at (2222,1-2222,36) */
uint64_t __tmp_in_tmp97;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp97;
}
tmp97[i0] = (role == SERVER) ? __tmp_in_tmp97 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp98 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp98 at (2225,1-2225,47) */
uint64_t __tmp_in_tmp98;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp98;
}
tmp98[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp98 : 0;
}
}
}
}

vector < uint64_t > tmp99 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp99 at (2228,1-2228,36) */
uint64_t __tmp_in_tmp99;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp99;
}
tmp99[i0] = (role == SERVER) ? __tmp_in_tmp99 : 0;
}

vector < uint64_t > tmp100 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp100 at (2231,1-2231,37) */
uint64_t __tmp_in_tmp100;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp100;
}
tmp100[i0] = (role == SERVER) ? __tmp_in_tmp100 : 0;
}

vector < uint64_t > tmp101 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp101 at (2234,1-2234,37) */
uint64_t __tmp_in_tmp101;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp101;
}
tmp101[i0] = (role == SERVER) ? __tmp_in_tmp101 : 0;
}

vector < uint64_t > tmp102 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp102 at (2237,1-2237,37) */
uint64_t __tmp_in_tmp102;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp102;
}
tmp102[i0] = (role == SERVER) ? __tmp_in_tmp102 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp103 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp103 at (2240,1-2240,48) */
uint64_t __tmp_in_tmp103;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)128; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp103;
}
tmp103[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp103 : 0;
}
}
}
}

vector < uint64_t > tmp104 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp104 at (2243,1-2243,37) */
uint64_t __tmp_in_tmp104;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp104;
}
tmp104[i0] = (role == SERVER) ? __tmp_in_tmp104 : 0;
}

vector < uint64_t > tmp105 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp105 at (2246,1-2246,37) */
uint64_t __tmp_in_tmp105;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp105;
}
tmp105[i0] = (role == SERVER) ? __tmp_in_tmp105 : 0;
}

vector < uint64_t > tmp106 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp106 at (2249,1-2249,37) */
uint64_t __tmp_in_tmp106;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp106;
}
tmp106[i0] = (role == SERVER) ? __tmp_in_tmp106 : 0;
}

vector < uint64_t > tmp107 = make_vector<uint64_t>( (int32_t)128);
/* Variable to read the clear value corresponding to the input variable tmp107 at (2252,1-2252,37) */
uint64_t __tmp_in_tmp107;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)128; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp107;
}
tmp107[i0] = (role == SERVER) ? __tmp_in_tmp107 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp108 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp108 at (2255,1-2255,48) */
uint64_t __tmp_in_tmp108;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)128; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp108;
}
tmp108[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp108 : 0;
}
}
}
}

vector < uint64_t > tmp109 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp109 at (2258,1-2258,37) */
uint64_t __tmp_in_tmp109;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp109;
}
tmp109[i0] = (role == SERVER) ? __tmp_in_tmp109 : 0;
}

vector < uint64_t > tmp110 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp110 at (2261,1-2261,37) */
uint64_t __tmp_in_tmp110;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp110;
}
tmp110[i0] = (role == SERVER) ? __tmp_in_tmp110 : 0;
}

vector < uint64_t > tmp111 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp111 at (2264,1-2264,37) */
uint64_t __tmp_in_tmp111;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp111;
}
tmp111[i0] = (role == SERVER) ? __tmp_in_tmp111 : 0;
}

vector < uint64_t > tmp112 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp112 at (2267,1-2267,37) */
uint64_t __tmp_in_tmp112;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp112;
}
tmp112[i0] = (role == SERVER) ? __tmp_in_tmp112 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp113 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp113 at (2270,1-2270,49) */
uint64_t __tmp_in_tmp113;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1024; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp113;
}
tmp113[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp113 : 0;
}
}
}
}

vector < vector < vector < vector < uint64_t > > > > tmp114 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp114 at (2273,1-2273,48) */
uint64_t __tmp_in_tmp114;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp114;
}
tmp114[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp114 : 0;
}
}
}
}

vector < uint64_t > tmp115 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp115 at (2276,1-2276,37) */
uint64_t __tmp_in_tmp115;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp115;
}
tmp115[i0] = (role == SERVER) ? __tmp_in_tmp115 : 0;
}

vector < uint64_t > tmp116 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp116 at (2279,1-2279,37) */
uint64_t __tmp_in_tmp116;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp116;
}
tmp116[i0] = (role == SERVER) ? __tmp_in_tmp116 : 0;
}

vector < uint64_t > tmp117 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp117 at (2282,1-2282,37) */
uint64_t __tmp_in_tmp117;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp117;
}
tmp117[i0] = (role == SERVER) ? __tmp_in_tmp117 : 0;
}

vector < uint64_t > tmp118 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp118 at (2285,1-2285,37) */
uint64_t __tmp_in_tmp118;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp118;
}
tmp118[i0] = (role == SERVER) ? __tmp_in_tmp118 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp119 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp119 at (2288,1-2288,48) */
uint64_t __tmp_in_tmp119;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp119;
}
tmp119[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp119 : 0;
}
}
}
}

vector < uint64_t > tmp120 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp120 at (2291,1-2291,37) */
uint64_t __tmp_in_tmp120;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp120;
}
tmp120[i0] = (role == SERVER) ? __tmp_in_tmp120 : 0;
}

vector < uint64_t > tmp121 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp121 at (2294,1-2294,37) */
uint64_t __tmp_in_tmp121;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp121;
}
tmp121[i0] = (role == SERVER) ? __tmp_in_tmp121 : 0;
}

vector < uint64_t > tmp122 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp122 at (2297,1-2297,37) */
uint64_t __tmp_in_tmp122;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp122;
}
tmp122[i0] = (role == SERVER) ? __tmp_in_tmp122 : 0;
}

vector < uint64_t > tmp123 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp123 at (2300,1-2300,37) */
uint64_t __tmp_in_tmp123;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp123;
}
tmp123[i0] = (role == SERVER) ? __tmp_in_tmp123 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp124 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp124 at (2303,1-2303,49) */
uint64_t __tmp_in_tmp124;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1024; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp124;
}
tmp124[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp124 : 0;
}
}
}
}

vector < uint64_t > tmp125 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp125 at (2306,1-2306,38) */
uint64_t __tmp_in_tmp125;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp125;
}
tmp125[i0] = (role == SERVER) ? __tmp_in_tmp125 : 0;
}

vector < uint64_t > tmp126 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp126 at (2309,1-2309,38) */
uint64_t __tmp_in_tmp126;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp126;
}
tmp126[i0] = (role == SERVER) ? __tmp_in_tmp126 : 0;
}

vector < uint64_t > tmp127 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp127 at (2312,1-2312,38) */
uint64_t __tmp_in_tmp127;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp127;
}
tmp127[i0] = (role == SERVER) ? __tmp_in_tmp127 : 0;
}

vector < uint64_t > tmp128 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp128 at (2315,1-2315,38) */
uint64_t __tmp_in_tmp128;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp128;
}
tmp128[i0] = (role == SERVER) ? __tmp_in_tmp128 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp129 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp129 at (2318,1-2318,49) */
uint64_t __tmp_in_tmp129;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp129;
}
tmp129[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp129 : 0;
}
}
}
}

vector < uint64_t > tmp130 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp130 at (2321,1-2321,37) */
uint64_t __tmp_in_tmp130;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp130;
}
tmp130[i0] = (role == SERVER) ? __tmp_in_tmp130 : 0;
}

vector < uint64_t > tmp131 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp131 at (2324,1-2324,37) */
uint64_t __tmp_in_tmp131;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp131;
}
tmp131[i0] = (role == SERVER) ? __tmp_in_tmp131 : 0;
}

vector < uint64_t > tmp132 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp132 at (2327,1-2327,37) */
uint64_t __tmp_in_tmp132;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp132;
}
tmp132[i0] = (role == SERVER) ? __tmp_in_tmp132 : 0;
}

vector < uint64_t > tmp133 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp133 at (2330,1-2330,37) */
uint64_t __tmp_in_tmp133;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp133;
}
tmp133[i0] = (role == SERVER) ? __tmp_in_tmp133 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp134 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp134 at (2333,1-2333,48) */
uint64_t __tmp_in_tmp134;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp134;
}
tmp134[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp134 : 0;
}
}
}
}

vector < uint64_t > tmp135 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp135 at (2336,1-2336,37) */
uint64_t __tmp_in_tmp135;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp135;
}
tmp135[i0] = (role == SERVER) ? __tmp_in_tmp135 : 0;
}

vector < uint64_t > tmp136 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp136 at (2339,1-2339,37) */
uint64_t __tmp_in_tmp136;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp136;
}
tmp136[i0] = (role == SERVER) ? __tmp_in_tmp136 : 0;
}

vector < uint64_t > tmp137 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp137 at (2342,1-2342,37) */
uint64_t __tmp_in_tmp137;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp137;
}
tmp137[i0] = (role == SERVER) ? __tmp_in_tmp137 : 0;
}

vector < uint64_t > tmp138 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp138 at (2345,1-2345,37) */
uint64_t __tmp_in_tmp138;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp138;
}
tmp138[i0] = (role == SERVER) ? __tmp_in_tmp138 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp139 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp139 at (2348,1-2348,49) */
uint64_t __tmp_in_tmp139;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1024; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp139;
}
tmp139[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp139 : 0;
}
}
}
}

vector < uint64_t > tmp140 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp140 at (2351,1-2351,38) */
uint64_t __tmp_in_tmp140;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp140;
}
tmp140[i0] = (role == SERVER) ? __tmp_in_tmp140 : 0;
}

vector < uint64_t > tmp141 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp141 at (2354,1-2354,38) */
uint64_t __tmp_in_tmp141;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp141;
}
tmp141[i0] = (role == SERVER) ? __tmp_in_tmp141 : 0;
}

vector < uint64_t > tmp142 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp142 at (2357,1-2357,38) */
uint64_t __tmp_in_tmp142;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp142;
}
tmp142[i0] = (role == SERVER) ? __tmp_in_tmp142 : 0;
}

vector < uint64_t > tmp143 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp143 at (2360,1-2360,38) */
uint64_t __tmp_in_tmp143;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp143;
}
tmp143[i0] = (role == SERVER) ? __tmp_in_tmp143 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp144 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp144 at (2363,1-2363,49) */
uint64_t __tmp_in_tmp144;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp144;
}
tmp144[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp144 : 0;
}
}
}
}

vector < uint64_t > tmp145 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp145 at (2366,1-2366,37) */
uint64_t __tmp_in_tmp145;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp145;
}
tmp145[i0] = (role == SERVER) ? __tmp_in_tmp145 : 0;
}

vector < uint64_t > tmp146 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp146 at (2369,1-2369,37) */
uint64_t __tmp_in_tmp146;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp146;
}
tmp146[i0] = (role == SERVER) ? __tmp_in_tmp146 : 0;
}

vector < uint64_t > tmp147 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp147 at (2372,1-2372,37) */
uint64_t __tmp_in_tmp147;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp147;
}
tmp147[i0] = (role == SERVER) ? __tmp_in_tmp147 : 0;
}

vector < uint64_t > tmp148 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp148 at (2375,1-2375,37) */
uint64_t __tmp_in_tmp148;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp148;
}
tmp148[i0] = (role == SERVER) ? __tmp_in_tmp148 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp149 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp149 at (2378,1-2378,48) */
uint64_t __tmp_in_tmp149;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp149;
}
tmp149[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp149 : 0;
}
}
}
}

vector < uint64_t > tmp150 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp150 at (2381,1-2381,37) */
uint64_t __tmp_in_tmp150;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp150;
}
tmp150[i0] = (role == SERVER) ? __tmp_in_tmp150 : 0;
}

vector < uint64_t > tmp151 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp151 at (2384,1-2384,37) */
uint64_t __tmp_in_tmp151;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp151;
}
tmp151[i0] = (role == SERVER) ? __tmp_in_tmp151 : 0;
}

vector < uint64_t > tmp152 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp152 at (2387,1-2387,37) */
uint64_t __tmp_in_tmp152;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp152;
}
tmp152[i0] = (role == SERVER) ? __tmp_in_tmp152 : 0;
}

vector < uint64_t > tmp153 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp153 at (2390,1-2390,37) */
uint64_t __tmp_in_tmp153;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp153;
}
tmp153[i0] = (role == SERVER) ? __tmp_in_tmp153 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp154 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp154 at (2393,1-2393,49) */
uint64_t __tmp_in_tmp154;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1024; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp154;
}
tmp154[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp154 : 0;
}
}
}
}

vector < uint64_t > tmp155 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp155 at (2396,1-2396,38) */
uint64_t __tmp_in_tmp155;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp155;
}
tmp155[i0] = (role == SERVER) ? __tmp_in_tmp155 : 0;
}

vector < uint64_t > tmp156 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp156 at (2399,1-2399,38) */
uint64_t __tmp_in_tmp156;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp156;
}
tmp156[i0] = (role == SERVER) ? __tmp_in_tmp156 : 0;
}

vector < uint64_t > tmp157 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp157 at (2402,1-2402,38) */
uint64_t __tmp_in_tmp157;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp157;
}
tmp157[i0] = (role == SERVER) ? __tmp_in_tmp157 : 0;
}

vector < uint64_t > tmp158 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp158 at (2405,1-2405,38) */
uint64_t __tmp_in_tmp158;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp158;
}
tmp158[i0] = (role == SERVER) ? __tmp_in_tmp158 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp159 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp159 at (2408,1-2408,49) */
uint64_t __tmp_in_tmp159;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp159;
}
tmp159[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp159 : 0;
}
}
}
}

vector < uint64_t > tmp160 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp160 at (2411,1-2411,37) */
uint64_t __tmp_in_tmp160;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp160;
}
tmp160[i0] = (role == SERVER) ? __tmp_in_tmp160 : 0;
}

vector < uint64_t > tmp161 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp161 at (2414,1-2414,37) */
uint64_t __tmp_in_tmp161;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp161;
}
tmp161[i0] = (role == SERVER) ? __tmp_in_tmp161 : 0;
}

vector < uint64_t > tmp162 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp162 at (2417,1-2417,37) */
uint64_t __tmp_in_tmp162;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp162;
}
tmp162[i0] = (role == SERVER) ? __tmp_in_tmp162 : 0;
}

vector < uint64_t > tmp163 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp163 at (2420,1-2420,37) */
uint64_t __tmp_in_tmp163;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp163;
}
tmp163[i0] = (role == SERVER) ? __tmp_in_tmp163 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp164 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp164 at (2423,1-2423,48) */
uint64_t __tmp_in_tmp164;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp164;
}
tmp164[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp164 : 0;
}
}
}
}

vector < uint64_t > tmp165 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp165 at (2426,1-2426,37) */
uint64_t __tmp_in_tmp165;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp165;
}
tmp165[i0] = (role == SERVER) ? __tmp_in_tmp165 : 0;
}

vector < uint64_t > tmp166 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp166 at (2429,1-2429,37) */
uint64_t __tmp_in_tmp166;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp166;
}
tmp166[i0] = (role == SERVER) ? __tmp_in_tmp166 : 0;
}

vector < uint64_t > tmp167 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp167 at (2432,1-2432,37) */
uint64_t __tmp_in_tmp167;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp167;
}
tmp167[i0] = (role == SERVER) ? __tmp_in_tmp167 : 0;
}

vector < uint64_t > tmp168 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp168 at (2435,1-2435,37) */
uint64_t __tmp_in_tmp168;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp168;
}
tmp168[i0] = (role == SERVER) ? __tmp_in_tmp168 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp169 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp169 at (2438,1-2438,49) */
uint64_t __tmp_in_tmp169;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1024; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp169;
}
tmp169[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp169 : 0;
}
}
}
}

vector < uint64_t > tmp170 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp170 at (2441,1-2441,38) */
uint64_t __tmp_in_tmp170;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp170;
}
tmp170[i0] = (role == SERVER) ? __tmp_in_tmp170 : 0;
}

vector < uint64_t > tmp171 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp171 at (2444,1-2444,38) */
uint64_t __tmp_in_tmp171;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp171;
}
tmp171[i0] = (role == SERVER) ? __tmp_in_tmp171 : 0;
}

vector < uint64_t > tmp172 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp172 at (2447,1-2447,38) */
uint64_t __tmp_in_tmp172;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp172;
}
tmp172[i0] = (role == SERVER) ? __tmp_in_tmp172 : 0;
}

vector < uint64_t > tmp173 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp173 at (2450,1-2450,38) */
uint64_t __tmp_in_tmp173;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp173;
}
tmp173[i0] = (role == SERVER) ? __tmp_in_tmp173 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp174 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp174 at (2453,1-2453,49) */
uint64_t __tmp_in_tmp174;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp174;
}
tmp174[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp174 : 0;
}
}
}
}

vector < uint64_t > tmp175 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp175 at (2456,1-2456,37) */
uint64_t __tmp_in_tmp175;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp175;
}
tmp175[i0] = (role == SERVER) ? __tmp_in_tmp175 : 0;
}

vector < uint64_t > tmp176 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp176 at (2459,1-2459,37) */
uint64_t __tmp_in_tmp176;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp176;
}
tmp176[i0] = (role == SERVER) ? __tmp_in_tmp176 : 0;
}

vector < uint64_t > tmp177 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp177 at (2462,1-2462,37) */
uint64_t __tmp_in_tmp177;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp177;
}
tmp177[i0] = (role == SERVER) ? __tmp_in_tmp177 : 0;
}

vector < uint64_t > tmp178 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp178 at (2465,1-2465,37) */
uint64_t __tmp_in_tmp178;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp178;
}
tmp178[i0] = (role == SERVER) ? __tmp_in_tmp178 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp179 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp179 at (2468,1-2468,48) */
uint64_t __tmp_in_tmp179;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp179;
}
tmp179[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp179 : 0;
}
}
}
}

vector < uint64_t > tmp180 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp180 at (2471,1-2471,37) */
uint64_t __tmp_in_tmp180;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp180;
}
tmp180[i0] = (role == SERVER) ? __tmp_in_tmp180 : 0;
}

vector < uint64_t > tmp181 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp181 at (2474,1-2474,37) */
uint64_t __tmp_in_tmp181;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp181;
}
tmp181[i0] = (role == SERVER) ? __tmp_in_tmp181 : 0;
}

vector < uint64_t > tmp182 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp182 at (2477,1-2477,37) */
uint64_t __tmp_in_tmp182;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp182;
}
tmp182[i0] = (role == SERVER) ? __tmp_in_tmp182 : 0;
}

vector < uint64_t > tmp183 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp183 at (2480,1-2480,37) */
uint64_t __tmp_in_tmp183;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp183;
}
tmp183[i0] = (role == SERVER) ? __tmp_in_tmp183 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp184 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp184 at (2483,1-2483,49) */
uint64_t __tmp_in_tmp184;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1024; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp184;
}
tmp184[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp184 : 0;
}
}
}
}

vector < uint64_t > tmp185 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp185 at (2486,1-2486,38) */
uint64_t __tmp_in_tmp185;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp185;
}
tmp185[i0] = (role == SERVER) ? __tmp_in_tmp185 : 0;
}

vector < uint64_t > tmp186 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp186 at (2489,1-2489,38) */
uint64_t __tmp_in_tmp186;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp186;
}
tmp186[i0] = (role == SERVER) ? __tmp_in_tmp186 : 0;
}

vector < uint64_t > tmp187 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp187 at (2492,1-2492,38) */
uint64_t __tmp_in_tmp187;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp187;
}
tmp187[i0] = (role == SERVER) ? __tmp_in_tmp187 : 0;
}

vector < uint64_t > tmp188 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp188 at (2495,1-2495,38) */
uint64_t __tmp_in_tmp188;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp188;
}
tmp188[i0] = (role == SERVER) ? __tmp_in_tmp188 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp189 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp189 at (2498,1-2498,49) */
uint64_t __tmp_in_tmp189;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp189;
}
tmp189[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp189 : 0;
}
}
}
}

vector < uint64_t > tmp190 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp190 at (2501,1-2501,37) */
uint64_t __tmp_in_tmp190;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp190;
}
tmp190[i0] = (role == SERVER) ? __tmp_in_tmp190 : 0;
}

vector < uint64_t > tmp191 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp191 at (2504,1-2504,37) */
uint64_t __tmp_in_tmp191;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp191;
}
tmp191[i0] = (role == SERVER) ? __tmp_in_tmp191 : 0;
}

vector < uint64_t > tmp192 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp192 at (2507,1-2507,37) */
uint64_t __tmp_in_tmp192;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp192;
}
tmp192[i0] = (role == SERVER) ? __tmp_in_tmp192 : 0;
}

vector < uint64_t > tmp193 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp193 at (2510,1-2510,37) */
uint64_t __tmp_in_tmp193;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp193;
}
tmp193[i0] = (role == SERVER) ? __tmp_in_tmp193 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp194 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp194 at (2513,1-2513,48) */
uint64_t __tmp_in_tmp194;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)256; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp194;
}
tmp194[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp194 : 0;
}
}
}
}

vector < uint64_t > tmp195 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp195 at (2516,1-2516,37) */
uint64_t __tmp_in_tmp195;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp195;
}
tmp195[i0] = (role == SERVER) ? __tmp_in_tmp195 : 0;
}

vector < uint64_t > tmp196 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp196 at (2519,1-2519,37) */
uint64_t __tmp_in_tmp196;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp196;
}
tmp196[i0] = (role == SERVER) ? __tmp_in_tmp196 : 0;
}

vector < uint64_t > tmp197 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp197 at (2522,1-2522,37) */
uint64_t __tmp_in_tmp197;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp197;
}
tmp197[i0] = (role == SERVER) ? __tmp_in_tmp197 : 0;
}

vector < uint64_t > tmp198 = make_vector<uint64_t>( (int32_t)256);
/* Variable to read the clear value corresponding to the input variable tmp198 at (2525,1-2525,37) */
uint64_t __tmp_in_tmp198;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)256; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp198;
}
tmp198[i0] = (role == SERVER) ? __tmp_in_tmp198 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp199 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp199 at (2528,1-2528,49) */
uint64_t __tmp_in_tmp199;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)256; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)1024; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp199;
}
tmp199[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp199 : 0;
}
}
}
}

vector < uint64_t > tmp200 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp200 at (2531,1-2531,38) */
uint64_t __tmp_in_tmp200;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp200;
}
tmp200[i0] = (role == SERVER) ? __tmp_in_tmp200 : 0;
}

vector < uint64_t > tmp201 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp201 at (2534,1-2534,38) */
uint64_t __tmp_in_tmp201;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp201;
}
tmp201[i0] = (role == SERVER) ? __tmp_in_tmp201 : 0;
}

vector < uint64_t > tmp202 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp202 at (2537,1-2537,38) */
uint64_t __tmp_in_tmp202;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp202;
}
tmp202[i0] = (role == SERVER) ? __tmp_in_tmp202 : 0;
}

vector < uint64_t > tmp203 = make_vector<uint64_t>( (int32_t)1024);
/* Variable to read the clear value corresponding to the input variable tmp203 at (2540,1-2540,38) */
uint64_t __tmp_in_tmp203;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1024; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp203;
}
tmp203[i0] = (role == SERVER) ? __tmp_in_tmp203 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp204 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp204 at (2543,1-2543,50) */
uint64_t __tmp_in_tmp204;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)2048; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp204;
}
tmp204[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp204 : 0;
}
}
}
}

vector < vector < vector < vector < uint64_t > > > > tmp205 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp205 at (2546,1-2546,49) */
uint64_t __tmp_in_tmp205;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)1024; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp205;
}
tmp205[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp205 : 0;
}
}
}
}

vector < uint64_t > tmp206 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp206 at (2549,1-2549,37) */
uint64_t __tmp_in_tmp206;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp206;
}
tmp206[i0] = (role == SERVER) ? __tmp_in_tmp206 : 0;
}

vector < uint64_t > tmp207 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp207 at (2552,1-2552,37) */
uint64_t __tmp_in_tmp207;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp207;
}
tmp207[i0] = (role == SERVER) ? __tmp_in_tmp207 : 0;
}

vector < uint64_t > tmp208 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp208 at (2555,1-2555,37) */
uint64_t __tmp_in_tmp208;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp208;
}
tmp208[i0] = (role == SERVER) ? __tmp_in_tmp208 : 0;
}

vector < uint64_t > tmp209 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp209 at (2558,1-2558,37) */
uint64_t __tmp_in_tmp209;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp209;
}
tmp209[i0] = (role == SERVER) ? __tmp_in_tmp209 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp210 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp210 at (2561,1-2561,48) */
uint64_t __tmp_in_tmp210;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp210;
}
tmp210[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp210 : 0;
}
}
}
}

vector < uint64_t > tmp211 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp211 at (2564,1-2564,37) */
uint64_t __tmp_in_tmp211;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp211;
}
tmp211[i0] = (role == SERVER) ? __tmp_in_tmp211 : 0;
}

vector < uint64_t > tmp212 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp212 at (2567,1-2567,37) */
uint64_t __tmp_in_tmp212;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp212;
}
tmp212[i0] = (role == SERVER) ? __tmp_in_tmp212 : 0;
}

vector < uint64_t > tmp213 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp213 at (2570,1-2570,37) */
uint64_t __tmp_in_tmp213;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp213;
}
tmp213[i0] = (role == SERVER) ? __tmp_in_tmp213 : 0;
}

vector < uint64_t > tmp214 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp214 at (2573,1-2573,37) */
uint64_t __tmp_in_tmp214;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp214;
}
tmp214[i0] = (role == SERVER) ? __tmp_in_tmp214 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp215 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp215 at (2576,1-2576,49) */
uint64_t __tmp_in_tmp215;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)2048; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp215;
}
tmp215[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp215 : 0;
}
}
}
}

vector < uint64_t > tmp216 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp216 at (2579,1-2579,38) */
uint64_t __tmp_in_tmp216;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp216;
}
tmp216[i0] = (role == SERVER) ? __tmp_in_tmp216 : 0;
}

vector < uint64_t > tmp217 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp217 at (2582,1-2582,38) */
uint64_t __tmp_in_tmp217;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp217;
}
tmp217[i0] = (role == SERVER) ? __tmp_in_tmp217 : 0;
}

vector < uint64_t > tmp218 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp218 at (2585,1-2585,38) */
uint64_t __tmp_in_tmp218;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp218;
}
tmp218[i0] = (role == SERVER) ? __tmp_in_tmp218 : 0;
}

vector < uint64_t > tmp219 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp219 at (2588,1-2588,38) */
uint64_t __tmp_in_tmp219;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp219;
}
tmp219[i0] = (role == SERVER) ? __tmp_in_tmp219 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp220 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp220 at (2591,1-2591,49) */
uint64_t __tmp_in_tmp220;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)2048; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp220;
}
tmp220[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp220 : 0;
}
}
}
}

vector < uint64_t > tmp221 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp221 at (2594,1-2594,37) */
uint64_t __tmp_in_tmp221;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp221;
}
tmp221[i0] = (role == SERVER) ? __tmp_in_tmp221 : 0;
}

vector < uint64_t > tmp222 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp222 at (2597,1-2597,37) */
uint64_t __tmp_in_tmp222;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp222;
}
tmp222[i0] = (role == SERVER) ? __tmp_in_tmp222 : 0;
}

vector < uint64_t > tmp223 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp223 at (2600,1-2600,37) */
uint64_t __tmp_in_tmp223;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp223;
}
tmp223[i0] = (role == SERVER) ? __tmp_in_tmp223 : 0;
}

vector < uint64_t > tmp224 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp224 at (2603,1-2603,37) */
uint64_t __tmp_in_tmp224;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp224;
}
tmp224[i0] = (role == SERVER) ? __tmp_in_tmp224 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp225 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp225 at (2606,1-2606,48) */
uint64_t __tmp_in_tmp225;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp225;
}
tmp225[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp225 : 0;
}
}
}
}

vector < uint64_t > tmp226 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp226 at (2609,1-2609,37) */
uint64_t __tmp_in_tmp226;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp226;
}
tmp226[i0] = (role == SERVER) ? __tmp_in_tmp226 : 0;
}

vector < uint64_t > tmp227 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp227 at (2612,1-2612,37) */
uint64_t __tmp_in_tmp227;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp227;
}
tmp227[i0] = (role == SERVER) ? __tmp_in_tmp227 : 0;
}

vector < uint64_t > tmp228 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp228 at (2615,1-2615,37) */
uint64_t __tmp_in_tmp228;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp228;
}
tmp228[i0] = (role == SERVER) ? __tmp_in_tmp228 : 0;
}

vector < uint64_t > tmp229 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp229 at (2618,1-2618,37) */
uint64_t __tmp_in_tmp229;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp229;
}
tmp229[i0] = (role == SERVER) ? __tmp_in_tmp229 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp230 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp230 at (2621,1-2621,49) */
uint64_t __tmp_in_tmp230;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)2048; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp230;
}
tmp230[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp230 : 0;
}
}
}
}

vector < uint64_t > tmp231 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp231 at (2624,1-2624,38) */
uint64_t __tmp_in_tmp231;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp231;
}
tmp231[i0] = (role == SERVER) ? __tmp_in_tmp231 : 0;
}

vector < uint64_t > tmp232 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp232 at (2627,1-2627,38) */
uint64_t __tmp_in_tmp232;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp232;
}
tmp232[i0] = (role == SERVER) ? __tmp_in_tmp232 : 0;
}

vector < uint64_t > tmp233 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp233 at (2630,1-2630,38) */
uint64_t __tmp_in_tmp233;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp233;
}
tmp233[i0] = (role == SERVER) ? __tmp_in_tmp233 : 0;
}

vector < uint64_t > tmp234 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp234 at (2633,1-2633,38) */
uint64_t __tmp_in_tmp234;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp234;
}
tmp234[i0] = (role == SERVER) ? __tmp_in_tmp234 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp235 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp235 at (2636,1-2636,49) */
uint64_t __tmp_in_tmp235;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)2048; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp235;
}
tmp235[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp235 : 0;
}
}
}
}

vector < uint64_t > tmp236 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp236 at (2639,1-2639,37) */
uint64_t __tmp_in_tmp236;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp236;
}
tmp236[i0] = (role == SERVER) ? __tmp_in_tmp236 : 0;
}

vector < uint64_t > tmp237 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp237 at (2642,1-2642,37) */
uint64_t __tmp_in_tmp237;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp237;
}
tmp237[i0] = (role == SERVER) ? __tmp_in_tmp237 : 0;
}

vector < uint64_t > tmp238 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp238 at (2645,1-2645,37) */
uint64_t __tmp_in_tmp238;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp238;
}
tmp238[i0] = (role == SERVER) ? __tmp_in_tmp238 : 0;
}

vector < uint64_t > tmp239 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp239 at (2648,1-2648,37) */
uint64_t __tmp_in_tmp239;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp239;
}
tmp239[i0] = (role == SERVER) ? __tmp_in_tmp239 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp240 = make_vector<uint64_t>( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp240 at (2651,1-2651,48) */
uint64_t __tmp_in_tmp240;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)3; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)3; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)512; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp240;
}
tmp240[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp240 : 0;
}
}
}
}

vector < uint64_t > tmp241 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp241 at (2654,1-2654,37) */
uint64_t __tmp_in_tmp241;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp241;
}
tmp241[i0] = (role == SERVER) ? __tmp_in_tmp241 : 0;
}

vector < uint64_t > tmp242 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp242 at (2657,1-2657,37) */
uint64_t __tmp_in_tmp242;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp242;
}
tmp242[i0] = (role == SERVER) ? __tmp_in_tmp242 : 0;
}

vector < uint64_t > tmp243 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp243 at (2660,1-2660,37) */
uint64_t __tmp_in_tmp243;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp243;
}
tmp243[i0] = (role == SERVER) ? __tmp_in_tmp243 : 0;
}

vector < uint64_t > tmp244 = make_vector<uint64_t>( (int32_t)512);
/* Variable to read the clear value corresponding to the input variable tmp244 at (2663,1-2663,37) */
uint64_t __tmp_in_tmp244;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)512; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp244;
}
tmp244[i0] = (role == SERVER) ? __tmp_in_tmp244 : 0;
}

vector < vector < vector < vector < uint64_t > > > > tmp245 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp245 at (2666,1-2666,49) */
uint64_t __tmp_in_tmp245;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1; i1++){
for (uint32_t i2 =  (uint32_t)0; i2 <  (int32_t)512; i2++){
for (uint32_t i3 =  (uint32_t)0; i3 <  (int32_t)2048; i3++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp245;
}
tmp245[i0][i1][i2][i3] = (role == SERVER) ? __tmp_in_tmp245 : 0;
}
}
}
}

vector < uint64_t > tmp246 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp246 at (2669,1-2669,38) */
uint64_t __tmp_in_tmp246;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp246;
}
tmp246[i0] = (role == SERVER) ? __tmp_in_tmp246 : 0;
}

vector < uint64_t > tmp247 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp247 at (2672,1-2672,38) */
uint64_t __tmp_in_tmp247;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp247;
}
tmp247[i0] = (role == SERVER) ? __tmp_in_tmp247 : 0;
}

vector < uint64_t > tmp248 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp248 at (2675,1-2675,38) */
uint64_t __tmp_in_tmp248;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp248;
}
tmp248[i0] = (role == SERVER) ? __tmp_in_tmp248 : 0;
}

vector < uint64_t > tmp249 = make_vector<uint64_t>( (int32_t)2048);
/* Variable to read the clear value corresponding to the input variable tmp249 at (2678,1-2678,38) */
uint64_t __tmp_in_tmp249;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp249;
}
tmp249[i0] = (role == SERVER) ? __tmp_in_tmp249 : 0;
}

vector < vector < uint64_t > > tmp250 = make_vector<uint64_t>( (int32_t)2048,  (int32_t)1001);
/* Variable to read the clear value corresponding to the input variable tmp250 at (2681,1-2681,44) */
uint64_t __tmp_in_tmp250;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)2048; i0++){
for (uint32_t i1 =  (uint32_t)0; i1 <  (int32_t)1001; i1++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp250;
}
tmp250[i0][i1] = (role == SERVER) ? __tmp_in_tmp250 : 0;
}
}

vector < uint64_t > tmp251 = make_vector<uint64_t>( (int32_t)1001);
/* Variable to read the clear value corresponding to the input variable tmp251 at (2684,1-2684,38) */
uint64_t __tmp_in_tmp251;
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1001; i0++){
if ((role == SERVER)) {
cin >> __tmp_in_tmp251;
}
tmp251[i0] = (role == SERVER) ? __tmp_in_tmp251 : 0;
}
StartComputation();

vector < vector < int32_t > > tmp252 = make_vector<int32_t>( (int32_t)4,  (int32_t)2);
tmp252[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp252[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp252[ (int64_t)1][ (int64_t)0] =  (int32_t)3;
tmp252[ (int64_t)1][ (int64_t)1] =  (int32_t)3;
tmp252[ (int64_t)2][ (int64_t)0] =  (int32_t)3;
tmp252[ (int64_t)2][ (int64_t)1] =  (int32_t)3;
tmp252[ (int64_t)3][ (int64_t)0] =  (int32_t)0;
tmp252[ (int64_t)3][ (int64_t)1] =  (int32_t)0;

vector < vector < vector < vector < uint64_t > > > > tmp253 = make_vector<uint64_t>( (int32_t)1,  (int32_t)230,  (int32_t)230,  (int32_t)3);
Pad442( (int32_t)1,  (int32_t)230,  (int32_t)230,  (int32_t)3,  (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3, tmp0,  (int32_t)4,  (int32_t)2, tmp252, tmp253);
ClearMemSecret4( (int32_t)1,  (int32_t)224,  (int32_t)224,  (int32_t)3, tmp0);
ClearMemPublic2( (int32_t)4,  (int32_t)2, tmp252);

vector < vector < vector < vector < uint64_t > > > > tmp256 = make_vector<uint64_t>( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)230,  (int32_t)230,  (int32_t)3,  (int32_t)7,  (int32_t)7,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp253, tmp1, tmp256);
ClearMemSecret4( (int32_t)7,  (int32_t)7,  (int32_t)3,  (int32_t)64, tmp1);
ClearMemSecret4( (int32_t)1,  (int32_t)230,  (int32_t)230,  (int32_t)3, tmp253);

vector < vector < vector < vector < uint64_t > > > > tmp259 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
MaxPool( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)0,  (int32_t)1,  (int32_t)0,  (int32_t)1,  (int32_t)2,  (int32_t)2,  (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp256, tmp259);
ClearMemSecret4( (int32_t)1,  (int32_t)112,  (int32_t)112,  (int32_t)64, tmp256);

vector < vector < vector < vector < uint64_t > > > > tmp261 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp259,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp259, tmp2, tmp3,  (int32_t)0,  (int32_t)12, tmp261);
ClearMemSecret1( (int32_t)64, tmp3);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp259);
ClearMemSecret1( (int32_t)64, tmp2);

vector < vector < vector < vector < uint64_t > > > > tmp265 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp261, tmp265,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp261);

vector < vector < vector < vector < uint64_t > > > > tmp267 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp265, tmp6, tmp267);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp6);

vector < vector < vector < vector < uint64_t > > > > tmp269 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp265, tmp7, tmp269);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp265);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)64, tmp7);

vector < vector < vector < vector < uint64_t > > > > tmp272 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp269,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp269, tmp8, tmp9,  (int32_t)0,  (int32_t)12, tmp272);
ClearMemSecret1( (int32_t)64, tmp9);
ClearMemSecret1( (int32_t)64, tmp8);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp269);

vector < vector < vector < vector < uint64_t > > > > tmp276 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp272, tmp276,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp272);

vector < vector < vector < vector < uint64_t > > > > tmp278 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp276, tmp12, tmp278);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp12);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp276);

vector < vector < vector < vector < uint64_t > > > > tmp281 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp278,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp278, tmp13, tmp14,  (int32_t)0,  (int32_t)12, tmp281);
ClearMemSecret1( (int32_t)64, tmp14);
ClearMemSecret1( (int32_t)64, tmp13);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp278);

vector < vector < vector < vector < uint64_t > > > > tmp285 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp281, tmp285,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp281);

vector < vector < vector < vector < uint64_t > > > > tmp287 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp285, tmp17, tmp287);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp285);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp17);

vector < vector < vector < vector < uint64_t > > > > tmp290 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
MatAdd4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp287, tmp267, tmp290);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp267);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp287);

vector < vector < vector < vector < uint64_t > > > > tmp293 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp290,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp290, tmp18, tmp19,  (int32_t)0,  (int32_t)12, tmp293);
ClearMemSecret1( (int32_t)256, tmp18);
ClearMemSecret1( (int32_t)256, tmp19);

vector < vector < vector < vector < uint64_t > > > > tmp296 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp293, tmp296,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp293);

vector < vector < vector < vector < uint64_t > > > > tmp298 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp296, tmp22, tmp298);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)64, tmp22);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp296);

vector < vector < vector < vector < uint64_t > > > > tmp301 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp298,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp298, tmp23, tmp24,  (int32_t)0,  (int32_t)12, tmp301);
ClearMemSecret1( (int32_t)64, tmp23);
ClearMemSecret1( (int32_t)64, tmp24);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp298);

vector < vector < vector < vector < uint64_t > > > > tmp305 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp301, tmp305,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp301);

vector < vector < vector < vector < uint64_t > > > > tmp307 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp305, tmp27, tmp307);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp305);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp27);

vector < vector < vector < vector < uint64_t > > > > tmp310 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp307,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp307, tmp28, tmp29,  (int32_t)0,  (int32_t)12, tmp310);
ClearMemSecret1( (int32_t)64, tmp29);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp307);
ClearMemSecret1( (int32_t)64, tmp28);

vector < vector < vector < vector < uint64_t > > > > tmp314 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp310, tmp314,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp310);

vector < vector < vector < vector < uint64_t > > > > tmp316 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp314, tmp32, tmp316);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp32);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp314);

vector < vector < vector < vector < uint64_t > > > > tmp319 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
ScaleUp4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp290,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp316, tmp290, tmp319);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp316);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp290);

vector < vector < vector < vector < uint64_t > > > > tmp322 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp319,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp319, tmp33, tmp34,  (int32_t)0,  (int32_t)12, tmp322);
ClearMemSecret1( (int32_t)256, tmp33);
ClearMemSecret1( (int32_t)256, tmp34);

vector < vector < vector < vector < uint64_t > > > > tmp325 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp322, tmp325,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp322);

vector < vector < vector < vector < uint64_t > > > > tmp327 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp325, tmp37, tmp327);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)64, tmp37);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp325);

vector < vector < vector < vector < uint64_t > > > > tmp330 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp327,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp327, tmp38, tmp39,  (int32_t)0,  (int32_t)12, tmp330);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp327);
ClearMemSecret1( (int32_t)64, tmp38);
ClearMemSecret1( (int32_t)64, tmp39);

vector < vector < vector < vector < uint64_t > > > > tmp334 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp330, tmp334,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp330);

vector < vector < vector < vector < uint64_t > > > > tmp336 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp334, tmp42, tmp336);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp334);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)64,  (int32_t)64, tmp42);

vector < vector < vector < vector < uint64_t > > > > tmp339 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp336,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp336, tmp43, tmp44,  (int32_t)0,  (int32_t)12, tmp339);
ClearMemSecret1( (int32_t)64, tmp44);
ClearMemSecret1( (int32_t)64, tmp43);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp336);

vector < vector < vector < vector < uint64_t > > > > tmp343 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp339, tmp343,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp339);

vector < vector < vector < vector < uint64_t > > > > tmp345 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp343, tmp47, tmp345);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)64, tmp343);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)64,  (int32_t)256, tmp47);

vector < vector < vector < vector < uint64_t > > > > tmp348 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
ScaleUp4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp319,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp345, tmp319, tmp348);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp345);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp319);

vector < vector < vector < vector < uint64_t > > > > tmp351 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp348,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp348, tmp48, tmp49,  (int32_t)0,  (int32_t)12, tmp351);
ClearMemSecret1( (int32_t)256, tmp49);
ClearMemSecret1( (int32_t)256, tmp48);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp348);

vector < vector < vector < vector < uint64_t > > > > tmp355 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp351, tmp355,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp351);

vector < vector < int32_t > > tmp357 = make_vector<int32_t>( (int32_t)4,  (int32_t)2);
tmp357[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp357[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp357[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp357[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp357[ (int64_t)2][ (int64_t)0] =  (int32_t)0;
tmp357[ (int64_t)2][ (int64_t)1] =  (int32_t)0;
tmp357[ (int64_t)3][ (int64_t)0] =  (int32_t)0;
tmp357[ (int64_t)3][ (int64_t)1] =  (int32_t)0;

vector < vector < vector < vector < uint64_t > > > > tmp358 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256);
Pad442( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp355,  (int32_t)4,  (int32_t)2, tmp357, tmp358);
ClearMemPublic2( (int32_t)4,  (int32_t)2, tmp357);

vector < vector < vector < vector < uint64_t > > > > tmp360 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp358, tmp52, tmp360);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)512, tmp52);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp358);

vector < vector < vector < vector < uint64_t > > > > tmp363 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp355, tmp53, tmp363);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)128, tmp53);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)256, tmp355);

vector < vector < vector < vector < uint64_t > > > > tmp366 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp363,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp363, tmp54, tmp55,  (int32_t)0,  (int32_t)12, tmp366);
ClearMemSecret1( (int32_t)128, tmp54);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp363);
ClearMemSecret1( (int32_t)128, tmp55);

vector < vector < vector < vector < uint64_t > > > > tmp370 = make_vector<uint64_t>( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp366, tmp370,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp366);

vector < vector < int32_t > > tmp372 = make_vector<int32_t>( (int32_t)4,  (int32_t)2);
tmp372[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp372[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp372[ (int64_t)1][ (int64_t)0] =  (int32_t)1;
tmp372[ (int64_t)1][ (int64_t)1] =  (int32_t)1;
tmp372[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp372[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp372[ (int64_t)3][ (int64_t)0] =  (int32_t)0;
tmp372[ (int64_t)3][ (int64_t)1] =  (int32_t)0;

vector < vector < vector < vector < uint64_t > > > > tmp373 = make_vector<uint64_t>( (int32_t)1,  (int32_t)58,  (int32_t)58,  (int32_t)128);
Pad442( (int32_t)1,  (int32_t)58,  (int32_t)58,  (int32_t)128,  (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp370,  (int32_t)4,  (int32_t)2, tmp372, tmp373);
ClearMemSecret4( (int32_t)1,  (int32_t)56,  (int32_t)56,  (int32_t)128, tmp370);
ClearMemPublic2( (int32_t)4,  (int32_t)2, tmp372);

vector < vector < vector < vector < uint64_t > > > > tmp376 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)58,  (int32_t)58,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp373, tmp58, tmp376);
ClearMemSecret4( (int32_t)1,  (int32_t)58,  (int32_t)58,  (int32_t)128, tmp373);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp58);

vector < vector < vector < vector < uint64_t > > > > tmp379 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp376,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp376, tmp59, tmp60,  (int32_t)0,  (int32_t)12, tmp379);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp376);
ClearMemSecret1( (int32_t)128, tmp60);
ClearMemSecret1( (int32_t)128, tmp59);

vector < vector < vector < vector < uint64_t > > > > tmp383 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp379, tmp383,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp379);

vector < vector < vector < vector < uint64_t > > > > tmp385 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp383, tmp63, tmp385);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512, tmp63);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp383);

vector < vector < vector < vector < uint64_t > > > > tmp388 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
MatAdd4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp385, tmp360, tmp388);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp360);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp385);

vector < vector < vector < vector < uint64_t > > > > tmp391 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp388,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp388, tmp64, tmp65,  (int32_t)0,  (int32_t)12, tmp391);
ClearMemSecret1( (int32_t)512, tmp64);
ClearMemSecret1( (int32_t)512, tmp65);

vector < vector < vector < vector < uint64_t > > > > tmp394 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp391, tmp394,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp391);

vector < vector < vector < vector < uint64_t > > > > tmp396 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp394, tmp68, tmp396);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp394);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp68);

vector < vector < vector < vector < uint64_t > > > > tmp399 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp396,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp396, tmp69, tmp70,  (int32_t)0,  (int32_t)12, tmp399);
ClearMemSecret1( (int32_t)128, tmp70);
ClearMemSecret1( (int32_t)128, tmp69);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp396);

vector < vector < vector < vector < uint64_t > > > > tmp403 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp399, tmp403,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp399);

vector < vector < vector < vector < uint64_t > > > > tmp405 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp403, tmp73, tmp405);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp73);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp403);

vector < vector < vector < vector < uint64_t > > > > tmp408 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp405,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp405, tmp74, tmp75,  (int32_t)0,  (int32_t)12, tmp408);
ClearMemSecret1( (int32_t)128, tmp74);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp405);
ClearMemSecret1( (int32_t)128, tmp75);

vector < vector < vector < vector < uint64_t > > > > tmp412 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp408, tmp412,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp408);

vector < vector < vector < vector < uint64_t > > > > tmp414 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp412, tmp78, tmp414);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512, tmp78);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp412);

vector < vector < vector < vector < uint64_t > > > > tmp417 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleUp4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp388,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp414, tmp388, tmp417);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp388);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp414);

vector < vector < vector < vector < uint64_t > > > > tmp420 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp417,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp417, tmp79, tmp80,  (int32_t)0,  (int32_t)12, tmp420);
ClearMemSecret1( (int32_t)512, tmp80);
ClearMemSecret1( (int32_t)512, tmp79);

vector < vector < vector < vector < uint64_t > > > > tmp423 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp420, tmp423,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp420);

vector < vector < vector < vector < uint64_t > > > > tmp425 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp423, tmp83, tmp425);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp83);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp423);

vector < vector < vector < vector < uint64_t > > > > tmp428 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp425,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp425, tmp84, tmp85,  (int32_t)0,  (int32_t)12, tmp428);
ClearMemSecret1( (int32_t)128, tmp84);
ClearMemSecret1( (int32_t)128, tmp85);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp425);

vector < vector < vector < vector < uint64_t > > > > tmp432 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp428, tmp432,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp428);

vector < vector < vector < vector < uint64_t > > > > tmp434 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp432, tmp88, tmp434);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp432);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp88);

vector < vector < vector < vector < uint64_t > > > > tmp437 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp434,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp434, tmp89, tmp90,  (int32_t)0,  (int32_t)12, tmp437);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp434);
ClearMemSecret1( (int32_t)128, tmp90);
ClearMemSecret1( (int32_t)128, tmp89);

vector < vector < vector < vector < uint64_t > > > > tmp441 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp437, tmp441,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp437);

vector < vector < vector < vector < uint64_t > > > > tmp443 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp441, tmp93, tmp443);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp441);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512, tmp93);

vector < vector < vector < vector < uint64_t > > > > tmp446 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleUp4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp417,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp443, tmp417, tmp446);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp417);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp443);

vector < vector < vector < vector < uint64_t > > > > tmp449 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp446,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp446, tmp94, tmp95,  (int32_t)0,  (int32_t)12, tmp449);
ClearMemSecret1( (int32_t)512, tmp94);
ClearMemSecret1( (int32_t)512, tmp95);

vector < vector < vector < vector < uint64_t > > > > tmp452 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp449, tmp452,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp449);

vector < vector < vector < vector < uint64_t > > > > tmp454 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp452, tmp98, tmp454);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)128, tmp98);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp452);

vector < vector < vector < vector < uint64_t > > > > tmp457 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp454,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp454, tmp99, tmp100,  (int32_t)0,  (int32_t)12, tmp457);
ClearMemSecret1( (int32_t)128, tmp100);
ClearMemSecret1( (int32_t)128, tmp99);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp454);

vector < vector < vector < vector < uint64_t > > > > tmp461 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp457, tmp461,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp457);

vector < vector < vector < vector < uint64_t > > > > tmp463 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp461, tmp103, tmp463);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp461);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)128,  (int32_t)128, tmp103);

vector < vector < vector < vector < uint64_t > > > > tmp466 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp463,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp463, tmp104, tmp105,  (int32_t)0,  (int32_t)12, tmp466);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp463);
ClearMemSecret1( (int32_t)128, tmp104);
ClearMemSecret1( (int32_t)128, tmp105);

vector < vector < vector < vector < uint64_t > > > > tmp470 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp466, tmp470,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp466);

vector < vector < vector < vector < uint64_t > > > > tmp472 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp470, tmp108, tmp472);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)128,  (int32_t)512, tmp108);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)128, tmp470);

vector < vector < vector < vector < uint64_t > > > > tmp475 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleUp4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp446,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp472, tmp446, tmp475);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp472);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp446);

vector < vector < vector < vector < uint64_t > > > > tmp478 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp475,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp475, tmp109, tmp110,  (int32_t)0,  (int32_t)12, tmp478);
ClearMemSecret1( (int32_t)512, tmp110);
ClearMemSecret1( (int32_t)512, tmp109);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp475);

vector < vector < vector < vector < uint64_t > > > > tmp482 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp478, tmp482,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp478);

vector < vector < int32_t > > tmp484 = make_vector<int32_t>( (int32_t)4,  (int32_t)2);
tmp484[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp484[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp484[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp484[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp484[ (int64_t)2][ (int64_t)0] =  (int32_t)0;
tmp484[ (int64_t)2][ (int64_t)1] =  (int32_t)0;
tmp484[ (int64_t)3][ (int64_t)0] =  (int32_t)0;
tmp484[ (int64_t)3][ (int64_t)1] =  (int32_t)0;

vector < vector < vector < vector < uint64_t > > > > tmp485 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512);
Pad442( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp482,  (int32_t)4,  (int32_t)2, tmp484, tmp485);
ClearMemPublic2( (int32_t)4,  (int32_t)2, tmp484);

vector < vector < vector < vector < uint64_t > > > > tmp487 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp485, tmp113, tmp487);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp485);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)1024, tmp113);

vector < vector < vector < vector < uint64_t > > > > tmp490 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp482, tmp114, tmp490);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)256, tmp114);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)512, tmp482);

vector < vector < vector < vector < uint64_t > > > > tmp493 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp490,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp490, tmp115, tmp116,  (int32_t)0,  (int32_t)12, tmp493);
ClearMemSecret1( (int32_t)256, tmp116);
ClearMemSecret1( (int32_t)256, tmp115);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp490);

vector < vector < vector < vector < uint64_t > > > > tmp497 = make_vector<uint64_t>( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp493, tmp497,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp493);

vector < vector < int32_t > > tmp499 = make_vector<int32_t>( (int32_t)4,  (int32_t)2);
tmp499[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp499[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp499[ (int64_t)1][ (int64_t)0] =  (int32_t)1;
tmp499[ (int64_t)1][ (int64_t)1] =  (int32_t)1;
tmp499[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp499[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp499[ (int64_t)3][ (int64_t)0] =  (int32_t)0;
tmp499[ (int64_t)3][ (int64_t)1] =  (int32_t)0;

vector < vector < vector < vector < uint64_t > > > > tmp500 = make_vector<uint64_t>( (int32_t)1,  (int32_t)30,  (int32_t)30,  (int32_t)256);
Pad442( (int32_t)1,  (int32_t)30,  (int32_t)30,  (int32_t)256,  (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp497,  (int32_t)4,  (int32_t)2, tmp499, tmp500);
ClearMemSecret4( (int32_t)1,  (int32_t)28,  (int32_t)28,  (int32_t)256, tmp497);
ClearMemPublic2( (int32_t)4,  (int32_t)2, tmp499);

vector < vector < vector < vector < uint64_t > > > > tmp503 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)30,  (int32_t)30,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp500, tmp119, tmp503);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp119);
ClearMemSecret4( (int32_t)1,  (int32_t)30,  (int32_t)30,  (int32_t)256, tmp500);

vector < vector < vector < vector < uint64_t > > > > tmp506 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp503,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp503, tmp120, tmp121,  (int32_t)0,  (int32_t)12, tmp506);
ClearMemSecret1( (int32_t)256, tmp120);
ClearMemSecret1( (int32_t)256, tmp121);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp503);

vector < vector < vector < vector < uint64_t > > > > tmp510 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp506, tmp510,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp506);

vector < vector < vector < vector < uint64_t > > > > tmp512 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp510, tmp124, tmp512);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp510);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp124);

vector < vector < vector < vector < uint64_t > > > > tmp515 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
MatAdd4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp512, tmp487, tmp515);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp512);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp487);

vector < vector < vector < vector < uint64_t > > > > tmp518 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp515,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp515, tmp125, tmp126,  (int32_t)0,  (int32_t)12, tmp518);
ClearMemSecret1( (int32_t)1024, tmp125);
ClearMemSecret1( (int32_t)1024, tmp126);

vector < vector < vector < vector < uint64_t > > > > tmp521 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp518, tmp521,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp518);

vector < vector < vector < vector < uint64_t > > > > tmp523 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp521, tmp129, tmp523);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp129);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp521);

vector < vector < vector < vector < uint64_t > > > > tmp526 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp523,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp523, tmp130, tmp131,  (int32_t)0,  (int32_t)12, tmp526);
ClearMemSecret1( (int32_t)256, tmp131);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp523);
ClearMemSecret1( (int32_t)256, tmp130);

vector < vector < vector < vector < uint64_t > > > > tmp530 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp526, tmp530,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp526);

vector < vector < vector < vector < uint64_t > > > > tmp532 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp530, tmp134, tmp532);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp530);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp134);

vector < vector < vector < vector < uint64_t > > > > tmp535 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp532,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp532, tmp135, tmp136,  (int32_t)0,  (int32_t)12, tmp535);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp532);
ClearMemSecret1( (int32_t)256, tmp136);
ClearMemSecret1( (int32_t)256, tmp135);

vector < vector < vector < vector < uint64_t > > > > tmp539 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp535, tmp539,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp535);

vector < vector < vector < vector < uint64_t > > > > tmp541 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp539, tmp139, tmp541);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp539);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp139);

vector < vector < vector < vector < uint64_t > > > > tmp544 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleUp4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp515,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp541, tmp515, tmp544);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp515);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp541);

vector < vector < vector < vector < uint64_t > > > > tmp547 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp544,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp544, tmp140, tmp141,  (int32_t)0,  (int32_t)12, tmp547);
ClearMemSecret1( (int32_t)1024, tmp140);
ClearMemSecret1( (int32_t)1024, tmp141);

vector < vector < vector < vector < uint64_t > > > > tmp550 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp547, tmp550,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp547);

vector < vector < vector < vector < uint64_t > > > > tmp552 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp550, tmp144, tmp552);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp550);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp144);

vector < vector < vector < vector < uint64_t > > > > tmp555 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp552,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp552, tmp145, tmp146,  (int32_t)0,  (int32_t)12, tmp555);
ClearMemSecret1( (int32_t)256, tmp145);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp552);
ClearMemSecret1( (int32_t)256, tmp146);

vector < vector < vector < vector < uint64_t > > > > tmp559 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp555, tmp559,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp555);

vector < vector < vector < vector < uint64_t > > > > tmp561 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp559, tmp149, tmp561);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp149);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp559);

vector < vector < vector < vector < uint64_t > > > > tmp564 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp561,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp561, tmp150, tmp151,  (int32_t)0,  (int32_t)12, tmp564);
ClearMemSecret1( (int32_t)256, tmp150);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp561);
ClearMemSecret1( (int32_t)256, tmp151);

vector < vector < vector < vector < uint64_t > > > > tmp568 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp564, tmp568,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp564);

vector < vector < vector < vector < uint64_t > > > > tmp570 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp568, tmp154, tmp570);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp154);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp568);

vector < vector < vector < vector < uint64_t > > > > tmp573 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleUp4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp544,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp570, tmp544, tmp573);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp570);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp544);

vector < vector < vector < vector < uint64_t > > > > tmp576 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp573,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp573, tmp155, tmp156,  (int32_t)0,  (int32_t)12, tmp576);
ClearMemSecret1( (int32_t)1024, tmp155);
ClearMemSecret1( (int32_t)1024, tmp156);

vector < vector < vector < vector < uint64_t > > > > tmp579 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp576, tmp579,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp576);

vector < vector < vector < vector < uint64_t > > > > tmp581 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp579, tmp159, tmp581);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp579);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp159);

vector < vector < vector < vector < uint64_t > > > > tmp584 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp581,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp581, tmp160, tmp161,  (int32_t)0,  (int32_t)12, tmp584);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp581);
ClearMemSecret1( (int32_t)256, tmp161);
ClearMemSecret1( (int32_t)256, tmp160);

vector < vector < vector < vector < uint64_t > > > > tmp588 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp584, tmp588,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp584);

vector < vector < vector < vector < uint64_t > > > > tmp590 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp588, tmp164, tmp590);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp588);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp164);

vector < vector < vector < vector < uint64_t > > > > tmp593 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp590,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp590, tmp165, tmp166,  (int32_t)0,  (int32_t)12, tmp593);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp590);
ClearMemSecret1( (int32_t)256, tmp165);
ClearMemSecret1( (int32_t)256, tmp166);

vector < vector < vector < vector < uint64_t > > > > tmp597 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp593, tmp597,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp593);

vector < vector < vector < vector < uint64_t > > > > tmp599 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp597, tmp169, tmp599);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp597);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp169);

vector < vector < vector < vector < uint64_t > > > > tmp602 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleUp4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp573,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp599, tmp573, tmp602);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp599);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp573);

vector < vector < vector < vector < uint64_t > > > > tmp605 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp602,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp602, tmp170, tmp171,  (int32_t)0,  (int32_t)12, tmp605);
ClearMemSecret1( (int32_t)1024, tmp170);
ClearMemSecret1( (int32_t)1024, tmp171);

vector < vector < vector < vector < uint64_t > > > > tmp608 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp605, tmp608,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp605);

vector < vector < vector < vector < uint64_t > > > > tmp610 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp608, tmp174, tmp610);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp174);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp608);

vector < vector < vector < vector < uint64_t > > > > tmp613 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp610,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp610, tmp175, tmp176,  (int32_t)0,  (int32_t)12, tmp613);
ClearMemSecret1( (int32_t)256, tmp175);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp610);
ClearMemSecret1( (int32_t)256, tmp176);

vector < vector < vector < vector < uint64_t > > > > tmp617 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp613, tmp617,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp613);

vector < vector < vector < vector < uint64_t > > > > tmp619 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp617, tmp179, tmp619);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp179);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp617);

vector < vector < vector < vector < uint64_t > > > > tmp622 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp619,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp619, tmp180, tmp181,  (int32_t)0,  (int32_t)12, tmp622);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp619);
ClearMemSecret1( (int32_t)256, tmp181);
ClearMemSecret1( (int32_t)256, tmp180);

vector < vector < vector < vector < uint64_t > > > > tmp626 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp622, tmp626,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp622);

vector < vector < vector < vector < uint64_t > > > > tmp628 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp626, tmp184, tmp628);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp626);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp184);

vector < vector < vector < vector < uint64_t > > > > tmp631 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleUp4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp602,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp628, tmp602, tmp631);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp602);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp628);

vector < vector < vector < vector < uint64_t > > > > tmp634 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp631,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp631, tmp185, tmp186,  (int32_t)0,  (int32_t)12, tmp634);
ClearMemSecret1( (int32_t)1024, tmp185);
ClearMemSecret1( (int32_t)1024, tmp186);

vector < vector < vector < vector < uint64_t > > > > tmp637 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp634, tmp637,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp634);

vector < vector < vector < vector < uint64_t > > > > tmp639 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp637, tmp189, tmp639);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp637);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)256, tmp189);

vector < vector < vector < vector < uint64_t > > > > tmp642 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp639,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp639, tmp190, tmp191,  (int32_t)0,  (int32_t)12, tmp642);
ClearMemSecret1( (int32_t)256, tmp190);
ClearMemSecret1( (int32_t)256, tmp191);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp639);

vector < vector < vector < vector < uint64_t > > > > tmp646 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp642, tmp646,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp642);

vector < vector < vector < vector < uint64_t > > > > tmp648 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp646, tmp194, tmp648);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp646);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)256,  (int32_t)256, tmp194);

vector < vector < vector < vector < uint64_t > > > > tmp651 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp648,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp648, tmp195, tmp196,  (int32_t)0,  (int32_t)12, tmp651);
ClearMemSecret1( (int32_t)256, tmp196);
ClearMemSecret1( (int32_t)256, tmp195);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp648);

vector < vector < vector < vector < uint64_t > > > > tmp655 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp651, tmp655,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp651);

vector < vector < vector < vector < uint64_t > > > > tmp657 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256,  (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp655, tmp199, tmp657);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)256,  (int32_t)1024, tmp199);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)256, tmp655);

vector < vector < vector < vector < uint64_t > > > > tmp660 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleUp4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp631,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp657, tmp631, tmp660);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp631);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp657);

vector < vector < vector < vector < uint64_t > > > > tmp663 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp660,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp660, tmp200, tmp201,  (int32_t)0,  (int32_t)12, tmp663);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp660);
ClearMemSecret1( (int32_t)1024, tmp200);
ClearMemSecret1( (int32_t)1024, tmp201);

vector < vector < vector < vector < uint64_t > > > > tmp667 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp663, tmp667,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp663);

vector < vector < int32_t > > tmp669 = make_vector<int32_t>( (int32_t)4,  (int32_t)2);
tmp669[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp669[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp669[ (int64_t)1][ (int64_t)0] =  (int32_t)0;
tmp669[ (int64_t)1][ (int64_t)1] =  (int32_t)0;
tmp669[ (int64_t)2][ (int64_t)0] =  (int32_t)0;
tmp669[ (int64_t)2][ (int64_t)1] =  (int32_t)0;
tmp669[ (int64_t)3][ (int64_t)0] =  (int32_t)0;
tmp669[ (int64_t)3][ (int64_t)1] =  (int32_t)0;

vector < vector < vector < vector < uint64_t > > > > tmp670 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024);
Pad442( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp667,  (int32_t)4,  (int32_t)2, tmp669, tmp670);
ClearMemPublic2( (int32_t)4,  (int32_t)2, tmp669);

vector < vector < vector < vector < uint64_t > > > > tmp672 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp670, tmp204, tmp672);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)2048, tmp204);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp670);

vector < vector < vector < vector < uint64_t > > > > tmp675 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp667, tmp205, tmp675);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1024,  (int32_t)512, tmp205);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)1024, tmp667);

vector < vector < vector < vector < uint64_t > > > > tmp678 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp675,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp675, tmp206, tmp207,  (int32_t)0,  (int32_t)12, tmp678);
ClearMemSecret1( (int32_t)512, tmp207);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp675);
ClearMemSecret1( (int32_t)512, tmp206);

vector < vector < vector < vector < uint64_t > > > > tmp682 = make_vector<uint64_t>( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp678, tmp682,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp678);

vector < vector < int32_t > > tmp684 = make_vector<int32_t>( (int32_t)4,  (int32_t)2);
tmp684[ (int64_t)0][ (int64_t)0] =  (int32_t)0;
tmp684[ (int64_t)0][ (int64_t)1] =  (int32_t)0;
tmp684[ (int64_t)1][ (int64_t)0] =  (int32_t)1;
tmp684[ (int64_t)1][ (int64_t)1] =  (int32_t)1;
tmp684[ (int64_t)2][ (int64_t)0] =  (int32_t)1;
tmp684[ (int64_t)2][ (int64_t)1] =  (int32_t)1;
tmp684[ (int64_t)3][ (int64_t)0] =  (int32_t)0;
tmp684[ (int64_t)3][ (int64_t)1] =  (int32_t)0;

vector < vector < vector < vector < uint64_t > > > > tmp685 = make_vector<uint64_t>( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)512);
Pad442( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)512,  (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp682,  (int32_t)4,  (int32_t)2, tmp684, tmp685);
ClearMemPublic2( (int32_t)4,  (int32_t)2, tmp684);
ClearMemSecret4( (int32_t)1,  (int32_t)14,  (int32_t)14,  (int32_t)512, tmp682);

vector < vector < vector < vector < uint64_t > > > > tmp688 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)512,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)2,  (int32_t)2, tmp685, tmp210, tmp688);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512, tmp210);
ClearMemSecret4( (int32_t)1,  (int32_t)16,  (int32_t)16,  (int32_t)512, tmp685);

vector < vector < vector < vector < uint64_t > > > > tmp691 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp688,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp688, tmp211, tmp212,  (int32_t)0,  (int32_t)12, tmp691);
ClearMemSecret1( (int32_t)512, tmp211);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp688);
ClearMemSecret1( (int32_t)512, tmp212);

vector < vector < vector < vector < uint64_t > > > > tmp695 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp691, tmp695,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp691);

vector < vector < vector < vector < uint64_t > > > > tmp697 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp695, tmp215, tmp697);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp695);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048, tmp215);

vector < vector < vector < vector < uint64_t > > > > tmp700 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
MatAdd4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp697, tmp672, tmp700);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp697);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp672);

vector < vector < vector < vector < uint64_t > > > > tmp703 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp700,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp700, tmp216, tmp217,  (int32_t)0,  (int32_t)12, tmp703);
ClearMemSecret1( (int32_t)2048, tmp216);
ClearMemSecret1( (int32_t)2048, tmp217);

vector < vector < vector < vector < uint64_t > > > > tmp706 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp703, tmp706,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp703);

vector < vector < vector < vector < uint64_t > > > > tmp708 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp706, tmp220, tmp708);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp706);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)512, tmp220);

vector < vector < vector < vector < uint64_t > > > > tmp711 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp708,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp708, tmp221, tmp222,  (int32_t)0,  (int32_t)12, tmp711);
ClearMemSecret1( (int32_t)512, tmp221);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp708);
ClearMemSecret1( (int32_t)512, tmp222);

vector < vector < vector < vector < uint64_t > > > > tmp715 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp711, tmp715,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp711);

vector < vector < vector < vector < uint64_t > > > > tmp717 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp715, tmp225, tmp717);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512, tmp225);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp715);

vector < vector < vector < vector < uint64_t > > > > tmp720 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp717,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp717, tmp226, tmp227,  (int32_t)0,  (int32_t)12, tmp720);
ClearMemSecret1( (int32_t)512, tmp227);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp717);
ClearMemSecret1( (int32_t)512, tmp226);

vector < vector < vector < vector < uint64_t > > > > tmp724 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp720, tmp724,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp720);

vector < vector < vector < vector < uint64_t > > > > tmp726 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp724, tmp230, tmp726);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048, tmp230);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp724);

vector < vector < vector < vector < uint64_t > > > > tmp729 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
ScaleUp4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp700,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp726, tmp700, tmp729);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp726);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp700);

vector < vector < vector < vector < uint64_t > > > > tmp732 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp729,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp729, tmp231, tmp232,  (int32_t)0,  (int32_t)12, tmp732);
ClearMemSecret1( (int32_t)2048, tmp231);
ClearMemSecret1( (int32_t)2048, tmp232);

vector < vector < vector < vector < uint64_t > > > > tmp735 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp732, tmp735,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp732);

vector < vector < vector < vector < uint64_t > > > > tmp737 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048,  (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp735, tmp235, tmp737);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)512, tmp235);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp735);

vector < vector < vector < vector < uint64_t > > > > tmp740 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp737,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp737, tmp236, tmp237,  (int32_t)0,  (int32_t)12, tmp740);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp737);
ClearMemSecret1( (int32_t)512, tmp236);
ClearMemSecret1( (int32_t)512, tmp237);

vector < vector < vector < vector < uint64_t > > > > tmp744 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp740, tmp744,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp740);

vector < vector < vector < vector < uint64_t > > > > tmp746 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512,  (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)1, tmp744, tmp240, tmp746);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp744);
ClearMemSecret4( (int32_t)3,  (int32_t)3,  (int32_t)512,  (int32_t)512, tmp240);

vector < vector < vector < vector < uint64_t > > > > tmp749 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp746,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp746, tmp241, tmp242,  (int32_t)0,  (int32_t)12, tmp749);
ClearMemSecret1( (int32_t)512, tmp241);
ClearMemSecret1( (int32_t)512, tmp242);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp746);

vector < vector < vector < vector < uint64_t > > > > tmp753 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp749, tmp753,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp749);

vector < vector < vector < vector < uint64_t > > > > tmp755 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
Conv2DWrapper( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1, tmp753, tmp245, tmp755);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)512,  (int32_t)2048, tmp245);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)512, tmp753);

vector < vector < vector < vector < uint64_t > > > > tmp758 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
ScaleUp4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp729,  (int32_t)12);
MatAdd4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp755, tmp729, tmp758);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp729);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp755);

vector < vector < vector < vector < uint64_t > > > > tmp761 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
ScaleDown4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp758,  (int32_t)12);
FusedBatchNorm4411( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp758, tmp246, tmp247,  (int32_t)0,  (int32_t)12, tmp761);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp758);
ClearMemSecret1( (int32_t)2048, tmp246);
ClearMemSecret1( (int32_t)2048, tmp247);

vector < vector < vector < vector < uint64_t > > > > tmp765 = make_vector<uint64_t>( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048);
Relu4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp761, tmp765,  (int32_t)12, 1);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp761);

vector < vector < vector < vector < uint64_t > > > > tmp767 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048);
AvgPool( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048,  (int32_t)7,  (int32_t)7,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)0,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp765, tmp767);
ClearMemSecret4( (int32_t)1,  (int32_t)7,  (int32_t)7,  (int32_t)2048, tmp765);

vector < vector < uint64_t > > tmp771 = make_vector<uint64_t>( (int32_t)1,  (int32_t)2048);

int32_t tmp769 =  (int32_t)1;

int32_t tmp770 =  (int32_t)2;
Squeeze24( (int32_t)1,  (int32_t)2048, tmp769, tmp770,  (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp767, tmp771);
ClearMemSecret4( (int32_t)1,  (int32_t)1,  (int32_t)1,  (int32_t)2048, tmp767);

vector < vector < uint64_t > > tmp773 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1001);
MatMul2D( (int32_t)1,  (int32_t)2048,  (int32_t)1001, tmp771, tmp250, tmp773, 0);
ClearMemSecret2( (int32_t)2048,  (int32_t)1001, tmp250);
ClearMemSecret2( (int32_t)1,  (int32_t)2048, tmp771);

vector < vector < uint64_t > > tmp776 = make_vector<uint64_t>( (int32_t)1,  (int32_t)1001);
ScaleUp1( (int32_t)1001, tmp251,  (int32_t)12);
MatAddBroadCast2( (int32_t)1,  (int32_t)1001, tmp773, tmp251, tmp776);
ClearMemSecret2( (int32_t)1,  (int32_t)1001, tmp773);
ClearMemSecret1( (int32_t)1001, tmp251);

int32_t tmp779 =  (int32_t)1;

vector < uint64_t > tmp780 = make_vector<uint64_t>( (int32_t)1);
ArgMax1( (int32_t)1,  (int32_t)1,  (int32_t)1001, tmp776, tmp779, tmp780);
ClearMemPublic(tmp779);
ClearMemSecret2( (int32_t)1,  (int32_t)1001, tmp776);
EndComputation();
for (uint32_t i0 =  (uint32_t)0; i0 <  (int32_t)1; i0++){
cout << (funcReconstruct2PCCons(tmp780[i0], 2)) << endl;
}
cout << "----------------------------------" << endl;
cout << NUM_OF_PARTIES << "PC code, P" << partyNum << endl;
cout << NUM_ITERATIONS << " iterations, " << whichNetwork << endl;
cout << "----------------------------------" << endl << endl;


/****************************** CLEAN-UP ******************************/
delete aes_common;
delete aes_indep;
delete aes_a_1;
delete aes_a_2;
delete aes_b_1;
delete aes_b_2;
delete aes_c_1;
delete aes_share_conv_bit_shares_p0_p2;
delete aes_share_conv_bit_shares_p1_p2;
delete aes_share_conv_shares_mod_odd_p0_p2;
delete aes_share_conv_shares_mod_odd_p1_p2;
delete aes_comp_msb_shares_lsb_p0_p2;
delete aes_comp_msb_shares_lsb_p1_p2;
delete aes_comp_msb_shares_bit_vec_p0_p2;
delete aes_comp_msb_shares_bit_vec_p1_p2;
delete aes_conv_opti_a_1;
delete aes_conv_opti_a_2;
delete aes_conv_opti_b_1;
delete aes_conv_opti_b_2;
delete aes_conv_opti_c_1;
delete aes_parallel;
deleteObjects();

return 0;

}

